{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  validate(title,content);
  long articleId=counterLocalService.increment();
  long resourcePrimKey=counterLocalService.increment();
  Article article=articlePersistence.create(articleId);
  article.setUuid(uuid);
  article.setResourcePrimKey(resourcePrimKey);
  article.setGroupId(serviceContext.getScopeGroupId());
  article.setCompanyId(user.getCompanyId());
  article.setUserId(user.getUserId());
  article.setUserName(user.getFullName());
  article.setCreateDate(serviceContext.getCreateDate(now));
  article.setModifiedDate(serviceContext.getModifiedDate(now));
  article.setParentResourcePrimKey(parentResourcePrimKey);
  article.setVersion(ArticleConstants.DEFAULT_VERSION);
  article.setTitle(title);
  article.setContent(content);
  article.setDescription(description);
  article.setPriority(priority);
  article.setExpandoBridgeAttributes(serviceContext);
  articlePersistence.update(article,false);
  if (serviceContext.getAddCommunityPermissions() || serviceContext.getAddGuestPermissions()) {
    addArticleResources(article,serviceContext.getAddCommunityPermissions(),serviceContext.getAddGuestPermissions());
  }
 else {
    addArticleResources(article,serviceContext.getCommunityPermissions(),serviceContext.getGuestPermissions());
  }
  updateDisplayOrder(article,parentResourcePrimKey,priority);
  mbMessageLocalService.addDiscussionMessage(userId,article.getUserName(),Article.class.getName(),resourcePrimKey,WorkflowConstants.ACTION_PUBLISH);
  socialActivityLocalService.addActivity(userId,article.getGroupId(),Article.class.getName(),resourcePrimKey,AdminActivityKeys.ADD_ARTICLE,StringPool.BLANK,0);
  Indexer indexer=IndexerRegistryUtil.getIndexer(Article.class);
  indexer.reindex(article);
  addArticleAttachments(article,dirName);
  notifySubscribers(article,false,serviceContext);
  return article;
}
