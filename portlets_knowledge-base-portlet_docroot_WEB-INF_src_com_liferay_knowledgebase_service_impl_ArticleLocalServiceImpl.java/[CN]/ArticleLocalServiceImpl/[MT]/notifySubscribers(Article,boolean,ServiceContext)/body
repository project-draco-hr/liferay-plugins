{
  if (Validator.isNull(serviceContext.getLayoutFullURL())) {
    return;
  }
  PortletPreferences preferences=ServiceContextUtil.getPortletPreferences(serviceContext);
  if (preferences == null) {
    long ownerId=article.getGroupId();
    int ownerType=PortletKeys.PREFS_OWNER_TYPE_GROUP;
    long plid=PortletKeys.PREFS_PLID_SHARED;
    String portletId=PortletKeys.KNOWLEDGE_BASE_ADMIN;
    String defaultPreferences=null;
    preferences=portletPreferencesLocalService.getPreferences(article.getCompanyId(),ownerId,ownerType,plid,portletId,defaultPreferences);
  }
  String emailArticleAddedEnabled=preferences.getValue("email-article-added-enabled",PortletProps.get("admin.email.article.added.enabled"));
  if (!update && !GetterUtil.getBoolean(emailArticleAddedEnabled)) {
    return;
  }
  String emailArticleUpdatedEnabled=preferences.getValue("email-article-updated-enabled",PortletProps.get("admin.email.article.updated.enabled"));
  if (update && !GetterUtil.getBoolean(emailArticleUpdatedEnabled)) {
    return;
  }
  String fromName=preferences.getValue("email-from-name",PortletProps.get("admin.email.from.name"));
  String fromAddress=preferences.getValue("email-from-address",PortletProps.get("admin.email.from.address"));
  String articleContent=StringUtil.replace(article.getContent(),new String[]{"href=\"/","src=\"/"},new String[]{"href=\"" + serviceContext.getPortalURL() + "/","src=\"" + serviceContext.getPortalURL() + "/"});
  Map<String,String> articleDiffs=new HashMap<String,String>();
  String[] parameters=new String[]{"content","title"};
  for (  String parameter : parameters) {
    String articleDiff=StringPool.BLANK;
    try {
      articleDiff=KnowledgeBaseUtil.getArticleDiff(article.getResourcePrimKey(),article.getVersion(),parameter,serviceContext.getPortalURL());
    }
 catch (    Exception e) {
      _log.error("Unable to process diff for {resourcePrimKey=" + article.getResourcePrimKey() + ", version="+ article.getVersion()+ "}");
    }
    articleDiffs.put(parameter,articleDiff);
  }
  String subject=null;
  String body=null;
  if (!update) {
    subject=preferences.getValue("email-article-added-subject",null);
    if (subject == null) {
      String name=PortletProps.get("admin.email.article.added.subject");
      try {
        subject=StringUtil.read(getClass().getClassLoader(),name);
      }
 catch (      IOException ioe) {
        _log.error(ioe,ioe);
      }
    }
    body=preferences.getValue("email-article-added-body",null);
    if (body == null) {
      String name=PortletProps.get("admin.email.article.added.body");
      try {
        body=StringUtil.read(getClass().getClassLoader(),name);
      }
 catch (      IOException ioe) {
        _log.error(ioe,ioe);
      }
    }
  }
 else {
    subject=preferences.getValue("email-article-updated-subject",null);
    if (subject == null) {
      String name=PortletProps.get("admin.email.article.updated.subject");
      try {
        subject=StringUtil.read(getClass().getClassLoader(),name);
      }
 catch (      IOException ioe) {
        _log.error(ioe,ioe);
      }
    }
    body=preferences.getValue("email-article-updated-body",null);
    if (body == null) {
      String name=PortletProps.get("admin.email.article.updated.body");
      try {
        body=StringUtil.read(getClass().getClassLoader(),name);
      }
 catch (      IOException ioe) {
        _log.error(ioe,ioe);
      }
    }
  }
  SubscriptionSender subscriptionSender=new AdminSubscriptionSender(article,serviceContext.getPortalURL());
  subscriptionSender.setBody(body);
  subscriptionSender.setCompanyId(article.getCompanyId());
  subscriptionSender.setContextAttributes("[$ARTICLE_CONTENT$]",articleContent,"[$ARTICLE_CONTENT_DIFF$]",articleDiffs.get("content"),"[$ARTICLE_TITLE$]",article.getTitle(),"[$ARTICLE_TITLE_DIFF$]",articleDiffs.get("title"));
  subscriptionSender.setContextUserPrefix("ARTICLE");
  subscriptionSender.setFrom(fromAddress,fromName);
  subscriptionSender.setGroupId(article.getGroupId());
  subscriptionSender.setHtmlFormat(true);
  subscriptionSender.setMailId("kb_article",article.getArticleId());
  subscriptionSender.setPortletId(PortletKeys.KNOWLEDGE_BASE_ADMIN);
  subscriptionSender.setReplyToAddress(fromAddress);
  subscriptionSender.setSubject(subject);
  subscriptionSender.setUserId(article.getUserId());
  subscriptionSender.addPersistedSubscribers(Article.class.getName(),article.getGroupId());
  subscriptionSender.addPersistedSubscribers(Article.class.getName(),article.getResourcePrimKey());
  while (article.getParentResourcePrimKey() != ArticleConstants.DEFAULT_PARENT_RESOURCE_PRIM_KEY) {
    article=getLatestArticle(article.getParentResourcePrimKey(),WorkflowConstants.STATUS_APPROVED);
    subscriptionSender.addPersistedSubscribers(Article.class.getName(),article.getResourcePrimKey());
  }
  subscriptionSender.flushNotificationsAsync();
}
