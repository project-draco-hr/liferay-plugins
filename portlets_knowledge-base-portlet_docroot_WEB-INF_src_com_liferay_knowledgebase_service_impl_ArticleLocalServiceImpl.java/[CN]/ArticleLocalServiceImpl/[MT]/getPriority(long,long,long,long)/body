{
  int count=articlePersistence.countByNotR_G_P_P_L(resourcePrimKey,groupId,parentResourcePrimKey,priority,ArticleConstants.LATEST_VERSION);
  if (count == 0) {
    return priority;
  }
  int total=getSiblingArticlesCount(groupId,parentResourcePrimKey,WorkflowConstants.STATUS_ANY);
  int pages=total / PriorityHelper.INTERVAL;
  long newPriority=0;
  long value=0;
  for (int i=0; i <= pages; i++) {
    int start=(i * PriorityHelper.INTERVAL);
    int end=start + PriorityHelper.INTERVAL;
    List<Article> articles=getSiblingArticles(groupId,parentResourcePrimKey,WorkflowConstants.STATUS_ANY,start,end,new ArticlePriorityComparator(true));
    if (articles.isEmpty()) {
      continue;
    }
    Article lastArticle=articles.get(articles.size() - 1);
    if (lastArticle.getPriority() < priority) {
      value=lastArticle.getPriority();
      continue;
    }
    for (    Article article : articles) {
      value=value + PriorityHelper.MINIMUM_INCREMENT;
      if (article.getPriority() == priority) {
        newPriority=value;
        value=value + PriorityHelper.MINIMUM_INCREMENT;
      }
      if (article.getResourcePrimKey() != resourcePrimKey) {
        article.setPriority(value);
        articlePersistence.update(article,false);
      }
    }
  }
  return newPriority;
}
