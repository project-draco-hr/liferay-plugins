{
  DynamicQuery dynamicQuery=DynamicQueryFactoryUtil.forClass(Group.class,"group",PortalClassLoaderUtil.getClassLoader());
  Property groupIdProperty=PropertyFactoryUtil.forName("groupId");
  Property classNameIdProperty=PropertyFactoryUtil.forName("classNameId");
  Property parentGroupIdProperty=PropertyFactoryUtil.forName("parentGroupId");
  long classNameId=PortalUtil.getClassNameId(Layout.class);
  Conjunction conjunction1=RestrictionsFactoryUtil.conjunction();
  conjunction1.add(groupIdProperty.eq(parentGroupId));
  conjunction1.add(classNameIdProperty.ne(classNameId));
  Conjunction conjunction2=RestrictionsFactoryUtil.conjunction();
  conjunction2.add(classNameIdProperty.eq(classNameId));
  conjunction2.add(parentGroupIdProperty.eq(parentGroupId));
  Disjunction disjunction=RestrictionsFactoryUtil.disjunction();
  disjunction.add(conjunction1);
  disjunction.add(conjunction2);
  dynamicQuery.add(disjunction);
  List<Group> groups=groupPersistence.findWithDynamicQuery(dynamicQuery);
  return StringUtil.split(ListUtil.toString(groups,"groupId"),0L);
}
