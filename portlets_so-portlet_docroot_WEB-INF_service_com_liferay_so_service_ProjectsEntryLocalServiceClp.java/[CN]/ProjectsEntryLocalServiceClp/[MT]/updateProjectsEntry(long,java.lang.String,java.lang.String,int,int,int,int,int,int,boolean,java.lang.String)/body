{
  Object paramObj0=new LongWrapper(projectsEntryId);
  Object paramObj1=ClpSerializer.translateInput(title);
  if (title == null) {
    paramObj1=new NullWrapper("java.lang.String");
  }
  Object paramObj2=ClpSerializer.translateInput(description);
  if (description == null) {
    paramObj2=new NullWrapper("java.lang.String");
  }
  Object paramObj3=new IntegerWrapper(startDateMonth);
  Object paramObj4=new IntegerWrapper(startDateDay);
  Object paramObj5=new IntegerWrapper(startDateYear);
  Object paramObj6=new IntegerWrapper(endDateMonth);
  Object paramObj7=new IntegerWrapper(endDateDay);
  Object paramObj8=new IntegerWrapper(endDateYear);
  Object paramObj9=new BooleanWrapper(current);
  Object paramObj10=ClpSerializer.translateInput(data);
  if (data == null) {
    paramObj10=new NullWrapper("java.lang.String");
  }
  Object returnObj=null;
  try {
    returnObj=_classLoaderProxy.invoke("updateProjectsEntry",new Object[]{paramObj0,paramObj1,paramObj2,paramObj3,paramObj4,paramObj5,paramObj6,paramObj7,paramObj8,paramObj9,paramObj10});
  }
 catch (  Throwable t) {
    if (t instanceof com.liferay.portal.PortalException) {
      throw (com.liferay.portal.PortalException)t;
    }
    if (t instanceof com.liferay.portal.SystemException) {
      throw (com.liferay.portal.SystemException)t;
    }
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RuntimeException(t.getClass().getName() + " is not a valid exception");
    }
  }
  return (com.liferay.so.model.ProjectsEntry)ClpSerializer.translateOutput(returnObj);
}
