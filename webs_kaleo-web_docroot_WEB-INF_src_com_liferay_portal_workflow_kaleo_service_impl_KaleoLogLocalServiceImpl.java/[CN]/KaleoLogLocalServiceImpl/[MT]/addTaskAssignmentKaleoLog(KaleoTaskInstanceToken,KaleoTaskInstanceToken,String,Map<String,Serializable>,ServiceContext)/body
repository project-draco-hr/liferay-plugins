{
  KaleoInstanceToken kaleoInstanceToken=newKaleoTaskInstanceToken.getKaleoInstanceToken();
  KaleoLog kaleoLog=createKaleoLog(kaleoInstanceToken,LogType.TASK_ASSIGNMENT,serviceContext);
  kaleoLog.setKaleoTaskInstanceTokenId(newKaleoTaskInstanceToken.getKaleoTaskInstanceTokenId());
  KaleoNode currentKaleoNode=kaleoInstanceToken.getCurrentKaleoNode();
  kaleoLog.setKaleoDefinitionId(currentKaleoNode.getKaleoDefinitionId());
  kaleoLog.setKaleoNodeId(currentKaleoNode.getKaleoNodeId());
  kaleoLog.setKaleoNodeName(currentKaleoNode.getName());
  if (previousKaleoTaskInstanceToken != null) {
    List<KaleoTaskAssignmentInstance> kaleoTaskAssignmentInstances=previousKaleoTaskInstanceToken.getKaleoTaskAssignmentInstances();
    if (kaleoTaskAssignmentInstances.size() == 1) {
      KaleoTaskAssignmentInstance kaleoTaskAssignmentInstance=kaleoTaskAssignmentInstances.get(0);
      kaleoLog.setPreviousAssigneeClassName(kaleoTaskAssignmentInstance.getAssigneeClassName());
      kaleoLog.setPreviousAssigneeClassPK(kaleoTaskAssignmentInstance.getAssigneeClassPK());
    }
  }
  List<KaleoTaskAssignmentInstance> kaleoTaskAssignmentInstances=newKaleoTaskInstanceToken.getKaleoTaskAssignmentInstances();
  if (!kaleoTaskAssignmentInstances.isEmpty()) {
    KaleoTaskAssignmentInstance kaleoTaskAssignmentInstance=kaleoTaskAssignmentInstances.get(0);
    kaleoLog.setCurrentAssigneeClassName(kaleoTaskAssignmentInstance.getAssigneeClassName());
    kaleoLog.setCurrentAssigneeClassPK(kaleoTaskAssignmentInstance.getAssigneeClassPK());
  }
  kaleoLog.setComment(comment);
  kaleoLog.setWorkflowContext(WorkflowContextUtil.convert(workflowContext));
  kaleoLogPersistence.update(kaleoLog,false);
  return kaleoLog;
}
