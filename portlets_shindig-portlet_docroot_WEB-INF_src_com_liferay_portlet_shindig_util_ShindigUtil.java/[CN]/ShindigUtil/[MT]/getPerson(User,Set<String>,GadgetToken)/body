{
  Person person=null;
  try {
    person=new Person(String.valueOf(user.getUserId()),new Name(user.getFullName()));
    StringBuilder sb=new StringBuilder();
    sb.append(token.getDomain());
    sb.append(PortalUtil.getPathFriendlyURLPublic());
    sb.append(user.getScreenName());
    person.setProfileUrl(sb.toString());
    sb=new StringBuilder();
    sb.append(token.getDomain());
    sb.append(PortalUtil.getPathImage());
    sb.append("/user_");
    sb.append(user.isFemale() ? "female" : "male");
    sb.append("_portrait?img_id=");
    sb.append(user.getPortraitId());
    sb.append("&t=");
    sb.append(ImageServletTokenUtil.getToken(user.getPortraitId()));
    person.setThumbnailUrl(sb.toString());
    if (profileDetails.contains(Person.Field.ABOUT_ME.toString())) {
      person.setAboutMe(user.getComments());
    }
    if (profileDetails.contains(Person.Field.AGE.toString())) {
      Calendar dateOfBirth=new GregorianCalendar();
      dateOfBirth.setTime(user.getBirthday());
      Calendar today=Calendar.getInstance();
      int age=today.get(Calendar.YEAR) - dateOfBirth.get(Calendar.YEAR);
      dateOfBirth.add(Calendar.YEAR,age);
      if (today.before(dateOfBirth)) {
        age--;
      }
      person.setAge(age);
    }
    if (profileDetails.contains(Person.Field.DATE_OF_BIRTH.toString())) {
      person.setDateOfBirth(user.getBirthday());
    }
    if (profileDetails.contains(Person.Field.EMAILS)) {
      person.setEmails(getEmails(user));
    }
    if (profileDetails.contains(Person.Field.GENDER.toString())) {
      if (user.isFemale()) {
        person.setGender(new Enum<Enum.Gender>(Enum.Gender.FEMALE));
      }
 else {
        person.setGender(new Enum<Enum.Gender>(Enum.Gender.MALE));
      }
    }
    if (profileDetails.contains(Person.Field.NICKNAME.toString())) {
      person.setNickname(user.getScreenName());
    }
    if (profileDetails.contains(Person.Field.PHONE_NUMBERS.toString())) {
      person.setPhoneNumbers(getPhoneNumbers(Contact.class.getName(),user.getContactId()));
    }
    if (profileDetails.contains(Person.Field.TIME_ZONE.toString())) {
      person.setTimeZone(new Long(user.getTimeZone().getRawOffset()));
    }
    if (token.getViewerId().equals(person.getId())) {
      person.setIsViewer(true);
    }
    if (token.getOwnerId().equals(person.getId())) {
      person.setIsOwner(true);
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  return person;
}
