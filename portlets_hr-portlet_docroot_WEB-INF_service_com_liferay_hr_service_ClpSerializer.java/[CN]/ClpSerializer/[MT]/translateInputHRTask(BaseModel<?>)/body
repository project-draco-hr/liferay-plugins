{
  HRTaskClp oldCplModel=(HRTaskClp)oldModel;
  Thread currentThread=Thread.currentThread();
  ClassLoader contextClassLoader=currentThread.getContextClassLoader();
  try {
    currentThread.setContextClassLoader(_classLoader);
    try {
      Class<?> newModelClass=Class.forName("com.liferay.hr.model.impl.HRTaskImpl",true,_classLoader);
      Object newModel=newModelClass.newInstance();
      Method method0=newModelClass.getMethod("setHrTaskId",new Class[]{Long.TYPE});
      Long value0=new Long(oldCplModel.getHrTaskId());
      method0.invoke(newModel,value0);
      Method method1=newModelClass.getMethod("setGroupId",new Class[]{Long.TYPE});
      Long value1=new Long(oldCplModel.getGroupId());
      method1.invoke(newModel,value1);
      Method method2=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
      Long value2=new Long(oldCplModel.getCompanyId());
      method2.invoke(newModel,value2);
      Method method3=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
      Long value3=new Long(oldCplModel.getUserId());
      method3.invoke(newModel,value3);
      Method method4=newModelClass.getMethod("setUserName",new Class[]{String.class});
      String value4=oldCplModel.getUserName();
      method4.invoke(newModel,value4);
      Method method5=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
      Date value5=oldCplModel.getCreateDate();
      method5.invoke(newModel,value5);
      Method method6=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
      Date value6=oldCplModel.getModifiedDate();
      method6.invoke(newModel,value6);
      Method method7=newModelClass.getMethod("setHrBillabilityId",new Class[]{Long.TYPE});
      Long value7=new Long(oldCplModel.getHrBillabilityId());
      method7.invoke(newModel,value7);
      Method method8=newModelClass.getMethod("setHrProjectId",new Class[]{Long.TYPE});
      Long value8=new Long(oldCplModel.getHrProjectId());
      method8.invoke(newModel,value8);
      Method method9=newModelClass.getMethod("setHrTaskStatusId",new Class[]{Long.TYPE});
      Long value9=new Long(oldCplModel.getHrTaskStatusId());
      method9.invoke(newModel,value9);
      Method method10=newModelClass.getMethod("setParentHRTaskId",new Class[]{Long.TYPE});
      Long value10=new Long(oldCplModel.getParentHRTaskId());
      method10.invoke(newModel,value10);
      Method method11=newModelClass.getMethod("setName",new Class[]{String.class});
      String value11=oldCplModel.getName();
      method11.invoke(newModel,value11);
      Method method12=newModelClass.getMethod("setDescription",new Class[]{String.class});
      String value12=oldCplModel.getDescription();
      method12.invoke(newModel,value12);
      Method method13=newModelClass.getMethod("setEstimatedStartDate",new Class[]{Date.class});
      Date value13=oldCplModel.getEstimatedStartDate();
      method13.invoke(newModel,value13);
      Method method14=newModelClass.getMethod("setEstimatedEndDate",new Class[]{Date.class});
      Date value14=oldCplModel.getEstimatedEndDate();
      method14.invoke(newModel,value14);
      Method method15=newModelClass.getMethod("setEstimatedHours",new Class[]{Double.TYPE});
      Double value15=new Double(oldCplModel.getEstimatedHours());
      method15.invoke(newModel,value15);
      Method method16=newModelClass.getMethod("setEstimatedHoursCost",new Class[]{Double.TYPE});
      Double value16=new Double(oldCplModel.getEstimatedHoursCost());
      method16.invoke(newModel,value16);
      Method method17=newModelClass.getMethod("setEstimatedHoursCostCurrencyCode",new Class[]{String.class});
      String value17=oldCplModel.getEstimatedHoursCostCurrencyCode();
      method17.invoke(newModel,value17);
      Method method18=newModelClass.getMethod("setEstimatedExpenses",new Class[]{Double.TYPE});
      Double value18=new Double(oldCplModel.getEstimatedExpenses());
      method18.invoke(newModel,value18);
      Method method19=newModelClass.getMethod("setEstimatedExpensesCurrencyCode",new Class[]{String.class});
      String value19=oldCplModel.getEstimatedExpensesCurrencyCode();
      method19.invoke(newModel,value19);
      Method method20=newModelClass.getMethod("setActualStartDate",new Class[]{Date.class});
      Date value20=oldCplModel.getActualStartDate();
      method20.invoke(newModel,value20);
      Method method21=newModelClass.getMethod("setActualEndDate",new Class[]{Date.class});
      Date value21=oldCplModel.getActualEndDate();
      method21.invoke(newModel,value21);
      Method method22=newModelClass.getMethod("setActualHours",new Class[]{Double.TYPE});
      Double value22=new Double(oldCplModel.getActualHours());
      method22.invoke(newModel,value22);
      Method method23=newModelClass.getMethod("setActualHoursCost",new Class[]{Double.TYPE});
      Double value23=new Double(oldCplModel.getActualHoursCost());
      method23.invoke(newModel,value23);
      Method method24=newModelClass.getMethod("setActualHoursCostCurrencyCode",new Class[]{String.class});
      String value24=oldCplModel.getActualHoursCostCurrencyCode();
      method24.invoke(newModel,value24);
      Method method25=newModelClass.getMethod("setActualExpenses",new Class[]{Double.TYPE});
      Double value25=new Double(oldCplModel.getActualExpenses());
      method25.invoke(newModel,value25);
      Method method26=newModelClass.getMethod("setActualExpensesCurrencyCode",new Class[]{String.class});
      String value26=oldCplModel.getActualExpensesCurrencyCode();
      method26.invoke(newModel,value26);
      return newModel;
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  finally {
    currentThread.setContextClassLoader(contextClassLoader);
  }
  return oldModel;
}
