{
  int workflowAction=serviceContext.getWorkflowAction();
  if (workflowAction == WorkflowConstants.ACTION_SAVE_DRAFT) {
    return super.updatePage(userId,nodeId,title,version,content,summary,minorEdit,format,parentTitle,redirectTitle,serviceContext);
  }
  boolean enabled=isWikiEnabled(userId,nodeId,serviceContext);
  WikiPage page=super.updatePage(userId,nodeId,title,version,content,summary,minorEdit,format,parentTitle,redirectTitle,serviceContext);
  AkismetData akismetData=updateAkismetData(page,serviceContext);
  if (!enabled) {
    return page;
  }
  String akismetContent=page.getTitle() + "\n\n" + page.getContent();
  if (!AkismetUtil.isSpam(userId,akismetContent,akismetData)) {
    return super.updateStatus(userId,page.getResourcePrimKey(),WorkflowConstants.STATUS_APPROVED,serviceContext);
  }
  boolean notificationEnabled=false;
  try {
    notificationEnabled=NotificationThreadLocal.isEnabled();
    NotificationThreadLocal.setEnabled(false);
    page.setSummary(AkismetConstants.WIKI_PAGE_PENDING_APPROVAL);
    page.setStatus(WorkflowConstants.STATUS_APPROVED);
    page=super.updateWikiPage(page);
    WikiPage previousPage=AkismetUtil.getWikiPage(page.getNodeId(),page.getTitle(),page.getVersion(),true);
    ServiceContext newServiceContext=new ServiceContext();
    newServiceContext.setFormDate(page.getModifiedDate());
    if (previousPage != null) {
      return super.revertPage(userId,nodeId,title,previousPage.getVersion(),newServiceContext);
    }
 else {
      return page;
    }
  }
  finally {
    NotificationThreadLocal.setEnabled(notificationEnabled);
  }
}
