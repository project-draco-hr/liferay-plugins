{
  Article article=ArticleLocalServiceUtil.getLatestArticle(resourcePrimKey,WorkflowConstants.STATUS_APPROVED);
  for (  Subscription subscription : subscriptions) {
    long subscribedUserId=subscription.getUserId();
    if (sent.contains(subscribedUserId)) {
      if (_log.isDebugEnabled()) {
        _log.debug("Do not send a duplicate email to user " + subscribedUserId);
      }
      continue;
    }
 else {
      if (_log.isDebugEnabled()) {
        _log.debug("Add user " + subscribedUserId + " to the list of users who have received an email");
      }
      sent.add(subscribedUserId);
    }
    User user=null;
    try {
      user=UserLocalServiceUtil.getUserById(subscribedUserId);
    }
 catch (    NoSuchUserException nsue) {
      if (_log.isInfoEnabled()) {
        _log.info("Subscription " + subscription.getSubscriptionId() + " is stale and will be deleted");
      }
      ArticleLocalServiceUtil.unsubscribeAllPortlets(subscription.getCompanyId(),subscription.getSubscriptionId());
      continue;
    }
    if (!user.isActive()) {
      continue;
    }
    if (!GroupLocalServiceUtil.hasUserGroup(userId,groupId)) {
      if (_log.isInfoEnabled()) {
        _log.info("Subscription " + subscription.getSubscriptionId() + " is stale and will be deleted");
      }
      ArticleLocalServiceUtil.unsubscribeAllPortlets(subscription.getCompanyId(),subscription.getSubscriptionId());
      continue;
    }
    PrincipalThreadLocal.setName(user.getUserId());
    PermissionChecker permissionChecker=PermissionCheckerFactoryUtil.create(user,true);
    PermissionThreadLocal.setPermissionChecker(permissionChecker);
    try {
      if (!ArticlePermission.contains(permissionChecker,resourcePrimKey,ActionKeys.VIEW)) {
        if (_log.isInfoEnabled()) {
          _log.info("User " + user.getUserId() + " does not have view permission");
        }
        continue;
      }
    }
  finally {
      PrincipalThreadLocal.setName(null);
      PermissionThreadLocal.setPermissionChecker(null);
    }
    String[] portletIds=ExpandoValueLocalServiceUtil.getData(user.getCompanyId(),Subscription.class.getName(),"KB","portletIds",subscription.getSubscriptionId(),new String[0]);
    String articleURL=null;
    for (    String portletId : portletIds) {
      articleURL=KnowledgeBaseUtil.getArticleURL(portletId,resourcePrimKey,portalURL);
      if (Validator.isNotNull(articleURL)) {
        break;
      }
      if (_log.isInfoEnabled()) {
        _log.info("Portlet " + portletId + " does not exist or does "+ "not contain article "+ resourcePrimKey);
        ArticleLocalServiceUtil.unsubscribe(subscription.getCompanyId(),userId,portletId,subscription.getClassPK());
      }
    }
    if (Validator.isNull(articleURL)) {
      continue;
    }
    String categoryTitle=LanguageUtil.get(user.getLocale(),"category.kb");
    String portletName=PortalUtil.getPortletTitle(PortletKeys.KNOWLEDGE_BASE_ADMIN,user.getLocale());
    String curFromName=StringUtil.replace(fromName,new String[]{"[$CATEGORY_TITLE$]","[$PORTLET_NAME$]"},new String[]{categoryTitle,portletName});
    String curFromAddress=StringUtil.replace(fromAddress,new String[]{"[$CATEGORY_TITLE$]","[$PORTLET_NAME$]"},new String[]{categoryTitle,portletName});
    String articleAttachments=getEmailArticleAttachments(user,article);
    String articleVersion=LanguageUtil.format(user.getLocale(),"version-x",String.valueOf(article.getVersion()),false);
    String curSubject=StringUtil.replace(subject,new String[]{"[$ARTICLE_ATTACHMENTS$]","[$ARTICLE_URL$]","[$ARTICLE_VERSION$]","[$CATEGORY_TITLE$]","[$PORTLET_NAME$]","[$TO_ADDRESS$]","[$TO_NAME$]"},new String[]{articleAttachments,articleURL,articleVersion,categoryTitle,portletName,user.getEmailAddress(),user.getFullName()});
    String curBody=StringUtil.replace(body,new String[]{"[$ARTICLE_ATTACHMENTS$]","[$ARTICLE_URL$]","[$ARTICLE_VERSION$]","[$CATEGORY_TITLE$]","[$PORTLET_NAME$]","[$TO_ADDRESS$]","[$TO_NAME$]"},new String[]{articleAttachments,articleURL,articleVersion,categoryTitle,portletName,user.getEmailAddress(),user.getFullName()});
    try {
      InternetAddress from=new InternetAddress(curFromAddress,curFromName);
      InternetAddress to=new InternetAddress(user.getEmailAddress(),user.getFullName());
      InternetAddress replyTo=new InternetAddress(replyToAddress,replyToAddress);
      MailMessage message=new MailMessage(from,to,curSubject,curBody,htmlFormat);
      message.setReplyTo(new InternetAddress[]{replyTo});
      message.setMessageId(mailId);
      MailServiceUtil.sendEmail(message);
    }
 catch (    Exception e) {
      _log.error(e);
    }
  }
}
