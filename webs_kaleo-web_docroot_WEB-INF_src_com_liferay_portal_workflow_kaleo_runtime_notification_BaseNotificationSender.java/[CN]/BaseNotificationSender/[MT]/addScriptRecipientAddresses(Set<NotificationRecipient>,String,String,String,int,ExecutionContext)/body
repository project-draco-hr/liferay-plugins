{
  String[] recipientScriptRequiredContexts=StringUtil.split(recipientScriptRequiredContextsString);
  ClassLoader[] classLoaders=ClassLoaderUtil.getClassLoaders(recipientScriptRequiredContexts);
  if (NotificationConstants.RECIPIENT_SCRIPT_LANGUAGE.hasScriptingLanguage(recipientScriptingLanguage)) {
    Map<String,?> results=null;
    if (NotificationConstants.RECIPIENT_SCRIPT_LANGUAGE.DRL.equals(recipientScriptingLanguage)) {
      List<Fact<?>> facts=RulesContextBuilder.buildRulesContext(executionContext);
      RulesResourceRetriever rulesResourceRetriever=new RulesResourceRetriever(new StringResourceRetriever(recipientScript));
      Query query=Query.createStandardQuery();
      results=RulesEngineUtil.execute(rulesResourceRetriever,facts,query,classLoaders);
    }
 else {
      Map<String,Object> inputObjects=ScriptingContextBuilderUtil.buildScriptingContext(executionContext);
      results=ScriptingUtil.eval(null,inputObjects,_outputNames,recipientScriptingLanguage,recipientScript,classLoaders);
    }
    Map<String,Serializable> resultsWorkflowContext=(Map<String,Serializable>)results.get(WorkflowContextUtil.WORKFLOW_CONTEXT_NAME);
    WorkflowContextUtil.mergeWorkflowContexts(executionContext,resultsWorkflowContext);
    User user=(User)results.get(USER_RECIPIENT);
    if (user != null) {
      if (user.isActive()) {
        NotificationRecipient notificationRecipient=new NotificationRecipient(user,emailRecipientType);
        notificationRecipients.add(notificationRecipient);
      }
    }
 else {
      List<Role> roles=(List<Role>)results.get(ROLES_RECIPIENT);
      for (      Role role : roles) {
        addRoleRecipientAddresses(notificationRecipients,role.getRoleId(),role.getType(),emailRecipientType,executionContext);
      }
    }
  }
}
