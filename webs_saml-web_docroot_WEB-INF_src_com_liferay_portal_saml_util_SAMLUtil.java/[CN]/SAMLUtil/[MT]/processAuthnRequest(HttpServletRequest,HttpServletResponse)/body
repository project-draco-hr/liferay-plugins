{
  SSORequestContext ssoRequestContext=_decodeAuthnRequest(request);
  SAMLMessageContext<AuthnRequest,Response,NameID> context=new BasicSAMLMessageContext<AuthnRequest,Response,NameID>();
  context.setInboundMessageIssuer(ssoRequestContext.getRelyingPartyId());
  context.setInboundSAMLMessage(ssoRequestContext.getAuthnRequest());
  context.setRelayState(ssoRequestContext.getRelayState());
  AuthnRequest authnRequest=context.getInboundSAMLMessage();
  if (_log.isDebugEnabled()) {
    String xml;
    try {
      xml=OpenSAMLUtil.marshallSAMLObject(authnRequest);
    }
 catch (    MarshallingException me) {
      throw new PortalException(me);
    }
    _log.debug("Received AuthnRequest:\n" + xml);
  }
  long companyId=PortalUtil.getCompanyId(request);
  String spEntityId=context.getInboundMessageIssuer();
  String idpEntityId=SAMLMetadataUtil.getIdPEntityId(companyId);
  context.setOutboundMessageIssuer(idpEntityId);
  String acsURL=SAMLMetadataUtil.getAcsURL(companyId,spEntityId);
  Endpoint endpoint=OpenSAMLUtil.buildEndpoint(SAMLConstants.SAML2_POST_BINDING_URI,acsURL);
  context.setPeerEntityEndpoint(endpoint);
  Credential signingCredential=SAMLMetadataUtil.getSigningCredential(companyId,spEntityId);
  context.setOutboundSAMLMessageSigningCredential(signingCredential);
  User user=PortalUtil.getUser(request);
  String ssoSessionId=CookieUtil.get(request,WebKeys.SSOSESSIONID);
  boolean sessionExpired=false;
  if (Validator.isNotNull(ssoSessionId)) {
    sessionExpired=SessionManagerUtil.isExpired(ssoSessionId);
    if (sessionExpired) {
      Cookie ssoSessionCookie=new Cookie(WebKeys.SSOSESSIONID,ssoSessionId);
      ssoSessionCookie.setMaxAge(0);
      ssoSessionCookie.setPath(StringPool.SLASH);
      ssoSessionCookie.setSecure(request.isSecure());
      response.addCookie(ssoSessionCookie);
    }
  }
  if (sessionExpired || (authnRequest.isForceAuthn() && (user != null) && (ssoRequestContext.getStage() == SSORequestContext.STAGE_INITIAL))) {
    HttpSession session=request.getSession();
    session.invalidate();
    session=request.getSession(true);
    _sendToLogin(request,response,context);
    return;
  }
  if (authnRequest.isPassive() && (user == null)) {
    _handleFailure(request,response,context,StatusCode.NO_PASSIVE_URI);
    return;
  }
  if (user == null) {
    _sendToLogin(request,response,context);
    return;
  }
  Response samlResponse=_buildSuccessResponse(user,context);
  context.setOutboundSAMLMessage(samlResponse);
  if (Validator.isNull(ssoSessionId)) {
    ssoSessionId=OpenSAMLUtil.generateIdentifier();
  }
  ServiceContext serviceContext=ServiceContextFactory.getInstance(request);
  SessionManagerUtil.registerSession(ssoSessionId,spEntityId,serviceContext);
  Cookie ssoSessionCookie=new Cookie(WebKeys.SSOSESSIONID,ssoSessionId);
  ssoSessionCookie.setMaxAge(-1);
  ssoSessionCookie.setPath(StringPool.SLASH);
  ssoSessionCookie.setSecure(request.isSecure());
  response.addCookie(ssoSessionCookie);
  if (_log.isDebugEnabled()) {
    String xml;
    try {
      xml=OpenSAMLUtil.marshallSAMLObject(samlResponse);
    }
 catch (    MarshallingException me) {
      throw new PortalException(me);
    }
    _log.debug("Sending SAML Response:\n" + xml);
  }
  _sendResponse(request,response,context);
}
