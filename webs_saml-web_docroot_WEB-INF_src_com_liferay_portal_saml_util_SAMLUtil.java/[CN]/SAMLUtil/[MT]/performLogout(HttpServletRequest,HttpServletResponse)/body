{
  long companyId=PortalUtil.getCompanyId(request);
  User user=PortalUtil.getUser(request);
  String sessionId=CookieUtil.get(request,WebKeys.SSOSESSIONID);
  String entityId=SAMLMetadataUtil.getIdPEntityId(companyId);
  String statusCodeURI=StatusCode.SUCCESS_URI;
  if (Validator.isNotNull(sessionId)) {
    List<String> sps=SessionManagerUtil.getActiveSPs(sessionId);
    for (    String spEntityId : sps) {
      String id=OpenSAMLUtil.generateIdentifier();
      DateTime issueInstant=new DateTime();
      String sloURL=SAMLMetadataUtil.getSLOURL(companyId,spEntityId);
      if (Validator.isNull(sloURL)) {
        statusCodeURI=StatusCode.PARTIAL_LOGOUT_URI;
        continue;
      }
      Credential signingCredential=SAMLMetadataUtil.getSigningCredential(companyId,spEntityId);
      Issuer issuer=OpenSAMLUtil.buildIssuer(entityId);
      NameIDResolver nameIDResolver=NameIDResolverFactory.getNameIDResolver(companyId,spEntityId);
      NameID nameID=nameIDResolver.resolve(user);
      Endpoint endpoint=OpenSAMLUtil.buildEndpoint(SAMLConstants.SAML2_SOAP11_BINDING_URI,sloURL);
      LogoutRequest logoutRequest=OpenSAMLUtil.buildLogoutRequest();
      logoutRequest.setDestination(sloURL);
      logoutRequest.setID(id);
      logoutRequest.setIssueInstant(issueInstant);
      logoutRequest.setIssuer(issuer);
      logoutRequest.setNameID(nameID);
      try {
        OpenSAMLUtil.signObject(logoutRequest,signingCredential);
      }
 catch (      MarshallingException me) {
        throw new PortalException(me);
      }
catch (      SignatureException se) {
        throw new PortalException(se);
      }
catch (      SecurityException se) {
        throw new PortalException(se);
      }
      if (_log.isDebugEnabled()) {
        try {
          _log.debug("Sending LogoutRequest to " + sloURL + ":\n"+ OpenSAMLUtil.marshallSAMLObject(logoutRequest));
        }
 catch (        MarshallingException me) {
        }
      }
      PostMethod postMethod=new PostMethod(sloURL);
      SAMLMessageContext<LogoutResponse,LogoutRequest,NameID> context=new BasicSAMLMessageContext<LogoutResponse,LogoutRequest,NameID>();
      context.setOutboundSAMLMessage(logoutRequest);
      context.setPeerEntityEndpoint(endpoint);
      context.setOutboundMessageTransport(new HttpClientOutTransport(postMethod));
      context.setInboundMessageTransport(new HttpClientInTransport(postMethod,sloURL));
      HTTPSOAP11Encoder encoder=new HTTPSOAP11Encoder();
      HTTPSOAP11Decoder decoder=new HTTPSOAP11Decoder();
      try {
        encoder.encode(context);
        HttpClient httpClient=new HttpClient();
        httpClient.executeMethod(postMethod);
        decoder.decode(context);
      }
 catch (      MessageEncodingException e) {
        throw new PortalException(e);
      }
catch (      MessageDecodingException e) {
        throw new PortalException(e);
      }
catch (      SecurityException e) {
        throw new PortalException(e);
      }
catch (      HttpException e) {
        throw new PortalException(e);
      }
catch (      IOException e) {
        throw new PortalException(e);
      }
      LogoutResponse logoutResponse=context.getInboundSAMLMessage();
      Credential validationCredential=SAMLMetadataUtil.getValidationCredential(companyId,spEntityId);
      try {
        OpenSAMLUtil.validateSignature(logoutResponse,validationCredential);
      }
 catch (      ValidationException ve) {
        _log.warn("Signature verification failed.",ve);
      }
      Status responseStatus=logoutResponse.getStatus();
      StatusCode responseStatusCode=responseStatus.getStatusCode();
      String responseStatusURI=responseStatusCode.getValue();
      if (!StatusCode.SUCCESS_URI.equals(responseStatusURI)) {
        statusCodeURI=StatusCode.PARTIAL_LOGOUT_URI;
      }
    }
    if (Validator.isNotNull(sessionId)) {
      SessionManagerUtil.destroySession(sessionId);
      Cookie ssoSessionCookie=new Cookie(WebKeys.SSOSESSIONID,sessionId);
      ssoSessionCookie.setMaxAge(0);
      ssoSessionCookie.setPath(StringPool.SLASH);
      ssoSessionCookie.setSecure(request.isSecure());
      response.addCookie(ssoSessionCookie);
    }
  }
  return statusCodeURI;
}
