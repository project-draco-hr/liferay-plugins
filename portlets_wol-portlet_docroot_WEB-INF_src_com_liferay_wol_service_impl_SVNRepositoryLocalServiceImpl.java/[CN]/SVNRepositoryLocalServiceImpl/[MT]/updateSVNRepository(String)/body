{
  SVNRepository svnRepository=svnRepositoryPersistence.fetchByUrl(url);
  if (svnRepository == null) {
    long svnRepositoryId=CounterLocalServiceUtil.increment();
    svnRepository=svnRepositoryPersistence.create(svnRepositoryId);
    svnRepository.setUrl(url);
    svnRepositoryPersistence.update(svnRepository,false);
  }
  org.tmatesoft.svn.core.io.SVNRepository repository=null;
  try {
    SVNRepositoryFactoryImpl.setup();
    repository=SVNRepositoryFactory.create(SVNURL.parseURIEncoded(url));
    ISVNAuthenticationManager authenticationManager=SVNWCUtil.createDefaultAuthenticationManager(SVNConstants.SVN_AUTH_USERNAME,SVNConstants.SVN_AUTH_PASSWORD);
    repository.setAuthenticationManager(authenticationManager);
    if (svnRepository.getRevisionNumber() == repository.getLatestRevision()) {
      return;
    }
    long startRevision=svnRepository.getRevisionNumber() + 1;
    long endRevision=-1;
    Collection<SVNLogEntry> svnLogEntries=repository.log(null,null,startRevision,endRevision,false,true);
    Iterator<SVNLogEntry> itr=svnLogEntries.iterator();
    while (itr.hasNext()) {
      SVNLogEntry svnLogEntry=itr.next();
      svnRevisionLocalService.addSVNRevision(svnLogEntry.getAuthor(),svnLogEntry.getDate(),svnRepository.getSvnRepositoryId(),svnLogEntry.getRevision(),svnLogEntry.getMessage());
      if (!itr.hasNext()) {
        svnRepository.setRevisionNumber(svnLogEntry.getRevision());
        svnRepositoryPersistence.update(svnRepository,false);
      }
    }
  }
 catch (  SVNException svne) {
    _log.error(svne.getMessage());
  }
 finally {
    repository.closeSession();
  }
}
