{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals("com.liferay.tms.model.impl.ProjectEntryImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        ProjectEntryClp newModel=new ProjectEntryClp();
        Method method0=oldModelClass.getMethod("getProjectEntryId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setProjectEntryId(value0.longValue());
        Method method1=oldModelClass.getMethod("getGroupId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setGroupId(value1.longValue());
        Method method2=oldModelClass.getMethod("getCompanyId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value2.longValue());
        Method method3=oldModelClass.getMethod("getUserId");
        Long value3=(Long)method3.invoke(oldModel,(Object[])null);
        newModel.setUserId(value3.longValue());
        Method method4=oldModelClass.getMethod("getUserName");
        String value4=(String)method4.invoke(oldModel,(Object[])null);
        newModel.setUserName(value4);
        Method method5=oldModelClass.getMethod("getCreateDate");
        Date value5=(Date)method5.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value5);
        Method method6=oldModelClass.getMethod("getModifiedDate");
        Date value6=(Date)method6.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value6);
        Method method7=oldModelClass.getMethod("getTitle");
        String value7=(String)method7.invoke(oldModel,(Object[])null);
        newModel.setTitle(value7);
        Method method8=oldModelClass.getMethod("getDescription");
        String value8=(String)method8.invoke(oldModel,(Object[])null);
        newModel.setDescription(value8);
        Method method9=oldModelClass.getMethod("getFinishDate");
        Date value9=(Date)method9.invoke(oldModel,(Object[])null);
        newModel.setFinishDate(value9);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.tms.model.impl.ProjectMilestoneImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        ProjectMilestoneClp newModel=new ProjectMilestoneClp();
        Method method0=oldModelClass.getMethod("getProjectMilestoneId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setProjectMilestoneId(value0.longValue());
        Method method1=oldModelClass.getMethod("getCompanyId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value1.longValue());
        Method method2=oldModelClass.getMethod("getUserId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setUserId(value2.longValue());
        Method method3=oldModelClass.getMethod("getUserName");
        String value3=(String)method3.invoke(oldModel,(Object[])null);
        newModel.setUserName(value3);
        Method method4=oldModelClass.getMethod("getCreateDate");
        Date value4=(Date)method4.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value4);
        Method method5=oldModelClass.getMethod("getModifiedDate");
        Date value5=(Date)method5.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value5);
        Method method6=oldModelClass.getMethod("getTitle");
        String value6=(String)method6.invoke(oldModel,(Object[])null);
        newModel.setTitle(value6);
        Method method7=oldModelClass.getMethod("getDescription");
        String value7=(String)method7.invoke(oldModel,(Object[])null);
        newModel.setDescription(value7);
        Method method8=oldModelClass.getMethod("getProjectEntryId");
        Long value8=(Long)method8.invoke(oldModel,(Object[])null);
        newModel.setProjectEntryId(value8.longValue());
        Method method9=oldModelClass.getMethod("getDueDate");
        Date value9=(Date)method9.invoke(oldModel,(Object[])null);
        newModel.setDueDate(value9);
        Method method10=oldModelClass.getMethod("getFinishDate");
        Date value10=(Date)method10.invoke(oldModel,(Object[])null);
        newModel.setFinishDate(value10);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.tms.model.impl.TaskEntryImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        TaskEntryClp newModel=new TaskEntryClp();
        Method method0=oldModelClass.getMethod("getTaskEntryId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setTaskEntryId(value0.longValue());
        Method method1=oldModelClass.getMethod("getGroupId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setGroupId(value1.longValue());
        Method method2=oldModelClass.getMethod("getCompanyId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value2.longValue());
        Method method3=oldModelClass.getMethod("getUserId");
        Long value3=(Long)method3.invoke(oldModel,(Object[])null);
        newModel.setUserId(value3.longValue());
        Method method4=oldModelClass.getMethod("getUserName");
        String value4=(String)method4.invoke(oldModel,(Object[])null);
        newModel.setUserName(value4);
        Method method5=oldModelClass.getMethod("getCreateDate");
        Date value5=(Date)method5.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value5);
        Method method6=oldModelClass.getMethod("getModifiedDate");
        Date value6=(Date)method6.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value6);
        Method method7=oldModelClass.getMethod("getProjectEntryId");
        Long value7=(Long)method7.invoke(oldModel,(Object[])null);
        newModel.setProjectEntryId(value7.longValue());
        Method method8=oldModelClass.getMethod("getProjectMilestoneId");
        Long value8=(Long)method8.invoke(oldModel,(Object[])null);
        newModel.setProjectMilestoneId(value8.longValue());
        Method method9=oldModelClass.getMethod("getTitle");
        String value9=(String)method9.invoke(oldModel,(Object[])null);
        newModel.setTitle(value9);
        Method method10=oldModelClass.getMethod("getDescription");
        String value10=(String)method10.invoke(oldModel,(Object[])null);
        newModel.setDescription(value10);
        Method method11=oldModelClass.getMethod("getAssigneeUserId");
        Long value11=(Long)method11.invoke(oldModel,(Object[])null);
        newModel.setAssigneeUserId(value11.longValue());
        Method method12=oldModelClass.getMethod("getResolverUserId");
        Long value12=(Long)method12.invoke(oldModel,(Object[])null);
        newModel.setResolverUserId(value12.longValue());
        Method method13=oldModelClass.getMethod("getDueDate");
        Date value13=(Date)method13.invoke(oldModel,(Object[])null);
        newModel.setDueDate(value13);
        Method method14=oldModelClass.getMethod("getFinishDate");
        Date value14=(Date)method14.invoke(oldModel,(Object[])null);
        newModel.setFinishDate(value14);
        Method method15=oldModelClass.getMethod("getStatus");
        Integer value15=(Integer)method15.invoke(oldModel,(Object[])null);
        newModel.setStatus(value15.intValue());
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.tms.model.impl.TaskViewImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        TaskViewClp newModel=new TaskViewClp();
        Method method0=oldModelClass.getMethod("getTaskViewId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setTaskViewId(value0.longValue());
        Method method1=oldModelClass.getMethod("getGroupId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setGroupId(value1.longValue());
        Method method2=oldModelClass.getMethod("getCompanyId");
        String value2=(String)method2.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value2);
        Method method3=oldModelClass.getMethod("getUserId");
        String value3=(String)method3.invoke(oldModel,(Object[])null);
        newModel.setUserId(value3);
        Method method4=oldModelClass.getMethod("getUserName");
        String value4=(String)method4.invoke(oldModel,(Object[])null);
        newModel.setUserName(value4);
        Method method5=oldModelClass.getMethod("getCreateDate");
        Date value5=(Date)method5.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value5);
        Method method6=oldModelClass.getMethod("getModifiedDate");
        Date value6=(Date)method6.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value6);
        Method method7=oldModelClass.getMethod("getTitle");
        String value7=(String)method7.invoke(oldModel,(Object[])null);
        newModel.setTitle(value7);
        Method method8=oldModelClass.getMethod("getTags");
        String value8=(String)method8.invoke(oldModel,(Object[])null);
        newModel.setTags(value8);
        Method method9=oldModelClass.getMethod("getNotTags");
        String value9=(String)method9.invoke(oldModel,(Object[])null);
        newModel.setNotTags(value9);
        Method method10=oldModelClass.getMethod("getAssigneeUserId");
        Long value10=(Long)method10.invoke(oldModel,(Object[])null);
        newModel.setAssigneeUserId(value10.longValue());
        Method method11=oldModelClass.getMethod("getReporterUserId");
        Long value11=(Long)method11.invoke(oldModel,(Object[])null);
        newModel.setReporterUserId(value11.longValue());
        Method method12=oldModelClass.getMethod("getIncludeProjectTasks");
        Integer value12=(Integer)method12.invoke(oldModel,(Object[])null);
        newModel.setIncludeProjectTasks(value12.intValue());
        Method method13=oldModelClass.getMethod("getIsPrivate");
        Boolean value13=(Boolean)method13.invoke(oldModel,(Object[])null);
        newModel.setIsPrivate(value13.booleanValue());
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
