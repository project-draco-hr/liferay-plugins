{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals(ProjectEntryClp.class.getName())) {
    ProjectEntryClp oldCplModel=(ProjectEntryClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.tms.model.impl.ProjectEntryImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setProjectEntryId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getProjectEntryId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setGroupId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getGroupId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getCompanyId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value3=new Long(oldCplModel.getUserId());
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value4=oldCplModel.getUserName();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value5=oldCplModel.getCreateDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value6=oldCplModel.getModifiedDate();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setTitle",new Class[]{String.class});
        String value7=oldCplModel.getTitle();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setDescription",new Class[]{String.class});
        String value8=oldCplModel.getDescription();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setFinishDate",new Class[]{Date.class});
        Date value9=oldCplModel.getFinishDate();
        method9.invoke(newModel,value9);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(ProjectMilestoneClp.class.getName())) {
    ProjectMilestoneClp oldCplModel=(ProjectMilestoneClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.tms.model.impl.ProjectMilestoneImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setProjectMilestoneId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getProjectMilestoneId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setTitle",new Class[]{String.class});
        String value6=oldCplModel.getTitle();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setDescription",new Class[]{String.class});
        String value7=oldCplModel.getDescription();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setProjectEntryId",new Class[]{Long.TYPE});
        Long value8=new Long(oldCplModel.getProjectEntryId());
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setDueDate",new Class[]{Date.class});
        Date value9=oldCplModel.getDueDate();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setFinishDate",new Class[]{Date.class});
        Date value10=oldCplModel.getFinishDate();
        method10.invoke(newModel,value10);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(TaskEntryClp.class.getName())) {
    TaskEntryClp oldCplModel=(TaskEntryClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.tms.model.impl.TaskEntryImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setTaskEntryId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getTaskEntryId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setGroupId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getGroupId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getCompanyId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value3=new Long(oldCplModel.getUserId());
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value4=oldCplModel.getUserName();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value5=oldCplModel.getCreateDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value6=oldCplModel.getModifiedDate();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setProjectEntryId",new Class[]{Long.TYPE});
        Long value7=new Long(oldCplModel.getProjectEntryId());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setProjectMilestoneId",new Class[]{Long.TYPE});
        Long value8=new Long(oldCplModel.getProjectMilestoneId());
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setTitle",new Class[]{String.class});
        String value9=oldCplModel.getTitle();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setDescription",new Class[]{String.class});
        String value10=oldCplModel.getDescription();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setAssigneeUserId",new Class[]{Long.TYPE});
        Long value11=new Long(oldCplModel.getAssigneeUserId());
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setResolverUserId",new Class[]{Long.TYPE});
        Long value12=new Long(oldCplModel.getResolverUserId());
        method12.invoke(newModel,value12);
        Method method13=newModelClass.getMethod("setDueDate",new Class[]{Date.class});
        Date value13=oldCplModel.getDueDate();
        method13.invoke(newModel,value13);
        Method method14=newModelClass.getMethod("setFinishDate",new Class[]{Date.class});
        Date value14=oldCplModel.getFinishDate();
        method14.invoke(newModel,value14);
        Method method15=newModelClass.getMethod("setStatus",new Class[]{Integer.TYPE});
        Integer value15=new Integer(oldCplModel.getStatus());
        method15.invoke(newModel,value15);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(TaskViewClp.class.getName())) {
    TaskViewClp oldCplModel=(TaskViewClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.tms.model.impl.TaskViewImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setTaskViewId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getTaskViewId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setGroupId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getGroupId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setCompanyId",new Class[]{String.class});
        String value2=oldCplModel.getCompanyId();
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserId",new Class[]{String.class});
        String value3=oldCplModel.getUserId();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value4=oldCplModel.getUserName();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value5=oldCplModel.getCreateDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value6=oldCplModel.getModifiedDate();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setTitle",new Class[]{String.class});
        String value7=oldCplModel.getTitle();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setTags",new Class[]{String.class});
        String value8=oldCplModel.getTags();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setNotTags",new Class[]{String.class});
        String value9=oldCplModel.getNotTags();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setAssigneeUserId",new Class[]{Long.TYPE});
        Long value10=new Long(oldCplModel.getAssigneeUserId());
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setReporterUserId",new Class[]{Long.TYPE});
        Long value11=new Long(oldCplModel.getReporterUserId());
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setIncludeProjectTasks",new Class[]{Integer.TYPE});
        Integer value12=new Integer(oldCplModel.getIncludeProjectTasks());
        method12.invoke(newModel,value12);
        Method method13=newModelClass.getMethod("setIsPrivate",new Class[]{Boolean.TYPE});
        Boolean value13=new Boolean(oldCplModel.getIsPrivate());
        method13.invoke(newModel,value13);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
