{
  try {
    String[] hostnames=PortletProps.getArray("mongodb.hostnames");
    int port=GetterUtil.getInteger(PortletProps.get("mongodb.port"));
    String database=PortletProps.get("mongodb.database");
    String username=PortletProps.get("mongodb.username");
    String password=PortletProps.get("mongodb.password");
    MongoOptions options=new MongoOptions();
    options.autoConnectRetry=GetterUtil.getBoolean(PortletProps.get("mongodb.autoConnectRetry"),options.autoConnectRetry);
    options.connectionsPerHost=GetterUtil.getInteger(PortletProps.get("mongodb.connectionsPerHost"),options.connectionsPerHost);
    options.connectTimeout=GetterUtil.getInteger(PortletProps.get("mongodb.connectTimeout"),options.connectTimeout);
    options.maxWaitTime=GetterUtil.getInteger(PortletProps.get("mongodb.maxWaitTime"),options.maxWaitTime);
    options.socketTimeout=GetterUtil.getInteger(PortletProps.get("mongodb.socketTimeout"),options.socketTimeout);
    options.threadsAllowedToBlockForConnectionMultiplier=GetterUtil.getInteger(PortletProps.get("mongodb.threadsAllowedToBlockForConnectionMultiplier"),options.threadsAllowedToBlockForConnectionMultiplier);
    Mongo mongo=null;
    if (hostnames.length > 1) {
      List<ServerAddress> serverAddresses=new ArrayList<ServerAddress>();
      for (      String hostname : hostnames) {
        serverAddresses.add(new ServerAddress(hostname,port));
      }
      mongo=new Mongo(serverAddresses,options);
    }
 else {
      mongo=new Mongo(new ServerAddress(hostnames[0],port),options);
    }
    MongoDBUtil.init(mongo,database);
    for (    String id : ids) {
      try {
        doAuthenticate(GetterUtil.getLong(id),username,password);
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  }
 catch (  Exception e) {
    throw new ActionException(e);
  }
}
