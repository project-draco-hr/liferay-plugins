{
  long userId=portletDataContext.getUserId(calendarBooking.getUserUuid());
  long[] childCalendarIds=new long[0];
  long parentCalendarBookingId=0;
  if (!calendarBooking.isMasterBooking()) {
    Element calendarBookingElement=portletDataContext.getImportDataStagedModelElement(calendarBooking);
    Element parentCalendarBookingElement=portletDataContext.getReferenceDataElement(calendarBookingElement,CalendarBooking.class,0,calendarBooking.getParentCalendarBookingId());
    if (parentCalendarBookingElement != null) {
      StagedModelDataHandlerUtil.importStagedModel(portletDataContext,parentCalendarBookingElement);
      Map<Long,Long> calendarBookingIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(CalendarBooking.class);
      parentCalendarBookingId=MapUtil.getLong(calendarBookingIds,calendarBooking.getParentCalendarBookingId());
    }
 else {
      String parentCalendarBookingUuid=calendarBookingElement.attributeValue("parent-calendar-booking-uuid");
      boolean parentCalendarBookingInGlobalScope=GetterUtil.getBoolean(calendarBookingElement.attributeValue("parent-calendar-booking-in-global-scope"));
      long parentCalendarBookingGroupId;
      if (parentCalendarBookingInGlobalScope) {
        parentCalendarBookingGroupId=portletDataContext.getCompanyGroupId();
      }
 else {
        parentCalendarBookingGroupId=portletDataContext.getScopeGroupId();
      }
      CalendarBooking parentCalendarBooking=CalendarBookingLocalServiceUtil.fetchCalendarBookingByUuidAndGroupId(parentCalendarBookingUuid,parentCalendarBookingGroupId);
      if (parentCalendarBooking != null) {
        parentCalendarBookingId=parentCalendarBooking.getCalendarBookingId();
      }
    }
  }
  String calendarPath=ExportImportPathUtil.getModelPath(portletDataContext,Calendar.class.getName(),calendarBooking.getCalendarId());
  Calendar calendar=(Calendar)portletDataContext.getZipEntryAsObject(calendarPath);
  StagedModelDataHandlerUtil.importStagedModel(portletDataContext,calendar);
  Map<Long,Long> calendarIds=(Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(Calendar.class);
  long calendarId=MapUtil.getLong(calendarIds,calendarBooking.getCalendarId(),calendarBooking.getCalendarId());
  ServiceContext serviceContext=portletDataContext.createServiceContext(calendarBooking,CalendarPortletDataHandler.NAMESPACE);
  CalendarBooking importedCalendarBooking=null;
  if (portletDataContext.isDataStrategyMirror()) {
    CalendarBooking existingCalendarBooking=CalendarBookingLocalServiceUtil.fetchCalendarBookingByUuidAndGroupId(calendarBooking.getUuid(),portletDataContext.getScopeGroupId());
    if (existingCalendarBooking == null) {
      serviceContext.setUuid(calendarBooking.getUuid());
      importedCalendarBooking=CalendarBookingLocalServiceUtil.addCalendarBooking(userId,calendarId,childCalendarIds,parentCalendarBookingId,calendarBooking.getTitleMap(),calendarBooking.getDescriptionMap(),calendarBooking.getLocation(),calendarBooking.getStartTime(),calendarBooking.getEndTime(),calendarBooking.isAllDay(),calendarBooking.getRecurrence(),calendarBooking.getFirstReminder(),calendarBooking.getFirstReminderType(),calendarBooking.getSecondReminder(),calendarBooking.getSecondReminderType(),serviceContext);
    }
 else {
      importedCalendarBooking=CalendarBookingLocalServiceUtil.updateCalendarBooking(userId,existingCalendarBooking.getCalendarBookingId(),calendarId,calendarBooking.getTitleMap(),calendarBooking.getDescriptionMap(),calendarBooking.getLocation(),calendarBooking.getStartTime(),calendarBooking.getEndTime(),calendarBooking.isAllDay(),calendarBooking.getRecurrence(),calendarBooking.getFirstReminder(),calendarBooking.getFirstReminderType(),calendarBooking.getSecondReminder(),calendarBooking.getSecondReminderType(),calendarBooking.getStatus(),serviceContext);
    }
  }
 else {
    importedCalendarBooking=CalendarBookingLocalServiceUtil.addCalendarBooking(userId,calendarId,childCalendarIds,parentCalendarBookingId,calendarBooking.getTitleMap(),calendarBooking.getDescriptionMap(),calendarBooking.getLocation(),calendarBooking.getStartTime(),calendarBooking.getEndTime(),calendarBooking.isAllDay(),calendarBooking.getRecurrence(),calendarBooking.getFirstReminder(),calendarBooking.getFirstReminderType(),calendarBooking.getSecondReminder(),calendarBooking.getSecondReminderType(),serviceContext);
  }
  portletDataContext.importClassedModel(calendarBooking,importedCalendarBooking,CalendarPortletDataHandler.NAMESPACE);
}
