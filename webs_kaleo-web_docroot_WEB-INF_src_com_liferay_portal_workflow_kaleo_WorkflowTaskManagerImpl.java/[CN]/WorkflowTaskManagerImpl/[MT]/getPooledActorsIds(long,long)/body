{
  try {
    KaleoTaskInstanceToken kaleoTaskInstanceToken=KaleoTaskInstanceTokenLocalServiceUtil.getKaleoTaskInstanceToken(workflowTaskInstanceId);
    KaleoTask kaleoTask=kaleoTaskInstanceToken.getKaleoTask();
    List<KaleoTaskAssignment> kaleoTaskAssignments=new ArrayList<KaleoTaskAssignment>();
    List<KaleoTaskAssignment> kaleoTaskAssignmentsByRole=KaleoTaskAssignmentLocalServiceUtil.getKaleoTaskAssignments(kaleoTask.getKaleoTaskId(),Role.class.getName());
    kaleoTaskAssignments.addAll(kaleoTaskAssignmentsByRole);
    List<KaleoTaskAssignment> kaleoTaskAssignmentsByScript=KaleoTaskAssignmentLocalServiceUtil.getKaleoTaskAssignments(kaleoTask.getKaleoTaskId(),"SCRIPT");
    KaleoInstanceToken kaleoInstanceToken=kaleoTaskInstanceToken.getKaleoInstanceToken();
    Map<String,Serializable> workflowContext=WorkflowContextUtil.convert(kaleoInstanceToken.getKaleoInstance().getWorkflowContext());
    ServiceContext serviceContext=new ServiceContext();
    serviceContext.setCompanyId(companyId);
    for (    KaleoTaskAssignment kaleoTaskAssignmentByScript : kaleoTaskAssignmentsByScript) {
      String[] assigneeScriptRequiredContexts=StringUtil.split(kaleoTaskAssignmentByScript.getAssigneeScriptRequiredContexts());
      ClassLoader[] classLoaders=ClassLoaderUtil.getClassLoaders(assigneeScriptRequiredContexts);
      ExecutionContext executionContext=new ExecutionContext(kaleoInstanceToken,workflowContext,serviceContext);
      Collection<KaleoTaskAssignment> calculatedKaleoTaskAssignments=_taskAssignmentSelector.calculateTaskAssignments(kaleoTaskAssignmentByScript,executionContext,classLoaders);
      for (      KaleoTaskAssignment calculatedKaleoTaskAssignment : calculatedKaleoTaskAssignments) {
        if (Role.class.getName().equals(calculatedKaleoTaskAssignment.getAssigneeClassName())) {
          kaleoTaskAssignments.add(calculatedKaleoTaskAssignment);
        }
      }
    }
    Map<String,Long> pooledActors=new TreeMap<>(new NaturalOrderStringComparator());
    for (    KaleoTaskAssignment kaleoTaskAssignment : kaleoTaskAssignments) {
      Role role=RoleLocalServiceUtil.getRole(kaleoTaskAssignment.getAssigneeClassPK());
      if ((role.getType() == RoleConstants.TYPE_SITE) || (role.getType() == RoleConstants.TYPE_ORGANIZATION)) {
        List<UserGroupRole> userGroupRoles=UserGroupRoleLocalServiceUtil.getUserGroupRolesByGroupAndRole(kaleoTaskInstanceToken.getGroupId(),kaleoTaskAssignment.getAssigneeClassPK());
        for (        UserGroupRole userGroupRole : userGroupRoles) {
          User user=userGroupRole.getUser();
          pooledActors.put(user.getFullName(),user.getUserId());
        }
        List<UserGroupGroupRole> userGroupGroupRoles=UserGroupGroupRoleLocalServiceUtil.getUserGroupGroupRolesByGroupAndRole(kaleoTaskInstanceToken.getGroupId(),kaleoTaskAssignment.getAssigneeClassPK());
        for (        UserGroupGroupRole userGroupGroupRole : userGroupGroupRoles) {
          List<User> userGroupUsers=UserLocalServiceUtil.getUserGroupUsers(userGroupGroupRole.getUserGroupId());
          for (          User user : userGroupUsers) {
            pooledActors.put(user.getFullName(),user.getUserId());
          }
        }
      }
 else {
        List<User> inheritedRoleUsers=UserLocalServiceUtil.getInheritedRoleUsers(kaleoTaskAssignment.getAssigneeClassPK(),QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
        for (        User user : inheritedRoleUsers) {
          pooledActors.put(user.getFullName(),user.getUserId());
        }
      }
    }
    return ArrayUtil.toLongArray(pooledActors.values());
  }
 catch (  Exception e) {
    throw new WorkflowException(e);
  }
}
