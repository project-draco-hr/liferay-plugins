{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals("com.liferay.ams.model.impl.AssetCheckoutImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        AssetCheckoutClp newModel=new AssetCheckoutClp();
        Method method0=oldModelClass.getMethod("getAssetCheckoutId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setAssetCheckoutId(value0.longValue());
        Method method1=oldModelClass.getMethod("getCompanyId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value1.longValue());
        Method method2=oldModelClass.getMethod("getUserId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setUserId(value2.longValue());
        Method method3=oldModelClass.getMethod("getUserName");
        String value3=(String)method3.invoke(oldModel,(Object[])null);
        newModel.setUserName(value3);
        Method method4=oldModelClass.getMethod("getCreateDate");
        Date value4=(Date)method4.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value4);
        Method method5=oldModelClass.getMethod("getModifiedDate");
        Date value5=(Date)method5.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value5);
        Method method6=oldModelClass.getMethod("getAssetEntryId");
        Long value6=(Long)method6.invoke(oldModel,(Object[])null);
        newModel.setAssetEntryId(value6.longValue());
        Method method7=oldModelClass.getMethod("getCheckOutDate");
        Date value7=(Date)method7.invoke(oldModel,(Object[])null);
        newModel.setCheckOutDate(value7);
        Method method8=oldModelClass.getMethod("getExpectedCheckInDate");
        Date value8=(Date)method8.invoke(oldModel,(Object[])null);
        newModel.setExpectedCheckInDate(value8);
        Method method9=oldModelClass.getMethod("getActualCheckInDate");
        Date value9=(Date)method9.invoke(oldModel,(Object[])null);
        newModel.setActualCheckInDate(value9);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.ams.model.impl.AssetDefinitionImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        AssetDefinitionClp newModel=new AssetDefinitionClp();
        Method method0=oldModelClass.getMethod("getAssetDefinitionId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setAssetDefinitionId(value0.longValue());
        Method method1=oldModelClass.getMethod("getGroupId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setGroupId(value1.longValue());
        Method method2=oldModelClass.getMethod("getCompanyId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value2.longValue());
        Method method3=oldModelClass.getMethod("getUserId");
        Long value3=(Long)method3.invoke(oldModel,(Object[])null);
        newModel.setUserId(value3.longValue());
        Method method4=oldModelClass.getMethod("getUserName");
        String value4=(String)method4.invoke(oldModel,(Object[])null);
        newModel.setUserName(value4);
        Method method5=oldModelClass.getMethod("getCreateDate");
        Date value5=(Date)method5.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value5);
        Method method6=oldModelClass.getMethod("getModifiedDate");
        Date value6=(Date)method6.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value6);
        Method method7=oldModelClass.getMethod("getAssetTypeId");
        Long value7=(Long)method7.invoke(oldModel,(Object[])null);
        newModel.setAssetTypeId(value7.longValue());
        Method method8=oldModelClass.getMethod("getManufacturer");
        String value8=(String)method8.invoke(oldModel,(Object[])null);
        newModel.setManufacturer(value8);
        Method method9=oldModelClass.getMethod("getModel");
        String value9=(String)method9.invoke(oldModel,(Object[])null);
        newModel.setModel(value9);
        Method method10=oldModelClass.getMethod("getOrderDate");
        Date value10=(Date)method10.invoke(oldModel,(Object[])null);
        newModel.setOrderDate(value10);
        Method method11=oldModelClass.getMethod("getQuantity");
        Integer value11=(Integer)method11.invoke(oldModel,(Object[])null);
        newModel.setQuantity(value11.intValue());
        Method method12=oldModelClass.getMethod("getPrice");
        Double value12=(Double)method12.invoke(oldModel,(Object[])null);
        newModel.setPrice(value12.doubleValue());
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.ams.model.impl.AssetEntryImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        AssetEntryClp newModel=new AssetEntryClp();
        Method method0=oldModelClass.getMethod("getAssetEntryId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setAssetEntryId(value0.longValue());
        Method method1=oldModelClass.getMethod("getCompanyId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value1.longValue());
        Method method2=oldModelClass.getMethod("getUserId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setUserId(value2.longValue());
        Method method3=oldModelClass.getMethod("getUserName");
        String value3=(String)method3.invoke(oldModel,(Object[])null);
        newModel.setUserName(value3);
        Method method4=oldModelClass.getMethod("getCreateDate");
        Date value4=(Date)method4.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value4);
        Method method5=oldModelClass.getMethod("getModifiedDate");
        Date value5=(Date)method5.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value5);
        Method method6=oldModelClass.getMethod("getAssetDefinitionId");
        Long value6=(Long)method6.invoke(oldModel,(Object[])null);
        newModel.setAssetDefinitionId(value6.longValue());
        Method method7=oldModelClass.getMethod("getSerialNumber");
        String value7=(String)method7.invoke(oldModel,(Object[])null);
        newModel.setSerialNumber(value7);
        Method method8=oldModelClass.getMethod("getInactiveDate");
        Date value8=(Date)method8.invoke(oldModel,(Object[])null);
        newModel.setInactiveDate(value8);
        Method method9=oldModelClass.getMethod("getActive");
        Boolean value9=(Boolean)method9.invoke(oldModel,(Object[])null);
        newModel.setActive(value9.booleanValue());
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.ams.model.impl.AssetTypeImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        AssetTypeClp newModel=new AssetTypeClp();
        Method method0=oldModelClass.getMethod("getAssetTypeId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setAssetTypeId(value0.longValue());
        Method method1=oldModelClass.getMethod("getGroupId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setGroupId(value1.longValue());
        Method method2=oldModelClass.getMethod("getName");
        String value2=(String)method2.invoke(oldModel,(Object[])null);
        newModel.setName(value2);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
