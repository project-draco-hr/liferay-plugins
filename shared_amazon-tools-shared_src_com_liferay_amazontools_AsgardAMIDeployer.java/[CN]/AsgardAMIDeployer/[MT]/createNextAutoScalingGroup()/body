{
  System.out.println("Creating Auto Scaling Group");
  String availabilityZone=properties.getProperty("availability.zone");
  String createNextGroupUrl="/" + availabilityZone + "/cluster/createNextGroup";
  Map<String,String> parameters=new HashMap<String,String>();
  String imageId=getImageId(_imageName);
  parameters.put("checkHealth","true");
  parameters.put("imageId",imageId);
  parameters.put("trafficAllowed","true");
  String clusterName=properties.getProperty("asgard.cluster.name");
  parameters.put("name",clusterName);
  _jsonWebServiceClient.doPost(createNextGroupUrl,parameters);
  sleep(20);
  String showClusterUrl="/" + availabilityZone + "/cluster/show/"+ clusterName+ ".json";
  String autoScalingGroupName=null;
  int attempts=1;
  boolean created=false;
  while (attempts++ < 7) {
    String result=_jsonWebServiceClient.doGet(showClusterUrl,Collections.<String,String>emptyMap());
    JSONArray autoScalingGroups=new org.json.JSONArray(result);
    JSONObject autoScalingGroup=autoScalingGroups.getJSONObject(autoScalingGroups.length() - 1);
    autoScalingGroupName=autoScalingGroup.getString("autoScalingGroupName");
    JSONArray instances=autoScalingGroup.getJSONArray("instances");
    boolean inService=true;
    for (int i=0; i < instances.length(); i++) {
      JSONObject instance=instances.getJSONObject(i);
      String lifecycleState=instance.getString("lifecycleState");
      if (!lifecycleState.equals("InService")) {
        inService=false;
        break;
      }
    }
    if (!inService) {
      sleep(15);
    }
 else {
      created=true;
      break;
    }
  }
  if (!created) {
    System.out.println("Unable to create Auto Scaling Group " + autoScalingGroupName);
    return null;
  }
  sleep(10);
  System.out.println("Created Auto Scaling Group " + autoScalingGroupName);
  return autoScalingGroupName;
}
