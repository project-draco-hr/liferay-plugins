{
  System.out.println("Checking Auto Scaling Group " + autoScalingGroupName);
  String asgardClusterName=properties.getProperty("asgard.cluster.name");
  String availabilityZone=properties.getProperty("availability.zone");
  boolean deployed=false;
  for (int i=1; i < 30; i++) {
    String json=_jsonWebServiceClient.doGet("/" + availabilityZone + "/loadBalancer/show/"+ asgardClusterName+ ".json",Collections.<String,String>emptyMap());
    JSONObject loadBalancerJSONObject=new JSONObject(json);
    if (!isInService(loadBalancerJSONObject,autoScalingGroupName)) {
      sleep(30);
    }
 else {
      deployed=true;
      break;
    }
  }
  if (!deployed) {
    Map<String,String> parameters=new HashMap<String,String>();
    parameters.put("name",autoScalingGroupName);
    _jsonWebServiceClient.doPost("/" + availabilityZone + "/cluster/delete",parameters);
    throw new RuntimeException("Unable to deploy Auto Scaling Group " + autoScalingGroupName);
  }
  String json=_jsonWebServiceClient.doGet("/" + availabilityZone + "/cluster/list.json",Collections.<String,String>emptyMap());
  JSONArray clustersJSONArray=new JSONArray(json);
  for (int i=0; i < clustersJSONArray.length(); i++) {
    JSONObject clusterJSONObject=clustersJSONArray.getJSONObject(i);
    String curAsgardClusterName=clusterJSONObject.getString("cluster");
    if (!asgardClusterName.equals(curAsgardClusterName)) {
      continue;
    }
    JSONArray autoScalingGroupsJSONArray=clusterJSONObject.getJSONArray("autoScalingGroups");
    for (int j=0; j < autoScalingGroupsJSONArray.length(); j++) {
      String curAutoScalingGroupName=autoScalingGroupsJSONArray.getString(j);
      if (autoScalingGroupName.equals(curAutoScalingGroupName)) {
        continue;
      }
      Map<String,String> parameters=new HashMap<String,String>();
      parameters.put("name",curAutoScalingGroupName);
      _jsonWebServiceClient.doPost("/" + availabilityZone + "/cluster/deactivate",parameters);
    }
  }
  System.out.println("Deployed Auto Scaling Group " + autoScalingGroupName);
  Desktop desktop=Desktop.getDesktop();
  String asgardClusterURL="http://" + properties.getProperty("asgard.host.name") + ":"+ properties.getProperty("asgard.host.port")+ "/"+ availabilityZone+ "/cluster/show/"+ asgardClusterName;
  desktop.browse(URI.create(asgardClusterURL));
}
