{
  System.out.println("Checking deployment of Auto Scaling Group " + autoScalingGroupName + ".");
  String availabilityZone=properties.getProperty("availability.zone");
  String clusterName=properties.getProperty("asgard.cluster.name");
  String showLoadBalancerUrl="/" + availabilityZone + "/loadBalancer/show/"+ clusterName+ ".json";
  int attempts=1;
  boolean deployed=false;
  while (attempts++ < 20) {
    String result=_jsonWebServiceClient.doGet(showLoadBalancerUrl,Collections.<String,String>emptyMap());
    JSONObject loadBalancer=new org.json.JSONObject(result);
    JSONArray instanceStates=loadBalancer.getJSONArray("instanceStates");
    boolean inService=true;
    for (int i=0; i < instanceStates.length(); i++) {
      JSONObject instanceState=instanceStates.getJSONObject(i);
      String curAutoScalingGroupName=instanceState.getString("autoScalingGroupName");
      if (!curAutoScalingGroupName.equals(autoScalingGroupName)) {
        continue;
      }
      String state=instanceState.getString("state");
      if (!state.equals("InService")) {
        inService=false;
        break;
      }
    }
    if (!inService) {
      sleep(30);
    }
 else {
      deployed=true;
      break;
    }
  }
  if (!deployed) {
    String deleteAutoScalingGroupUrl="/" + availabilityZone + "/cluster/delete";
    Map<String,String> parameters=new HashMap<String,String>();
    parameters.put("name",autoScalingGroupName);
    _jsonWebServiceClient.doPost(deleteAutoScalingGroupUrl,parameters);
    System.out.println("Unable to deploy Auto Scaling Group " + autoScalingGroupName);
    return;
  }
  String clusterListUrl="/" + availabilityZone + "/cluster/list.json";
  String result=_jsonWebServiceClient.doGet(clusterListUrl,Collections.<String,String>emptyMap());
  JSONArray clusters=new org.json.JSONArray(result);
  for (int i=0; i < clusters.length(); i++) {
    JSONObject cluster=clusters.getJSONObject(i);
    String curClusterName=cluster.getString("cluster");
    if (!curClusterName.equals(clusterName)) {
      continue;
    }
    JSONArray autoScalingGroups=cluster.getJSONArray("autoScalingGroups");
    for (int j=0; j < autoScalingGroups.length(); j++) {
      String curAutoScalingGroupName=autoScalingGroups.getString(j);
      if (curAutoScalingGroupName.equals(autoScalingGroupName)) {
        continue;
      }
      String deactivateAutoScalingGroupUrl="/" + availabilityZone + "/cluster/deactivate";
      Map<String,String> parameters=new HashMap<String,String>();
      parameters.put("name",curAutoScalingGroupName);
      _jsonWebServiceClient.doPost(deactivateAutoScalingGroupUrl,parameters);
    }
  }
  System.out.println("Deployed Auto Scaling Group " + autoScalingGroupName);
  String asgardClusterUrl="http://" + properties.getProperty("asgard.host.name") + ":"+ properties.getProperty("asgard.host.port")+ "/"+ availabilityZone+ "/cluster/show/"+ clusterName;
  Desktop.getDesktop().browse(URI.create(asgardClusterUrl));
}
