{
  String asgardClusterName=properties.getProperty("asgard.cluster.name");
  String availabilityZone=properties.getProperty("availability.zone");
  boolean deployed=false;
  JSONObject loadBalancerJSONObject=null;
  int i=1;
  while (true) {
    String json=_jsonWebServiceClient.doGet("/" + availabilityZone + "/loadBalancer/show/"+ asgardClusterName+ ".json",Collections.<String,String>emptyMap());
    loadBalancerJSONObject=new JSONObject(json);
    List<JSONObject> instanceStateJSONObjects=getInstanceStateJSONObjects(loadBalancerJSONObject,autoScalingGroupName);
    if (size != -1) {
      if (instanceStateJSONObjects.size() < size) {
        System.out.println("Not enough instances started. Waiting " + i + "...");
        sleep(15);
        continue;
      }
    }
    if (!isInService(loadBalancerJSONObject,autoScalingGroupName)) {
      System.out.println("Instances not in service. Waiting " + i + "...");
      sleep(15);
    }
 else {
      deployed=true;
      break;
    }
    i++;
  }
  if (!deployed) {
    Map<String,String> parameters=new HashMap<>();
    parameters.put("name",autoScalingGroupName);
    _jsonWebServiceClient.doPost("/" + availabilityZone + "/cluster/delete",parameters);
    throw new RuntimeException("Unable to deploy Auto Scaling Group " + autoScalingGroupName);
  }
  List<String> instanceIds=new ArrayList<>();
  List<JSONObject> instanceStateJSONObjects=getInstanceStateJSONObjects(loadBalancerJSONObject,autoScalingGroupName);
  for (i=0; i < instanceStateJSONObjects.size(); i++) {
    JSONObject instanceStateJSONObject=instanceStateJSONObjects.get(i);
    String instanceId=instanceStateJSONObject.getString("instanceId");
    instanceIds.add(instanceId);
  }
  return instanceIds;
}
