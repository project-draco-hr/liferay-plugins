{
  long calendarResourceId=counterLocalService.increment();
  if (Validator.isNull(className)) {
    className=CalendarResource.class.getName();
    classPK=calendarResourceId;
  }
  long globalUserId=0;
  if (CalendarResourceUtil.isGlobalResource(className)) {
    globalUserId=CalendarResourceUtil.getGlobalResourceUserId(className,classPK);
  }
  if (globalUserId > 0) {
    userId=globalUserId;
  }
  User user=userPersistence.findByPrimaryKey(userId);
  long classNameId=PortalUtil.getClassNameId(className);
  Date now=new Date();
  validate(classNameId,classPK);
  CalendarResource calendarResource=calendarResourcePersistence.create(calendarResourceId);
  calendarResource.setUuid(serviceContext.getUuid());
  calendarResource.setGroupId(groupId);
  calendarResource.setCompanyId(user.getCompanyId());
  calendarResource.setUserId(user.getUserId());
  calendarResource.setUserName(user.getFullName());
  calendarResource.setCreateDate(serviceContext.getCreateDate(now));
  calendarResource.setModifiedDate(serviceContext.getModifiedDate(now));
  calendarResource.setClassNameId(classNameId);
  if (className.equals(CalendarResource.class.getName())) {
    calendarResource.setClassPK(calendarResourceId);
  }
 else {
    calendarResource.setClassPK(classPK);
  }
  calendarResource.setClassUuid(classUuid);
  calendarResource.setDefaultCalendarId(defaultCalendarId);
  calendarResource.setCode(code);
  calendarResource.setNameMap(nameMap);
  calendarResource.setDescriptionMap(descriptionMap);
  calendarResource.setType(type);
  calendarResource.setActive(active);
  calendarResourcePersistence.update(calendarResource,false);
  resourceLocalService.addModelResources(calendarResource,serviceContext);
  return calendarResource;
}
