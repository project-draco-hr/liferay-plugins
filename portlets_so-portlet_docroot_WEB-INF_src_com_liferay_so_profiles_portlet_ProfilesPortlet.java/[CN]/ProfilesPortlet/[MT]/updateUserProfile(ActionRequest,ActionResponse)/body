{
  ThemeDisplay themeDisplay=(ThemeDisplay)actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
  long userId=ParamUtil.getLong(actionRequest,"userId");
  User user=UserLocalServiceUtil.getUser(userId);
  Contact contact=user.getContact();
  String oldPassword=getUpdateUserPassword(actionRequest,user.getUserId());
  String newPassword1=StringPool.BLANK;
  String newPassword2=StringPool.BLANK;
  boolean passwordReset=false;
  String reminderQueryQuestion=user.getReminderQueryQuestion();
  String reminderQueryAnswer=user.getReminderQueryAnswer();
  String screenName=user.getScreenName();
  String emailAddress=ParamUtil.getString(actionRequest,"emailAddress");
  String openId=user.getOpenId();
  String languageId=user.getLanguageId();
  String timeZoneId=user.getTimeZoneId();
  String greeting=user.getGreeting();
  String comments=ParamUtil.getString(actionRequest,"comments");
  String firstName=ParamUtil.getString(actionRequest,"firstName");
  String middleName=ParamUtil.getString(actionRequest,"middleName");
  String lastName=ParamUtil.getString(actionRequest,"lastName");
  int prefixId=contact.getPrefixId();
  int suffixId=contact.getSuffixId();
  boolean male=user.isMale();
  int birthdayMonth=1;
  int birthdayDay=1;
  int birthdayYear=1970;
  String smsSn=contact.getSmsSn();
  String aimSn=ParamUtil.getString(actionRequest,"aimSn");
  String facebookSn=ParamUtil.getString(actionRequest,"facebookSn");
  String icqSn=ParamUtil.getString(actionRequest,"icqSn");
  String jabberSn=ParamUtil.getString(actionRequest,"jabberSn");
  String msnSn=ParamUtil.getString(actionRequest,"msnSn");
  String mySpaceSn=ParamUtil.getString(actionRequest,"mySpaceSn");
  String skypeSn=ParamUtil.getString(actionRequest,"skypeSn");
  String twitterSn=ParamUtil.getString(actionRequest,"twitterSn");
  String ymSn=ParamUtil.getString(actionRequest,"ymSn");
  String jobTitle=ParamUtil.getString(actionRequest,"jobTitle");
  long[] groupIds=null;
  long[] organizationIds=null;
  long[] roleIds=null;
  List<UserGroupRole> userGroupRoles=null;
  long[] userGroupIds=null;
  List<Address> addresses=(List<Address>)PortalClassInvoker.invoke(_CLASS_NAME_ENTERPRISE_ADMIN_UTIL,"getAddresses",actionRequest);
  List<EmailAddress> emailAddresses=(List<EmailAddress>)PortalClassInvoker.invoke(_CLASS_NAME_ENTERPRISE_ADMIN_UTIL,"getEmailAddresses",actionRequest);
  List<Phone> phones=(List<Phone>)PortalClassInvoker.invoke(_CLASS_NAME_ENTERPRISE_ADMIN_UTIL,"getPhones",actionRequest);
  List<Website> websites=(List<Website>)PortalClassInvoker.invoke(_CLASS_NAME_ENTERPRISE_ADMIN_UTIL,"getWebsites",actionRequest);
  List<AnnouncementsDelivery> announcementsDeliveries=new ArrayList<AnnouncementsDelivery>();
  ServiceContext serviceContext=ServiceContextFactory.getInstance(User.class.getName(),actionRequest);
  try {
    UserServiceUtil.updateUser(userId,oldPassword,newPassword1,newPassword2,passwordReset,reminderQueryQuestion,reminderQueryAnswer,screenName,emailAddress,openId,languageId,timeZoneId,greeting,comments,firstName,middleName,lastName,prefixId,suffixId,male,birthdayMonth,birthdayDay,birthdayYear,smsSn,aimSn,facebookSn,icqSn,jabberSn,msnSn,mySpaceSn,skypeSn,twitterSn,ymSn,jobTitle,groupIds,organizationIds,roleIds,userGroupRoles,userGroupIds,addresses,emailAddresses,phones,websites,announcementsDeliveries,serviceContext);
  }
 catch (  Exception e) {
    if (e instanceof AddressCityException || e instanceof AddressStreetException || e instanceof AddressZipException|| e instanceof ContactFirstNameException|| e instanceof ContactLastNameException|| e instanceof DuplicateUserEmailAddressException|| e instanceof EmailAddressException|| e instanceof NoSuchCountryException|| e instanceof NoSuchListTypeException|| e instanceof NoSuchRegionException|| e instanceof PhoneNumberException|| e instanceof RequiredUserException|| e instanceof ReservedUserEmailAddressException|| e instanceof UserEmailAddressException|| e instanceof UserIdException|| e instanceof WebsiteURLException) {
      if (e instanceof NoSuchListTypeException) {
        NoSuchListTypeException nslte=(NoSuchListTypeException)e;
        SessionErrors.add(actionRequest,e.getClass().getName() + nslte.getType());
      }
 else {
        SessionErrors.add(actionRequest,e.getClass().getName(),e);
      }
      if (e instanceof RequiredUserException) {
        actionResponse.sendRedirect(ParamUtil.getString(actionRequest,"redirect"));
      }
    }
 else {
      throw e;
    }
    actionResponse.sendRedirect(ParamUtil.getString(actionRequest,"currentURL"));
  }
}
