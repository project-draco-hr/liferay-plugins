{
  List<BusinessProcessInstanceVO> instances=new ArrayList<BusinessProcessInstanceVO>();
  Workflow workflow=null;
  OutputVO outputVO=null;
  ClassLoader contextClassLoader=_getCurrentClassLoader();
  _setAggregateClassLoader(contextClassLoader);
  try {
    workflow=_getWorkflowImpl();
  }
 catch (  WorkflowException e) {
    throw new WorkflowComponentException(e);
  }
  if (definitionId > 0) {
    BusinessProcessVO businessProcessVO=new BusinessProcessVO();
    businessProcessVO.setId(String.valueOf(definitionId));
    try {
      outputVO=workflow.getBusinessProcess(businessProcessVO);
    }
 catch (    WorkflowException e1) {
      throw new WorkflowComponentException(e1);
    }
    List<BusinessProcessVO> bpVOList=outputVO.getBusinessProcessVOList();
    businessProcessVO=(BusinessProcessVO)bpVOList.get(0);
    BusinessProcessInstanceVO instVO=new BusinessProcessInstanceVO();
    instVO.setBusinessProcess(businessProcessVO);
    try {
      outputVO=workflow.getBusinessProcessInstances(instVO);
    }
 catch (    WorkflowException e) {
      throw new WorkflowComponentException(e);
    }
    instances=outputVO.getBusinessProcessInstanceVOList();
  }
 else   if (instanceId > 0) {
    BusinessProcessInstanceVO instVO=new BusinessProcessInstanceVO();
    instVO.setId(String.valueOf(instanceId));
    try {
      outputVO=workflow.getBusinessProcessInstances(instVO);
    }
 catch (    WorkflowException e) {
      throw new WorkflowComponentException(e);
    }
    instances=outputVO.getBusinessProcessInstanceVOList();
  }
 else {
    String assignedUserId=null;
    if (retrieveUserInstances) {
      assignedUserId=userId;
    }
    Class[] paramTypeArray=new Class[]{String.class,String.class,String.class,String.class,String.class,String.class,boolean.class,String.class,boolean.class,int.class,int.class};
    Object[] paramValueArray=new Object[]{definitionName,definitionVersion,startDateGT,startDateLT,endDateGT,endDateLT,hideEndedTasks,assignedUserId,andOperator,start,end};
    Class tmpClass=_loadSAWJbpmGraphSession();
    String timeZoneId=_getTimeZoneIdForUser(userId);
    Map resultsMap=_invokeMethod(tmpClass,"findProcessInstancesBySearchTerms",userId,timeZoneId,paramTypeArray,paramValueArray,workflow);
    instances=(ArrayList<BusinessProcessInstanceVO>)resultsMap.get("invokeMethodResult");
  }
  Document doc=DocumentHelper.createDocument();
  Element root=doc.addElement("result");
  for (int i=0; i < instances.size(); i++) {
    BusinessProcessInstanceVO instance=(BusinessProcessInstanceVO)instances.get(i);
    _createElement(instance,root,true,userId);
  }
  _restoreClassLoader(contextClassLoader);
  return doc.asXML();
}
