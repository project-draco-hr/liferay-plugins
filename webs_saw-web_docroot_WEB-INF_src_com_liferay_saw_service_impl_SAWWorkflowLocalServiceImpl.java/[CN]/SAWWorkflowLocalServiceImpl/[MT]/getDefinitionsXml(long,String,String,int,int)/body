{
  Workflow workflow=null;
  ClassLoader contextClassLoader=null;
  contextClassLoader=_getCurrentClassLoader();
  _setAggregateClassLoader(contextClassLoader);
  try {
    workflow=_getWorkflowImpl();
  }
 catch (  WorkflowException e) {
    throw new WorkflowComponentException(e);
  }
  BusinessProcessVO businessProcessVO=new BusinessProcessVO();
  List<BusinessProcessVO> bpVOList=null;
  if (definitionId > 0) {
    businessProcessVO.setId(String.valueOf(definitionId));
    OutputVO outputVO=null;
    try {
      outputVO=workflow.getBusinessProcess(businessProcessVO);
    }
 catch (    WorkflowException e) {
      throw new WorkflowComponentException(e);
    }
    bpVOList=outputVO.getBusinessProcessVOList();
  }
 else {
    Class tmpClass=_loadSAWJbpmGraphSession();
    String timeZoneId=_getTimeZoneIdForUser(userId);
    Map resultsMap=_invokeMethod(tmpClass,"findProcessDefinitionsByName",userId,timeZoneId,new Class[]{String.class,int.class,int.class},new Object[]{name,begin,end},workflow);
    bpVOList=(ArrayList<BusinessProcessVO>)resultsMap.get("invokeMethodResult");
  }
  _restoreClassLoader(contextClassLoader);
  Document doc=DocumentHelper.createDocument();
  Element root=doc.addElement("result");
  for (int i=0; i < bpVOList.size(); i++) {
    BusinessProcessVO bpVO=(BusinessProcessVO)bpVOList.get(i);
    _createElement(bpVO,root);
  }
  return doc.asXML();
}
