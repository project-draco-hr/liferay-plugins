{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals(SPSessionClp.class.getName())) {
    SPSessionClp oldCplModel=(SPSessionClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.saml.model.impl.SPSessionImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setSpSessionId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getSpSessionId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value3=oldCplModel.getCreateDate();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setSsoSessionId",new Class[]{Long.TYPE});
        Long value4=new Long(oldCplModel.getSsoSessionId());
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setIssuer",new Class[]{String.class});
        String value5=oldCplModel.getIssuer();
        method5.invoke(newModel,value5);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(SSOSessionClp.class.getName())) {
    SSOSessionClp oldCplModel=(SSOSessionClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.saml.model.impl.SSOSessionImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setSsoSessionId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getSsoSessionId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value3=oldCplModel.getCreateDate();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setLastActiveDate",new Class[]{Date.class});
        Date value4=oldCplModel.getLastActiveDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setKey",new Class[]{String.class});
        String value5=oldCplModel.getKey();
        method5.invoke(newModel,value5);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
