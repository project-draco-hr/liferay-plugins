{
  User user=userPersistence.findByPrimaryKey(userId);
  long groupId=serviceContext.getScopeGroupId();
  Date expirationDate=null;
  if (!neverExpire) {
    expirationDate=PortalUtil.getDate(expirationDateMonth,expirationDateDay,expirationDateYear,expirationDateHour,expirationDateMinute,user.getTimeZone(),PollsQuestionExpirationDateException.class);
  }
  Date now=new Date();
  validate(titleMap,descriptionMap,pollsChoices);
  long pollsQuestionId=counterLocalService.increment();
  PollsQuestion pollsQuestion=pollsQuestionPersistence.create(pollsQuestionId);
  pollsQuestion.setUuid(serviceContext.getUuid());
  pollsQuestion.setGroupId(groupId);
  pollsQuestion.setCompanyId(user.getCompanyId());
  pollsQuestion.setUserId(user.getUserId());
  pollsQuestion.setUserName(user.getFullName());
  pollsQuestion.setCreateDate(serviceContext.getCreateDate(now));
  pollsQuestion.setModifiedDate(serviceContext.getModifiedDate(now));
  pollsQuestion.setTitleMap(titleMap);
  pollsQuestion.setDescriptionMap(descriptionMap);
  pollsQuestion.setExpirationDate(expirationDate);
  pollsQuestionPersistence.update(pollsQuestion);
  resourceLocalService.addModelResources(pollsQuestion,serviceContext);
  if (pollsChoices != null) {
    for (    PollsChoice pollsChoice : pollsChoices) {
      pollsChoiceLocalService.addPollsChoice(pollsQuestionId,pollsChoice.getName(),pollsChoice.getDescription(),new ServiceContext());
    }
  }
  return pollsQuestion;
}
