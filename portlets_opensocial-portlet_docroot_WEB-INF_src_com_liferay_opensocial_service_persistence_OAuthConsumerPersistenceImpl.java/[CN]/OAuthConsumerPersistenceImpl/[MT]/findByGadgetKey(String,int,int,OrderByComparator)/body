{
  FinderPath finderPath=null;
  Object[] finderArgs=null;
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) {
    finderPath=FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_GADGETKEY;
    finderArgs=new Object[]{gadgetKey};
  }
 else {
    finderPath=FINDER_PATH_WITH_PAGINATION_FIND_BY_GADGETKEY;
    finderArgs=new Object[]{gadgetKey,start,end,orderByComparator};
  }
  List<OAuthConsumer> list=(List<OAuthConsumer>)FinderCacheUtil.getResult(finderPath,finderArgs,this);
  if (list == null) {
    StringBundler query=null;
    if (orderByComparator != null) {
      query=new StringBundler(3 + (orderByComparator.getOrderByFields().length * 3));
    }
 else {
      query=new StringBundler(3);
    }
    query.append(_SQL_SELECT_OAUTHCONSUMER_WHERE);
    if (gadgetKey == null) {
      query.append(_FINDER_COLUMN_GADGETKEY_GADGETKEY_1);
    }
 else {
      if (gadgetKey.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_GADGETKEY_GADGETKEY_3);
      }
 else {
        query.append(_FINDER_COLUMN_GADGETKEY_GADGETKEY_2);
      }
    }
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else {
      query.append(OAuthConsumerModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (gadgetKey != null) {
        qPos.add(gadgetKey);
      }
      list=(List<OAuthConsumer>)QueryUtil.list(q,getDialect(),start,end);
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (list == null) {
        FinderCacheUtil.removeResult(finderPath,finderArgs);
      }
 else {
        cacheResult(list);
        FinderCacheUtil.putResult(finderPath,finderArgs,list);
      }
      closeSession(session);
    }
  }
  return list;
}
