{
  long fromUserId=addFromUserDetails(jsonObject);
  JSONObject payload=jsonObject.getJSONObject(PushNotificationsConstants.KEY_PAYLOAD);
  long parentEntryId=jsonObject.getLong(PushNotificationsConstants.PARENT_ENTRY_ID,PushNotificationsConstants.DEFAULT_PARENT_ENTRY_ID);
  addPushNotificationsEntry(fromUserId,parentEntryId,payload);
  for (  Map.Entry<String,PushNotificationsSender> entry : _pushNotificationsSenders.entrySet()) {
    List<String> tokens=new ArrayList<String>();
    List<PushNotificationsDevice> pushNotificationsDevices=pushNotificationsDeviceLocalService.getPushNotificationsDevices(toUserId,entry.getKey(),start,end);
    for (    PushNotificationsDevice pushNotificationsDevice : pushNotificationsDevices) {
      tokens.add(pushNotificationsDevice.getToken());
    }
    if (tokens.isEmpty()) {
      continue;
    }
    PushNotificationsSender pushNotificationsSender=entry.getValue();
    try {
      pushNotificationsSender.send(tokens,jsonObject);
    }
 catch (    PortalException pe) {
      throw pe;
    }
catch (    Exception e) {
      throw new PortalException(e);
    }
  }
}
