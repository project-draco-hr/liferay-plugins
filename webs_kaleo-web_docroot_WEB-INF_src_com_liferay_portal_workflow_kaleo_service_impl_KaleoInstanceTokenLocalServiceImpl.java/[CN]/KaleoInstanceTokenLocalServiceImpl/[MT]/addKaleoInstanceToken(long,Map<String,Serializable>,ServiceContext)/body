{
  KaleoInstanceToken parentKaleoInstanceToken=kaleoInstanceTokenPersistence.findByPrimaryKey(parentKaleoInstanceTokenId);
  User user=userPersistence.findByPrimaryKey(parentKaleoInstanceToken.getUserId());
  long kaleoInstanceTokenId=counterLocalService.increment();
  KaleoInstanceToken kaleoInstanceToken=kaleoInstanceTokenPersistence.create(kaleoInstanceTokenId);
  populateKaleoInstanceToken(kaleoInstanceToken,user,workflowContext);
  kaleoInstanceToken.setGroupId(parentKaleoInstanceToken.getGroupId());
  kaleoInstanceToken.setKaleoDefinitionId(parentKaleoInstanceToken.getKaleoDefinitionId());
  kaleoInstanceToken.setKaleoInstanceId(parentKaleoInstanceToken.getKaleoInstanceId());
  kaleoInstanceToken.setParentKaleoInstanceTokenId(parentKaleoInstanceToken.getKaleoInstanceTokenId());
  setCurrentKaleoNode(kaleoInstanceToken,parentKaleoInstanceToken.getCurrentKaleoNodeId());
  kaleoInstanceTokenPersistence.update(kaleoInstanceToken,false);
  return kaleoInstanceToken;
}
