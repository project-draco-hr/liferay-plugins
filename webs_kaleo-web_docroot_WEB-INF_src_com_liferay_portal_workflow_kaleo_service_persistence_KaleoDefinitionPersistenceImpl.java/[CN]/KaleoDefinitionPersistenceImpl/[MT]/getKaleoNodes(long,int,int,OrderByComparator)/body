{
  boolean pagination=true;
  Object[] finderArgs=null;
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) {
    pagination=false;
    finderArgs=new Object[]{pk};
  }
 else {
    finderArgs=new Object[]{pk,start,end,orderByComparator};
  }
  List<com.liferay.portal.workflow.kaleo.model.KaleoNode> list=(List<com.liferay.portal.workflow.kaleo.model.KaleoNode>)FinderCacheUtil.getResult(FINDER_PATH_GET_KALEONODES,finderArgs,this);
  if (list == null) {
    Session session=null;
    try {
      session=openSession();
      String sql=null;
      if (orderByComparator != null) {
        sql=_SQL_GETKALEONODES.concat(ORDER_BY_CLAUSE).concat(orderByComparator.getOrderBy());
      }
 else {
        sql=_SQL_GETKALEONODES;
        if (pagination) {
          sql=sql.concat(com.liferay.portal.workflow.kaleo.model.impl.KaleoNodeModelImpl.ORDER_BY_SQL);
        }
      }
      SQLQuery q=session.createSQLQuery(sql);
      q.addEntity("KaleoNode",com.liferay.portal.workflow.kaleo.model.impl.KaleoNodeImpl.class);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(pk);
      if (!pagination) {
        list=(List<com.liferay.portal.workflow.kaleo.model.KaleoNode>)QueryUtil.list(q,getDialect(),start,end,false);
        Collections.sort(list);
        list=new UnmodifiableList<com.liferay.portal.workflow.kaleo.model.KaleoNode>(list);
      }
 else {
        list=(List<com.liferay.portal.workflow.kaleo.model.KaleoNode>)QueryUtil.list(q,getDialect(),start,end);
      }
      kaleoNodePersistence.cacheResult(list);
      FinderCacheUtil.putResult(FINDER_PATH_GET_KALEONODES,finderArgs,list);
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(FINDER_PATH_GET_KALEONODES,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return list;
}
