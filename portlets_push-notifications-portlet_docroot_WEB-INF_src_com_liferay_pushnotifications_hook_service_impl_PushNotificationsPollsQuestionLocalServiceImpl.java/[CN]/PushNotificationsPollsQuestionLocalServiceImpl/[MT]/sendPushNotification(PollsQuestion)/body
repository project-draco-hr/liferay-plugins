{
  JSONObject payloadJSONObject=JSONFactoryUtil.createJSONObject();
  String description=question.getDescription(Locale.US);
  payloadJSONObject.put(PushNotificationsConstants.KEY_MESSAGE,description);
  payloadJSONObject.put(PushNotificationsConstants.KEY_TYPE,PushNotificationsConstants.VALUE_POLLS_TYPE);
  JSONObject questionJSONObject=JSONFactoryUtil.createJSONObject();
  long questionId=question.getQuestionId();
  questionJSONObject.put(PushNotificationsConstants.KEY_POLLS_QUESTION_ID,questionId);
  payloadJSONObject.put(PushNotificationsConstants.KEY_POLLS_QUESTION,questionJSONObject);
  JSONArray choicesJSONArray=JSONFactoryUtil.createJSONArray();
  try {
    List<PollsChoice> choices=PollsChoiceLocalServiceUtil.getChoices(questionId);
    for (    PollsChoice choice : choices) {
      JSONObject choiceJSONObject=JSONFactoryUtil.createJSONObject();
      choiceJSONObject.put(PushNotificationsConstants.KEY_POLLS_CHOICE_ID,choice.getChoiceId());
      choiceJSONObject.put(PushNotificationsConstants.KEY_POLLS_CHOICE_DESCRIPTION,choice.getDescription(Locale.US));
      choicesJSONArray.put(choiceJSONObject);
    }
    questionJSONObject.put(PushNotificationsConstants.KEY_POLLS_CHOICES,choicesJSONArray);
    PushNotificationsEntryLocalServiceUtil.sendPushNotification(question.getUserId(),payloadJSONObject);
  }
 catch (  Exception e) {
    _log.error("Unable to send push notification for polls question",e);
  }
}
