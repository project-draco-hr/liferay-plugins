{
  try {
    JSONObject payloadJSONObject=JSONFactoryUtil.createJSONObject();
    payloadJSONObject.put(PushNotificationsConstants.KEY_MESSAGE,pollsQuestion.getDescription(Locale.US));
    JSONObject pollsQuestionJSONObject=JSONFactoryUtil.createJSONObject();
    pollsQuestionJSONObject.put(PushNotificationsConstants.KEY_POLLS_QUESTION_ID,pollsQuestion.getQuestionId());
    JSONArray pollsChoicesJSONArray=JSONFactoryUtil.createJSONArray();
    List<PollsChoice> pollsChoices=PollsChoiceLocalServiceUtil.getChoices(pollsQuestion.getQuestionId());
    for (    PollsChoice pollsChoice : pollsChoices) {
      JSONObject pollsChoiceJSONObject=JSONFactoryUtil.createJSONObject();
      pollsChoiceJSONObject.put(PushNotificationsConstants.KEY_POLLS_CHOICE_ID,pollsChoice.getChoiceId());
      pollsChoiceJSONObject.put(PushNotificationsConstants.KEY_POLLS_CHOICE_DESCRIPTION,pollsChoice.getDescription(Locale.US));
      pollsChoicesJSONArray.put(pollsChoiceJSONObject);
    }
    pollsQuestionJSONObject.put(PushNotificationsConstants.KEY_POLLS_CHOICES,pollsChoicesJSONArray);
    payloadJSONObject.put(PushNotificationsConstants.KEY_POLLS_QUESTION,pollsQuestionJSONObject);
    payloadJSONObject.put(PushNotificationsConstants.KEY_TYPE,PushNotificationsConstants.VALUE_TYPE_POLLS);
    PushNotificationsEntryLocalServiceUtil.sendPushNotification(pollsQuestion.getUserId(),payloadJSONObject);
  }
 catch (  Exception e) {
    _log.error("Unable to send push notification for polls question",e);
  }
}
