{
  Calendar calendar=CalendarLocalServiceUtil.getCalendar(calendarId);
  User user=UserLocalServiceUtil.getUser(calendar.getUserId());
  Map<Locale,String> titleMap=new HashMap<Locale,String>();
  Summary summary=vEvent.getSummary();
  if (summary != null) {
    String title=ModelHintsUtil.trimString(CalendarBooking.class.getName(),"title",summary.getValue());
    titleMap.put(user.getLocale(),title);
  }
  Map<Locale,String> descriptionMap=new HashMap<Locale,String>();
  Description description=vEvent.getDescription();
  if (description != null) {
    descriptionMap.put(user.getLocale(),description.getValue());
  }
  String locationString=StringPool.BLANK;
  Location location=vEvent.getLocation();
  if (location != null) {
    locationString=location.getValue();
  }
  DtStart dtStart=vEvent.getStartDate();
  Date startDate=dtStart.getDate();
  DtEnd dtEnd=vEvent.getEndDate();
  Date endDate=dtEnd.getDate();
  boolean allDay=false;
  if (isICalDateOnly(dtStart)) {
    allDay=true;
    endDate=new Date(endDate.getTime() - 1);
  }
  RRule rrule=(RRule)vEvent.getProperty(Property.RRULE);
  String recurrence=StringPool.BLANK;
  if (rrule != null) {
    recurrence=StringUtil.trim(rrule.toString());
    PropertyList propertyList=vEvent.getProperties(Property.EXDATE);
    if (!propertyList.isEmpty()) {
      StringBundler sb=new StringBundler();
      Iterator<ExDate> iterator=propertyList.iterator();
      while (iterator.hasNext()) {
        ExDate exDate=iterator.next();
        DateList dateList=exDate.getDates();
        ListIterator<Date> listIterator=dateList.listIterator();
        while (listIterator.hasNext()) {
          Date date=listIterator.next();
          java.util.Calendar jCalendar=JCalendarUtil.getJCalendar(date.getTime());
          int year=jCalendar.get(java.util.Calendar.YEAR);
          int month=jCalendar.get(java.util.Calendar.MONTH) + 1;
          int day=jCalendar.get(java.util.Calendar.DATE);
          int hour=jCalendar.get(java.util.Calendar.HOUR_OF_DAY);
          int minute=jCalendar.get(java.util.Calendar.MINUTE);
          int second=jCalendar.get(java.util.Calendar.SECOND);
          sb.append(String.format(_EXDATE_FORMAT,year,month,day,hour,minute,second));
          if (listIterator.hasNext()) {
            sb.append(StringPool.COMMA);
          }
        }
        if (iterator.hasNext()) {
          sb.append(StringPool.COMMA);
        }
      }
      recurrence=recurrence.concat(StringPool.NEW_LINE).concat(_EXDATE).concat(sb.toString());
    }
  }
  ComponentList componentList=vEvent.getAlarms();
  long[] reminders=new long[componentList.size()];
  String[] reminderTypes=new String[componentList.size()];
  int i=0;
  for (Iterator<VAlarm> iterator=componentList.iterator(); iterator.hasNext(); i++) {
    VAlarm vAlarm=iterator.next();
    Action action=vAlarm.getAction();
    String value=StringUtil.lowerCase(action.getValue());
    if (!isActionSupported(value)) {
      continue;
    }
    reminderTypes[i]=value;
    Trigger trigger=vAlarm.getTrigger();
    Dur dur=trigger.getDuration();
    long time=0;
    time+=dur.getWeeks() * Time.WEEK;
    time+=dur.getDays() * Time.DAY;
    time+=dur.getHours() * Time.HOUR;
    time+=dur.getMinutes() * Time.MINUTE;
    time+=dur.getSeconds() * Time.SECOND;
    reminders[i]=time;
  }
  long firstReminder=0;
  String firstReminderType=null;
  long secondReminder=0;
  String secondReminderType=null;
  if (!componentList.isEmpty()) {
    firstReminder=reminders[0];
    firstReminderType=reminderTypes[0];
    if (componentList.size() > 1) {
      secondReminder=reminders[1];
      secondReminderType=reminderTypes[1];
    }
  }
  PropertyList propertyList=vEvent.getProperties(Property.ATTENDEE);
  List<Long> childCalendarIds=new ArrayList<Long>();
  for (Iterator<Attendee> iterator=propertyList.iterator(); iterator.hasNext(); ) {
    Attendee attendee=iterator.next();
    URI uri=attendee.getCalAddress();
    User attendeeUser=UserLocalServiceUtil.fetchUserByEmailAddress(calendar.getCompanyId(),uri.getSchemeSpecificPart());
    if ((attendeeUser == null) || (calendar.getUserId() == attendeeUser.getUserId())) {
      continue;
    }
    ServiceContext serviceContext=new ServiceContext();
    serviceContext.setCompanyId(calendar.getCompanyId());
    serviceContext.setScopeGroupId(calendar.getGroupId());
    CalendarResource calendarResource=CalendarResourceUtil.getUserCalendarResource(attendeeUser.getUserId(),serviceContext);
    if (calendarResource == null) {
      continue;
    }
    childCalendarIds.add(calendarResource.getDefaultCalendarId());
  }
  long[] childCalendarIdsArray=ArrayUtil.toArray(childCalendarIds.toArray(new Long[childCalendarIds.size()]));
  CalendarBooking calendarBooking=null;
  String uuid=null;
  Uid uid=vEvent.getUid();
  if (uid != null) {
    uuid=uid.getValue();
    calendarBooking=CalendarBookingLocalServiceUtil.fetchCalendarBooking(uuid,calendar.getGroupId());
    if (calendarBooking == null) {
      uuid=PortalUUIDUtil.generate(uuid.getBytes());
      calendarBooking=CalendarBookingLocalServiceUtil.fetchCalendarBooking(uuid,calendar.getGroupId());
    }
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddGroupPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setScopeGroupId(calendar.getGroupId());
  if (calendarBooking == null) {
    serviceContext.setUuid(uuid);
    CalendarBookingServiceUtil.addCalendarBooking(calendarId,childCalendarIdsArray,CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT,titleMap,descriptionMap,locationString,startDate.getTime(),endDate.getTime(),allDay,recurrence,firstReminder,firstReminderType,secondReminder,secondReminderType,serviceContext);
  }
 else {
    CalendarBookingServiceUtil.updateCalendarBooking(calendarBooking.getCalendarBookingId(),calendarId,childCalendarIdsArray,titleMap,descriptionMap,locationString,startDate.getTime(),endDate.getTime(),allDay,recurrence,firstReminder,firstReminderType,secondReminder,secondReminderType,calendarBooking.getStatus(),serviceContext);
  }
}
