{
  Session session=null;
  try {
    session=openSession();
    StringBuilder sb=new StringBuilder();
    sb.append("SELECT COUNT(DISTINCT tasksEntryId) AS COUNT_VALUE ");
    sb.append("FROM TasksEntry WHERE");
    if (groupId > 0) {
      sb.append(" AND TasksEntry.groupId = ?");
    }
    if (priority > 0) {
      sb.append(" AND TasksEntry.priority = ?");
    }
    if (assigneeUserId > 0) {
      sb.append(" AND TasksEntry.assigneeUserId = ?");
    }
    if (reporterUserId > 0) {
      sb.append(" AND TasksEntry.reporterUserId = ?");
    }
    if (status == TasksConstants.STATUS_ALL) {
    }
 else     if (status == TasksConstants.STATUS_RESOLVED) {
      sb.append(" AND TasksEntry.finishDate IS NOT NULL");
    }
 else {
      sb.append(" AND TasksEntry.finishDate IS NULL");
    }
    if (tagsEntryIds.length > 0) {
      sb.append(" AND TasksEntry.entryId IN (");
      for (int i=0; i < tagsEntryIds.length; i++) {
        sb.append(_tagsAssetClassPKFinderSQL);
        if ((i + 1) < tagsEntryIds.length) {
          sb.append(" AND TagsAsset.classPK IN (");
        }
      }
      for (int i=0; i < tagsEntryIds.length; i++) {
        if ((i + 1) < tagsEntryIds.length) {
          sb.append(StringPool.CLOSE_PARENTHESIS);
        }
      }
    }
    if (notTagsEntryIds.length > 0) {
      sb.append(" AND (");
      for (int i=0; i < notTagsEntryIds.length; i++) {
        sb.append("TasksEntry.entryId NOT IN (");
        sb.append(_tagsAssetClassPKFinderSQL);
        sb.append(StringPool.CLOSE_PARENTHESIS);
        if ((i + 1) < notTagsEntryIds.length) {
          sb.append(" OR ");
        }
      }
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    String sql=sb.toString();
    sql=StringUtil.replaceFirst(sql," WHERE AND "," WHERE ");
    SQLQuery q=session.createSQLQuery(sql);
    q.addEntity("TasksEntry",TasksEntryImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    if (groupId > 0) {
      qPos.add(groupId);
    }
    if (priority > 0) {
      qPos.add(priority);
    }
    if (assigneeUserId > 0) {
      qPos.add(assigneeUserId);
    }
    if (reporterUserId > 0) {
      qPos.add(reporterUserId);
    }
    setTagsEntryIds(qPos,tagsEntryIds);
    setTagsEntryIds(qPos,notTagsEntryIds);
    Iterator<Long> itr=q.list().iterator();
    if (itr.hasNext()) {
      Long count=itr.next();
      if (count != null) {
        return count.intValue();
      }
    }
    return 0;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
