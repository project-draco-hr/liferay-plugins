{
  Session session=null;
  try {
    session=openSession();
    StringBuilder sb=new StringBuilder();
    sb.append("SELECT COUNT(DISTINCT TasksEntryId) AS COUNT_VALUE ");
    sb.append("FROM TMS_TasksEntry WHERE");
    if (groupId > 0) {
      sb.append(" AND TMS_TasksEntry.groupId = ?");
    }
    if (priority > 0) {
      sb.append(" AND TMS_TasksEntry.priority = ?");
    }
    if (assigneeUserId > 0) {
      sb.append(" AND TMS_TasksEntry.assigneeUserId = ?");
    }
    if (reporterUserId > 0) {
      sb.append(" AND TMS_TasksEntry.userId = ?");
    }
    if (status == TasksConstants.STATUS_ALL) {
    }
 else     if (status == TasksConstants.STATUS_RESOLVED) {
      sb.append(" AND TMS_TasksEntry.finishDate IS NOT NULL");
    }
 else {
      sb.append(" AND TMS_TasksEntry.finishDate IS NULL");
    }
    if (assetTagIds.length > 0) {
      sb.append(" AND TMS_TasksEntry.tasksEntryId IN (");
      for (int i=0; i < assetTagIds.length; i++) {
        sb.append(CustomSQLUtil.get(FIND_BY_C_T));
        if ((i + 1) < assetTagIds.length) {
          sb.append(" AND AssetEntry.classPK IN (");
        }
      }
      for (int i=0; i < assetTagIds.length; i++) {
        sb.append(StringPool.CLOSE_PARENTHESIS);
      }
    }
    if (notAssetTagIds.length > 0) {
      sb.append(" AND (");
      for (int i=0; i < notAssetTagIds.length; i++) {
        sb.append("TMS_TasksEntry.tasksEntryId NOT IN (");
        sb.append(CustomSQLUtil.get(FIND_BY_C_T));
        sb.append(StringPool.CLOSE_PARENTHESIS);
        if ((i + 1) < notAssetTagIds.length) {
          sb.append(" OR ");
        }
      }
      sb.append(StringPool.CLOSE_PARENTHESIS);
    }
    String sql=sb.toString();
    sql=StringUtil.replaceFirst(sql," WHERE AND "," WHERE ");
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar(COUNT_COLUMN_NAME,Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    if (groupId > 0) {
      qPos.add(groupId);
    }
    if (priority > 0) {
      qPos.add(priority);
    }
    if (assigneeUserId > 0) {
      qPos.add(assigneeUserId);
    }
    if (reporterUserId > 0) {
      qPos.add(reporterUserId);
    }
    setTagsEntryIds(qPos,assetTagIds);
    setTagsEntryIds(qPos,notAssetTagIds);
    Iterator<Long> itr=q.list().iterator();
    if (itr.hasNext()) {
      Long count=itr.next();
      if (count != null) {
        return count.intValue();
      }
    }
    return 0;
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
