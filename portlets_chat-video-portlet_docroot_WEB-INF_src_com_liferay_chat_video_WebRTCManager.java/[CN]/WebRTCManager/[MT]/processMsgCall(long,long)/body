{
synchronized (this.clients) {
    this.addNonExistingClient(fromUserId);
    WebRTCClient fromClient=this.getClientUnsafe(fromUserId);
    if (!this.clientIsAvailable(fromUserId)) {
      return;
    }
    if (!this.clientIsAvailable(toUserId)) {
      fromClient.getMailbox().push(new WebRTCClient.Mailbox.ErrorMail(toUserId,"{\"id\": \"unavailable_user\"}"));
      return;
    }
    WebRTCClient toClient=this.getClientUnsafe(toUserId);
    if (fromClient.isAlreadyConnected(toClient) || toClient.isAlreadyConnected(fromClient)) {
      fromClient.getMailbox().push(new WebRTCClient.Mailbox.ErrorMail(toUserId,"{\"id\": \"existing_conn\"}"));
      return;
    }
    WebRTCConnection conn=new WebRTCConnection(fromClient);
    conn.setState(WebRTCConnection.State.INITIATED);
    toClient.addWebRTCConnection(fromClient,conn);
    fromClient.addWebRTCConnection(toClient,conn);
    toClient.getMailbox().push(new WebRTCClient.Mailbox.ConnectionMail(fromUserId,"{\"type\": \"call\"}"));
  }
}
