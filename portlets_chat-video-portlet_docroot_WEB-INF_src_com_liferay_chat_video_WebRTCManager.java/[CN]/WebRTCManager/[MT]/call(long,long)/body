{
  addWebRTCClient(sourceUserId);
  if (!hasAvailableWebRTCClient(sourceUserId)) {
    return;
  }
  if (!hasAvailableWebRTCClient(destinationUserId)) {
    pushErrorWebRTCMail(destinationUserId,sourceUserId,"unavailable_user");
    return;
  }
  WebRTCClient sourceWebRTCClient=getWebRTCClient(sourceUserId);
  WebRTCClient destinationWebRTCClient=getWebRTCClient(destinationUserId);
  if (sourceWebRTCClient.hasWebRTCConnection(destinationWebRTCClient) || destinationWebRTCClient.hasWebRTCConnection(sourceWebRTCClient)) {
    pushErrorWebRTCMail(destinationUserId,sourceUserId,"existing_connection");
    return;
  }
  WebRTCConnection webRTCConnection=new WebRTCConnection(sourceWebRTCClient);
  webRTCConnection.setState(WebRTCConnection.State.INITIATED);
  destinationWebRTCClient.addWebRTCConnection(sourceWebRTCClient,webRTCConnection);
  sourceWebRTCClient.addWebRTCConnection(destinationWebRTCClient,webRTCConnection);
  JSONObject messageJSONObject=JSONFactoryUtil.createJSONObject();
  messageJSONObject.put("type","call");
  pushConnectionStateWebRTCMail(sourceWebRTCClient,destinationWebRTCClient,messageJSONObject);
}
