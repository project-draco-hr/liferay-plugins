{
synchronized (this.clients) {
    this.addNonExistingClient(fromUserId);
    WebRTCClient fromClient=this.getClientUnsafe(fromUserId);
    if (!this.clientIsAvailable(fromUserId)) {
      return;
    }
    if (!this.clientIsAvailable(toUserId)) {
      fromClient.getMailbox().push(new WebRTCClient.Mailbox.ErrorMail(toUserId,"{\"id\": \"unavailable_user\"}"));
      return;
    }
    WebRTCClient toClient=this.getClientUnsafe(toUserId);
    if (!WebRTCManager.validateConnectionState(fromClient,toClient,WebRTCConnection.State.INITIATED)) {
      fromClient.getMailbox().push(new WebRTCClient.Mailbox.ErrorMail(toUserId,"{\"id\": \"invalid_state\"}"));
      return;
    }
    if (fromClient.getWebRTCConnection(toClient).getWebRTCClient() == fromClient) {
      fromClient.getMailbox().push(new WebRTCClient.Mailbox.ErrorMail(toUserId,"{\"id\": \"cannot_answer\"}"));
      return;
    }
    if (acceptAnswer) {
      WebRTCConnection conn=fromClient.getWebRTCConnection(toClient);
      conn.setState(WebRTCConnection.State.CONNECTED);
    }
 else {
      fromClient.removeWebRTCConnections(toClient);
    }
    String acceptJsonBool=acceptAnswer ? "true" : "false";
    toClient.getMailbox().push(new WebRTCClient.Mailbox.ConnectionMail(fromUserId,"{\"type\": \"answer\", \"accept\": " + acceptJsonBool + "}"));
  }
}
