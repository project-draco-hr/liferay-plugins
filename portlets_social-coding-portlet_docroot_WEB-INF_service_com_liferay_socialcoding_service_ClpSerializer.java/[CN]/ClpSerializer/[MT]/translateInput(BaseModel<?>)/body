{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals(JIRAActionClp.class.getName())) {
    JIRAActionClp oldCplModel=(JIRAActionClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.socialcoding.model.impl.JIRAActionImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setJiraActionId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getJiraActionId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setJiraUserId",new Class[]{String.class});
        String value1=oldCplModel.getJiraUserId();
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value2=oldCplModel.getCreateDate();
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value3=oldCplModel.getModifiedDate();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setJiraIssueId",new Class[]{Long.TYPE});
        Long value4=new Long(oldCplModel.getJiraIssueId());
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setType",new Class[]{String.class});
        String value5=oldCplModel.getType();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setBody",new Class[]{String.class});
        String value6=oldCplModel.getBody();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setJiraGroupName",new Class[]{String.class});
        String value7=oldCplModel.getJiraGroupName();
        method7.invoke(newModel,value7);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(JIRAChangeGroupClp.class.getName())) {
    JIRAChangeGroupClp oldCplModel=(JIRAChangeGroupClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.socialcoding.model.impl.JIRAChangeGroupImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setJiraChangeGroupId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getJiraChangeGroupId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setJiraUserId",new Class[]{String.class});
        String value1=oldCplModel.getJiraUserId();
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value2=oldCplModel.getCreateDate();
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setJiraIssueId",new Class[]{Long.TYPE});
        Long value3=new Long(oldCplModel.getJiraIssueId());
        method3.invoke(newModel,value3);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(JIRAChangeItemClp.class.getName())) {
    JIRAChangeItemClp oldCplModel=(JIRAChangeItemClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.socialcoding.model.impl.JIRAChangeItemImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setJiraChangeItemId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getJiraChangeItemId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setJiraChangeGroupId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getJiraChangeGroupId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setField",new Class[]{String.class});
        String value2=oldCplModel.getField();
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setOldValue",new Class[]{String.class});
        String value3=oldCplModel.getOldValue();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setOldString",new Class[]{String.class});
        String value4=oldCplModel.getOldString();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setNewValue",new Class[]{String.class});
        String value5=oldCplModel.getNewValue();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setNewString",new Class[]{String.class});
        String value6=oldCplModel.getNewString();
        method6.invoke(newModel,value6);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(JIRAIssueClp.class.getName())) {
    JIRAIssueClp oldCplModel=(JIRAIssueClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.socialcoding.model.impl.JIRAIssueImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setJiraIssueId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getJiraIssueId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value1=oldCplModel.getCreateDate();
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value2=oldCplModel.getModifiedDate();
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setProjectId",new Class[]{Long.TYPE});
        Long value3=new Long(oldCplModel.getProjectId());
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setKey",new Class[]{String.class});
        String value4=oldCplModel.getKey();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setSummary",new Class[]{String.class});
        String value5=oldCplModel.getSummary();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setDescription",new Class[]{String.class});
        String value6=oldCplModel.getDescription();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setReporterJiraUserId",new Class[]{String.class});
        String value7=oldCplModel.getReporterJiraUserId();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setAssigneeJiraUserId",new Class[]{String.class});
        String value8=oldCplModel.getAssigneeJiraUserId();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setResolution",new Class[]{String.class});
        String value9=oldCplModel.getResolution();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setStatus",new Class[]{String.class});
        String value10=oldCplModel.getStatus();
        method10.invoke(newModel,value10);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(SVNRepositoryClp.class.getName())) {
    SVNRepositoryClp oldCplModel=(SVNRepositoryClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.socialcoding.model.impl.SVNRepositoryImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setSvnRepositoryId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getSvnRepositoryId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setUrl",new Class[]{String.class});
        String value1=oldCplModel.getUrl();
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setRevisionNumber",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getRevisionNumber());
        method2.invoke(newModel,value2);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(SVNRevisionClp.class.getName())) {
    SVNRevisionClp oldCplModel=(SVNRevisionClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.socialcoding.model.impl.SVNRevisionImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setSvnRevisionId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getSvnRevisionId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setSvnUserId",new Class[]{String.class});
        String value1=oldCplModel.getSvnUserId();
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value2=oldCplModel.getCreateDate();
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setSvnRepositoryId",new Class[]{Long.TYPE});
        Long value3=new Long(oldCplModel.getSvnRepositoryId());
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setRevisionNumber",new Class[]{Long.TYPE});
        Long value4=new Long(oldCplModel.getRevisionNumber());
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setComments",new Class[]{String.class});
        String value5=oldCplModel.getComments();
        method5.invoke(newModel,value5);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
