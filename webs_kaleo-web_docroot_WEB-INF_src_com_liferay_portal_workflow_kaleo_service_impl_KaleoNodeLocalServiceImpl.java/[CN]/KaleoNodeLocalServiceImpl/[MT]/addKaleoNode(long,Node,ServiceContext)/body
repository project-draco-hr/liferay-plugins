{
  User user=userPersistence.findByPrimaryKey(serviceContext.getUserId());
  Date now=new Date();
  long kaleoNodeId=counterLocalService.increment();
  KaleoNode kaleoNode=kaleoNodePersistence.create(kaleoNodeId);
  kaleoNode.setCompanyId(user.getCompanyId());
  kaleoNode.setUserId(user.getUserId());
  kaleoNode.setUserName(user.getFullName());
  kaleoNode.setCreateDate(now);
  kaleoNode.setModifiedDate(now);
  kaleoNode.setKaleoDefinitionId(kaleoDefinitionId);
  kaleoNode.setName(node.getName());
  kaleoNode.setDescription(node.getDescription());
  kaleoNode.setType(node.getNodeType().name());
  boolean initial=false;
  boolean terminal=false;
  NodeType nodeType=node.getNodeType();
  if (nodeType.equals(NodeType.STATE)) {
    State state=(State)node;
    initial=state.isInitial();
    terminal=state.isTerminal();
  }
  kaleoNode.setInitial(initial);
  kaleoNode.setTerminal(terminal);
  kaleoNodePersistence.update(kaleoNode,false);
  Set<Action> actions=node.getActions();
  for (  Action action : actions) {
    kaleoActionLocalService.addKaleoAction(kaleoDefinitionId,kaleoNodeId,node.getName(),action,serviceContext);
  }
  Set<Notification> notifications=node.getNotifications();
  for (  Notification notification : notifications) {
    kaleoNotificationLocalService.addKaleoNotification(kaleoDefinitionId,kaleoNodeId,node.getName(),notification,serviceContext);
  }
  Set<Timer> timers=node.getTimers();
  for (  Timer timer : timers) {
    KaleoNode timerKaleoNode=addKaleoNode(kaleoDefinitionId,timer,serviceContext);
    kaleoTimerLocalService.addKaleoTimer(kaleoDefinitionId,timerKaleoNode.getKaleoNodeId(),kaleoNodeId,timer,serviceContext);
  }
  return kaleoNode;
}
