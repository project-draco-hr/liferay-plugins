{
  String[] classNameIdsString=null;
  if (classNameIds == null) {
    classNameIdsString=new String[]{null};
  }
 else {
    classNameIdsString=ArrayUtil.toStringArray(classNameIds);
  }
  codes=CustomSQLUtil.keywords(codes);
  names=CustomSQLUtil.keywords(names);
  descriptions=CustomSQLUtil.keywords(descriptions,false);
  types=CustomSQLUtil.keywords(types,false);
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(FIND_BY_C_G_C_C_N_D_T_A);
    if (inlineSQLHelper) {
      sql=InlineSQLHelperUtil.replacePermissionCheck(sql,CalendarResource.class.getName(),"CalendarResource.calendarResourceId",groupIds);
    }
    sql=StringUtil.replace(sql,"[$GROUP_ID$]",getGroupIds(groupIds));
    sql=CustomSQLUtil.replaceKeywords(sql,"classNameId",StringPool.EQUAL,false,classNameIdsString);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(code_)",StringPool.LIKE,false,codes);
    sql=CustomSQLUtil.replaceKeywords(sql,"lower(name)",StringPool.LIKE,false,names);
    sql=CustomSQLUtil.replaceKeywords(sql,"description",StringPool.LIKE,false,descriptions);
    sql=CustomSQLUtil.replaceKeywords(sql,"type_",StringPool.LIKE,true,types);
    sql=CustomSQLUtil.replaceAndOperator(sql,andOperator);
    StringBundler sb=new StringBundler();
    if (orderByComparator != null) {
      appendOrderByComparator(sb,"CalendarResource.",orderByComparator);
    }
    sql=StringUtil.replace(sql,"[$ORDER_BY$]",sb.toString());
    SQLQuery q=session.createSQLQuery(sql);
    q.addEntity("CalendarResource",CalendarResourceImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(companyId);
    qPos.add(groupIds);
    qPos.add(classNameIds,2);
    qPos.add(codes,2);
    qPos.add(names,2);
    qPos.add(descriptions,2);
    qPos.add(types,2);
    qPos.add(active);
    return (List<CalendarResource>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
