{
  ZipWriter zipWriter=ZipWriterFactoryUtil.getZipWriter();
  JSONObject errorsJSONObject=JSONFactoryUtil.createJSONObject();
  for (int i=0; i < zipFileIdsJSONArray.length(); i++) {
    JSONObject zipObjectJSONObject=zipFileIdsJSONArray.getJSONObject(i);
    long groupId=zipObjectJSONObject.getLong("groupId");
    String zipFileId=zipObjectJSONObject.getString("zipFileId");
    Group group=GroupLocalServiceUtil.fetchGroup(groupId);
    if ((group == null) || !SyncUtil.isSyncEnabled(group)) {
      processException(zipFileId,SyncSiteUnavailableException.class.getName(),errorsJSONObject);
      continue;
    }
    try {
      String uuid=zipObjectJSONObject.getString("uuid");
      if (zipObjectJSONObject.getBoolean("patch")) {
        long sourceVersionId=zipObjectJSONObject.getLong("sourceVersionId",0);
        long targetVersionId=zipObjectJSONObject.getLong("targetVersionId",0);
        DownloadServletInputStream downloadServletInputStream=getPatchDownloadServletInputStream(userId,groupId,uuid,sourceVersionId,targetVersionId);
        zipWriter.addEntry(zipFileId,downloadServletInputStream.getInputStream());
      }
 else {
        DownloadServletInputStream downloadServletInputStream=getFileDownloadServletInputStream(userId,groupId,uuid,zipObjectJSONObject.getString("version"));
        zipWriter.addEntry(zipFileId,downloadServletInputStream.getInputStream());
      }
    }
 catch (    Exception e) {
      processException(zipFileId,e.getClass().getName(),errorsJSONObject);
    }
  }
  zipWriter.addEntry("errors.json",errorsJSONObject.toString());
  File file=zipWriter.getFile();
  ServletResponseUtil.write(response,new FileInputStream(file),file.length());
}
