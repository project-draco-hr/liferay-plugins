{
  ZipWriter zipWriter=ZipWriterFactoryUtil.getZipWriter();
  JSONArray errorsJSONArray=JSONFactoryUtil.createJSONArray();
  for (int i=0; i < zipFileIdsJSONArray.length(); i++) {
    JSONObject zipObjectJSONObject=zipFileIdsJSONArray.getJSONObject(i);
    long groupId=zipObjectJSONObject.getLong("groupId");
    String zipFileId=zipObjectJSONObject.getString("zipFileId");
    Group group=GroupLocalServiceUtil.fetchGroup(groupId);
    if ((group == null) || !SyncUtil.isSyncEnabled(group)) {
      processException(zipFileId,SyncSiteUnavailableException.class.getName(),errorsJSONArray);
      continue;
    }
    try {
      String uuid=zipObjectJSONObject.getString("uuid");
      if (zipObjectJSONObject.getBoolean("patch")) {
        String sourceVersion=zipObjectJSONObject.getString("sourceVersion");
        String targetVersion=zipObjectJSONObject.getString("targetVersion");
        if (Validator.isNull(sourceVersion) || Validator.isNull(targetVersion)) {
          processException(zipFileId,IllegalArgumentException.class.getName(),errorsJSONArray);
          continue;
        }
        DownloadServletInputStream downloadServletInputStream=getPatchDownloadServletInputStream(user,groupId,uuid,sourceVersion,targetVersion);
        zipWriter.addEntry(zipFileId,downloadServletInputStream.getInputStream());
      }
 else {
        DownloadServletInputStream downloadServletInputStream=getFileDownloadServletInputStream(groupId,uuid,zipObjectJSONObject.getString("version"));
        zipWriter.addEntry(zipFileId,downloadServletInputStream.getInputStream());
      }
    }
 catch (    Exception e) {
      processException(zipFileId,e.getClass().getName(),errorsJSONArray);
    }
  }
  zipWriter.addEntry("errors.json",errorsJSONArray.toString());
  File file=zipWriter.getFile();
  ServletResponseUtil.write(response,new FileInputStream(file),file.length());
}
