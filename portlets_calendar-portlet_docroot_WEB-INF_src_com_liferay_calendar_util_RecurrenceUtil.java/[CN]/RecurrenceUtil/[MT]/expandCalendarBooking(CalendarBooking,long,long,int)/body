{
  List<CalendarBooking> expandedCalendarBookings=new ArrayList<CalendarBooking>();
  DateValue startDateValue=_toDateValue(startDate);
  DateValue endDateValue=_toDateValue(endDate);
  if (!calendarBooking.isRecurring()) {
    expandedCalendarBookings.add(calendarBooking);
    return expandedCalendarBookings;
  }
  try {
    RecurrenceIterator recurrenceIterator=RecurrenceIteratorFactory.createRecurrenceIterator(calendarBooking.getRecurrence(),_toDateValue(calendarBooking.getStartDate()),TimeUtils.utcTimezone());
    while (recurrenceIterator.hasNext()) {
      DateValue dateValue=recurrenceIterator.next();
      if (dateValue.compareTo(startDateValue) < 0) {
        continue;
      }
      if (dateValue.compareTo(endDateValue) > 0) {
        break;
      }
      CalendarBooking newCalendarBooking=_copyCalendarBooking(calendarBooking,dateValue);
      expandedCalendarBookings.add(newCalendarBooking);
      if ((maxSize > 0) && (expandedCalendarBookings.size() >= maxSize)) {
        break;
      }
    }
  }
 catch (  ParseException pe) {
    _log.error("Unable to parse data ",pe);
  }
  return expandedCalendarBookings;
}
