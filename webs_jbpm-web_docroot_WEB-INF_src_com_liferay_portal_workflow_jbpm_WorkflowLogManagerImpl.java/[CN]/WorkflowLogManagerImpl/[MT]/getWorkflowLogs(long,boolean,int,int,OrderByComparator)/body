{
  List<WorkflowLog> workflowLogs=new ArrayList<WorkflowLog>();
  JbpmContext jbpmContext=_jbpmConfiguration.createJbpmContext();
  try {
    LoggingSession loggingSession=jbpmContext.getLoggingSession();
    Token token=jbpmContext.loadToken(workflowInstanceId);
    List<ProcessLog> processLogs=loggingSession.findLogsByToken(token);
    for (    ProcessLog processLog : processLogs) {
      workflowLogs.add(new WorkflowLogImpl(processLog));
    }
    if (includeChildren) {
      Stack<Token> tokens=new Stack<Token>();
      tokens.addAll(token.getChildren().values());
      while (!tokens.isEmpty()) {
        Token childToken=tokens.pop();
        processLogs=loggingSession.findLogsByToken(childToken);
        for (        ProcessLog processLog : processLogs) {
          workflowLogs.add(new WorkflowLogImpl(processLog));
        }
        tokens.addAll(childToken.getChildren().values());
      }
    }
    Collections.sort(workflowLogs,orderByComparator);
    if ((start != QueryUtil.ALL_POS) && (end != QueryUtil.ALL_POS)) {
      workflowLogs=ListUtil.subList(workflowLogs,start,end);
    }
    return workflowLogs;
  }
 catch (  Exception e) {
    throw new WorkflowException(e);
  }
 finally {
    jbpmContext.close();
  }
}
