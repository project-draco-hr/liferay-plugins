{
  Map<Long,Long> classPKs=new HashMap<Long,Long>();
  for (  Class<?> obj : new Class[]{KBArticle.class,KBTemplate.class}) {
    classPKs.putAll((Map<Long,Long>)portletDataContext.getNewPrimaryKeysMap(obj));
  }
  long userId=portletDataContext.getUserId(kbComment.getUserUuid());
  long classPK=MapUtil.getLong(classPKs,kbComment.getClassPK());
  ServiceContext serviceContext=portletDataContext.createServiceContext(kbCommentElement,kbComment,NAMESPACE);
  if (portletDataContext.isDataStrategyMirror()) {
    KBComment existingKBComment=KBCommentUtil.fetchByUUID_G(kbComment.getUuid(),portletDataContext.getScopeGroupId());
    if (existingKBComment == null) {
      serviceContext.setUuid(kbComment.getUuid());
      KBCommentLocalServiceUtil.addKBComment(userId,kbComment.getClassNameId(),classPK,kbComment.getContent(),kbComment.getHelpful(),serviceContext);
    }
 else {
      KBCommentLocalServiceUtil.updateKBComment(existingKBComment.getKbCommentId(),kbComment.getClassNameId(),classPK,kbComment.getContent(),kbComment.getHelpful(),serviceContext);
    }
  }
 else {
    KBCommentLocalServiceUtil.addKBComment(userId,kbComment.getClassNameId(),classPK,kbComment.getContent(),kbComment.getHelpful(),serviceContext);
  }
}
