{
  User user=userPersistence.findByPrimaryKey(userId);
  long groupId=serviceContext.getScopeGroupId();
  if (allDay) {
    startDateHour=0;
    startDateMinute=0;
    endDateHour=23;
    endDateMinute=59;
    durationHour=23;
    durationMinute=59;
  }
  Date startDate=PortalUtil.getDate(startDateMonth,startDateDay,startDateYear,startDateHour,startDateMinute,TimeZoneUtil.getDefault(),null);
  Date endDate=PortalUtil.getDate(endDateMonth,endDateDay,endDateYear,endDateHour,endDateMinute,TimeZoneUtil.getDefault(),null);
  Date now=new Date();
  validate(titleMap,startDateMonth,startDateDay,startDateYear,endDateMonth,endDateDay,endDateYear,durationHour,durationMinute,allDay);
  long calendarEventId=counterLocalService.increment();
  CalendarEvent calendarEvent=calendarEventPersistence.create(calendarEventId);
  calendarEvent.setUuid(serviceContext.getUuid());
  calendarEvent.setGroupId(groupId);
  calendarEvent.setCompanyId(user.getCompanyId());
  calendarEvent.setUserId(user.getUserId());
  calendarEvent.setUserName(user.getFullName());
  calendarEvent.setCreateDate(serviceContext.getCreateDate(now));
  calendarEvent.setModifiedDate(serviceContext.getModifiedDate(now));
  calendarEvent.setTitleMap(titleMap);
  calendarEvent.setDescriptionMap(descriptionMap);
  calendarEvent.setLocation(location);
  calendarEvent.setStartDate(startDate);
  calendarEvent.setEndDate(endDate);
  calendarEvent.setDurationHour(durationHour);
  calendarEvent.setDurationMinute(durationMinute);
  calendarEvent.setAllDay(allDay);
  calendarEvent.setRecurrence(recurrence);
  calendarEvent.setType(type);
  calendarEvent.setRemindBy(remindBy);
  calendarEvent.setFirstReminder(firstReminder);
  calendarEvent.setSecondReminder(secondReminder);
  calendarEvent.setExpandoBridgeAttributes(serviceContext);
  calendarEventPersistence.update(calendarEvent,false);
  resourceLocalService.addModelResources(calendarEvent,serviceContext);
  return calendarEvent;
}
