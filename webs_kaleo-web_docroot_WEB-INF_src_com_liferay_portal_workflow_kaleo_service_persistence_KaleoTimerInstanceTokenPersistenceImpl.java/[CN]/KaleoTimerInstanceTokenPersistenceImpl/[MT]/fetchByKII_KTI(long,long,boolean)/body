{
  Object[] finderArgs=new Object[]{kaleoInstanceId,kaleoTimerId};
  Object result=null;
  if (retrieveFromCache) {
    result=FinderCacheUtil.getResult(FINDER_PATH_FETCH_BY_KII_KTI,finderArgs,this);
  }
  if (result == null) {
    StringBundler query=new StringBundler(4);
    query.append(_SQL_SELECT_KALEOTIMERINSTANCETOKEN_WHERE);
    query.append(_FINDER_COLUMN_KII_KTI_KALEOINSTANCEID_2);
    query.append(_FINDER_COLUMN_KII_KTI_KALEOTIMERID_2);
    query.append(KaleoTimerInstanceTokenModelImpl.ORDER_BY_JPQL);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(kaleoInstanceId);
      qPos.add(kaleoTimerId);
      List<KaleoTimerInstanceToken> list=q.list();
      result=list;
      KaleoTimerInstanceToken kaleoTimerInstanceToken=null;
      if (list.isEmpty()) {
        FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_KII_KTI,finderArgs,list);
      }
 else {
        kaleoTimerInstanceToken=list.get(0);
        cacheResult(kaleoTimerInstanceToken);
        if ((kaleoTimerInstanceToken.getKaleoInstanceId() != kaleoInstanceId) || (kaleoTimerInstanceToken.getKaleoTimerId() != kaleoTimerId)) {
          FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_KII_KTI,finderArgs,kaleoTimerInstanceToken);
        }
      }
      return kaleoTimerInstanceToken;
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (result == null) {
        FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_KII_KTI,finderArgs);
      }
      closeSession(session);
    }
  }
 else {
    if (result instanceof List<?>) {
      return null;
    }
 else {
      return (KaleoTimerInstanceToken)result;
    }
  }
}
