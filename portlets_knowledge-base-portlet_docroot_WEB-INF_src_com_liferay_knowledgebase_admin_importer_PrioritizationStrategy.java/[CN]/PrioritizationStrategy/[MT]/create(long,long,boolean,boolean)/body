{
  List<KBArticle> existingParentArticles=KBArticleServiceUtil.getKBArticles(groupId,parentKBFolderId,WorkflowConstants.STATUS_ANY,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
  List<String> existingParentUrlTitles=new ArrayList<String>();
  Map<String,List<KBArticle>> existingChildArticlesMap=new HashMap<String,List<KBArticle>>();
  Map<String,List<String>> existingChildUrlTitlesMap=new HashMap<String,List<String>>();
  for (  KBArticle existingParentArticle : existingParentArticles) {
    existingParentUrlTitles.add(existingParentArticle.getUrlTitle());
    long resourcePrimKey=existingParentArticle.getResourcePrimKey();
    List<KBArticle> existingChildArticles=KBArticleServiceUtil.getKBArticles(groupId,resourcePrimKey,WorkflowConstants.STATUS_ANY,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
    List<String> existingChildUrlTitles=new ArrayList<String>();
    for (    KBArticle existingChildArticle : existingChildArticles) {
      existingChildUrlTitles.add(existingChildArticle.getUrlTitle());
    }
    existingChildArticlesMap.put(existingParentArticle.getUrlTitle(),existingChildArticles);
    existingChildUrlTitlesMap.put(existingParentArticle.getUrlTitle(),existingChildUrlTitles);
  }
  return new PrioritizationStrategy(groupId,parentKBFolderId,prioritizeUpdatedArticles,prioritizeByNumericalPrefix,existingParentArticles,existingParentUrlTitles,existingChildArticlesMap,existingChildUrlTitlesMap);
}
