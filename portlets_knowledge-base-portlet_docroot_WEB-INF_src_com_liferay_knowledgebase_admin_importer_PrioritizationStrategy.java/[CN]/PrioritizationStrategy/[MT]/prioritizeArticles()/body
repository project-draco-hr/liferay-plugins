{
  if (_prioritizeUpdatedArticles) {
    _initNonImportedArticles();
  }
 else {
    _initNewArticles();
  }
  if (_prioritizeByNumericalPrefix) {
    Set<String> importedKBArticleUrlTitles=_importedUrlTitlesPrioritiesMap.keySet();
    for (    String importedKBArticleUrlTitle : importedKBArticleUrlTitles) {
      KBArticle kbArticle=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(_groupId,_parentKBFolderId,importedKBArticleUrlTitle);
      long resourcePrimKey=kbArticle.getResourcePrimKey();
      double priority=_importedUrlTitlesPrioritiesMap.get(importedKBArticleUrlTitle);
      KBArticleLocalServiceUtil.updatePriority(resourcePrimKey,priority);
      if (_importedParentArticles != null) {
        if (_importedParentArticles.contains(kbArticle)) {
          _importedParentArticles.remove(kbArticle);
        }
      }
      if (_importedParentUrlTitles != null) {
        if (_importedParentUrlTitles.contains(importedKBArticleUrlTitle)) {
          _importedParentUrlTitles.remove(importedKBArticleUrlTitle);
        }
      }
      if (_newParentArticles != null) {
        if (_newParentArticles.contains(kbArticle)) {
          _newParentArticles.remove(kbArticle);
        }
      }
      if (_newParentUrlTitles != null) {
        if (_newParentUrlTitles.contains(importedKBArticleUrlTitle)) {
          _newParentUrlTitles.remove(importedKBArticleUrlTitle);
        }
      }
      Set<String> parentKBArticleUrlTitles=_importedChildArticlesMap.keySet();
      for (      String parentKBArticleUrlTitle : parentKBArticleUrlTitles) {
        if (_importedChildArticlesMap != null) {
          List<KBArticle> importedChildKBArticles=_importedChildArticlesMap.get(parentKBArticleUrlTitle);
          if (importedChildKBArticles.contains(kbArticle)) {
            importedChildKBArticles.remove(kbArticle);
          }
          _importedChildArticlesMap.put(parentKBArticleUrlTitle,importedChildKBArticles);
        }
        if (_importedChildUrlTitlesMap != null) {
          List<String> importedChildKBArticlesUrlTitles=_importedChildUrlTitlesMap.get(parentKBArticleUrlTitle);
          if (importedChildKBArticlesUrlTitles.contains(importedKBArticleUrlTitle)) {
            importedChildKBArticlesUrlTitles.remove(importedKBArticleUrlTitle);
          }
          _importedChildUrlTitlesMap.put(parentKBArticleUrlTitle,importedChildKBArticlesUrlTitles);
        }
        if (_newChildArticlesMap != null) {
          List<KBArticle> newChildKBArticles=_newChildArticlesMap.get(parentKBArticleUrlTitle);
          if (newChildKBArticles == null) {
            continue;
          }
          if (newChildKBArticles.contains(kbArticle)) {
            newChildKBArticles.remove(kbArticle);
          }
          _newChildArticlesMap.put(parentKBArticleUrlTitle,newChildKBArticles);
        }
        if (_newChildUrlTitlesMap != null) {
          List<String> newChildKBArticleUrlTitles=_newChildUrlTitlesMap.get(parentKBArticleUrlTitle);
          if (newChildKBArticleUrlTitles == null) {
            continue;
          }
          if (newChildKBArticleUrlTitles.contains(importedKBArticleUrlTitle)) {
            newChildKBArticleUrlTitles.remove(importedKBArticleUrlTitle);
          }
          _newChildUrlTitlesMap.put(parentKBArticleUrlTitle,newChildKBArticleUrlTitles);
        }
      }
    }
  }
  if (_prioritizeUpdatedArticles) {
    double maxParentKBArticlePriority=0.0;
    Map<String,Double> maxChildKBArticlePriorityMap=new HashMap<String,Double>();
    for (    KBArticle parentKBArticle : _nonImportedParentArticles) {
      double parentKBArticlePriority=parentKBArticle.getPriority();
      if (parentKBArticlePriority > maxParentKBArticlePriority) {
        maxParentKBArticlePriority=parentKBArticlePriority;
      }
      String parentKBArticleUrlTitle=parentKBArticle.getUrlTitle();
      List<KBArticle> childKBArticles=_nonImportedChildArticlesMap.get(parentKBArticleUrlTitle);
      if (childKBArticles == null) {
        continue;
      }
      double maxChildKBArticlePriority=0.0;
      for (      KBArticle childArticle : childKBArticles) {
        double childKBArticlePriority=childArticle.getPriority();
        if (childKBArticlePriority > maxChildKBArticlePriority) {
          maxChildKBArticlePriority=childKBArticlePriority;
        }
      }
      maxChildKBArticlePriorityMap.put(parentKBArticleUrlTitle,maxChildKBArticlePriority);
    }
    ListUtil.sort(_importedParentUrlTitles);
    for (    String importedParentKBArticleUrlTitle : _importedParentUrlTitles) {
      KBArticle parentKBArticle=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(_groupId,_parentKBFolderId,importedParentKBArticleUrlTitle);
      long parentResourcePrimKey=parentKBArticle.getResourcePrimKey();
      maxParentKBArticlePriority++;
      KBArticleLocalServiceUtil.updatePriority(parentResourcePrimKey,maxParentKBArticlePriority);
    }
    updateChildKBArticlesPriorities(_importedChildArticlesMap,maxChildKBArticlePriorityMap);
  }
 else {
    double maxParentKBArticlePriority=0.0;
    Map<String,Double> maxChildKBArticlePriorityMap=new HashMap<String,Double>();
    for (    KBArticle parentKBArticle : _existingParentArticles) {
      double parentKBArticlePriority=parentKBArticle.getPriority();
      if (parentKBArticlePriority > maxParentKBArticlePriority) {
        maxParentKBArticlePriority=parentKBArticlePriority;
      }
      String parentKBArticleUrlTitle=parentKBArticle.getUrlTitle();
      List<KBArticle> childKBArticles=_existingChildArticlesMap.get(parentKBArticleUrlTitle);
      double maxChildKBArticlePriority=0.0;
      for (      KBArticle childKBArticle : childKBArticles) {
        double childKBArticlePriority=childKBArticle.getPriority();
        if (childKBArticlePriority > maxChildKBArticlePriority) {
          maxChildKBArticlePriority=childKBArticlePriority;
        }
      }
      maxChildKBArticlePriorityMap.put(parentKBArticleUrlTitle,maxChildKBArticlePriority);
    }
    ListUtil.sort(_newParentUrlTitles);
    for (    String parentKBArticleUrlTitle : _newParentUrlTitles) {
      KBArticle parentKBArticle=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(_groupId,_parentKBFolderId,parentKBArticleUrlTitle);
      long parentResourcePrimKey=parentKBArticle.getResourcePrimKey();
      maxParentKBArticlePriority++;
      KBArticleLocalServiceUtil.updatePriority(parentResourcePrimKey,maxParentKBArticlePriority);
    }
    updateChildKBArticlesPriorities(_newChildArticlesMap,maxChildKBArticlePriorityMap);
  }
}
