{
  if (_prioritizeUpdatedArticles) {
    _initNonImportedArticles();
  }
 else {
    _initNewArticles();
  }
  if (_prioritizeByNumericalPrefix) {
    Set<String> importedKBArticleUrlTitles=_importedUrlTitlesPrioritiesMap.keySet();
    for (    String importedKBArticleUrlTitle : importedKBArticleUrlTitles) {
      KBArticle kbArticle=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(_groupId,_parentKBFolderId,importedKBArticleUrlTitle);
      double priority=_importedUrlTitlesPrioritiesMap.get(importedKBArticleUrlTitle);
      KBArticleLocalServiceUtil.updatePriority(kbArticle.getResourcePrimKey(),priority);
      if (_importedArticlesMap != null) {
        Set<String> keySet=_importedArticlesMap.keySet();
        for (        String parentUrlTitle : keySet) {
          List<KBArticle> kbArticles=_importedArticlesMap.get(parentUrlTitle);
          if (kbArticles.contains(kbArticle)) {
            kbArticles.remove(kbArticle);
          }
          _importedArticlesMap.put(parentUrlTitle,kbArticles);
        }
        keySet=_importedUrlTitlesMap.keySet();
        for (        String parentUrlTitle : keySet) {
          List<String> urlTitles=_importedUrlTitlesMap.get(parentUrlTitle);
          String urlTitle=kbArticle.getUrlTitle();
          if (urlTitles.contains(urlTitle)) {
            urlTitles.remove(urlTitle);
          }
          _importedUrlTitlesMap.put(parentUrlTitle,urlTitles);
        }
      }
      if (_newArticlesMap != null) {
        Set<String> keySet=_newArticlesMap.keySet();
        for (        String parentUrlTitle : keySet) {
          List<KBArticle> kbArticles=_newArticlesMap.get(parentUrlTitle);
          if (kbArticles.contains(kbArticle)) {
            kbArticles.remove(kbArticle);
          }
          _newArticlesMap.put(parentUrlTitle,kbArticles);
        }
        keySet=_newUrlTitlesMap.keySet();
        for (        String parentUrlTitle : keySet) {
          List<String> urlTitles=_newUrlTitlesMap.get(parentUrlTitle);
          String urlTitle=kbArticle.getUrlTitle();
          if (urlTitles.contains(urlTitle)) {
            urlTitles.remove(urlTitle);
          }
          _newUrlTitlesMap.put(parentUrlTitle,urlTitles);
        }
      }
    }
  }
  if (_prioritizeUpdatedArticles) {
    double maxParentKBArticlePriority=0.0;
    Map<String,Double> maxChildKBArticlePriorityMap=new HashMap<String,Double>();
    for (    KBArticle parentKBArticle : _nonImportedParentArticles) {
      double parentKBArticlePriority=parentKBArticle.getPriority();
      if (parentKBArticlePriority > maxParentKBArticlePriority) {
        maxParentKBArticlePriority=parentKBArticlePriority;
      }
      String parentKBArticleUrlTitle=parentKBArticle.getUrlTitle();
      List<KBArticle> childKBArticles=_nonImportedChildArticlesMap.get(parentKBArticleUrlTitle);
      if (childKBArticles == null) {
        continue;
      }
      double maxChildKBArticlePriority=0.0;
      for (      KBArticle childArticle : childKBArticles) {
        double childKBArticlePriority=childArticle.getPriority();
        if (childKBArticlePriority > maxChildKBArticlePriority) {
          maxChildKBArticlePriority=childKBArticlePriority;
        }
      }
      maxChildKBArticlePriorityMap.put(parentKBArticleUrlTitle,maxChildKBArticlePriority);
    }
    ListUtil.sort(_importedParentUrlTitles);
    for (    String importedParentKBArticleUrlTitle : _importedParentUrlTitles) {
      KBArticle parentKBArticle=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(_groupId,_parentKBFolderId,importedParentKBArticleUrlTitle);
      maxParentKBArticlePriority++;
      KBArticleLocalServiceUtil.updatePriority(parentKBArticle.getResourcePrimKey(),maxParentKBArticlePriority);
    }
    updateChildKBArticlesPriorities(_importedChildArticlesMap,maxChildKBArticlePriorityMap);
  }
 else {
    double maxParentKBArticlePriority=0.0;
    Map<String,Double> maxChildKBArticlePriorityMap=new HashMap<String,Double>();
    for (    KBArticle parentKBArticle : _existingParentArticles) {
      double parentKBArticlePriority=parentKBArticle.getPriority();
      if (parentKBArticlePriority > maxParentKBArticlePriority) {
        maxParentKBArticlePriority=parentKBArticlePriority;
      }
      String parentKBArticleUrlTitle=parentKBArticle.getUrlTitle();
      List<KBArticle> childKBArticles=_existingChildArticlesMap.get(parentKBArticleUrlTitle);
      double maxChildKBArticlePriority=0.0;
      for (      KBArticle childKBArticle : childKBArticles) {
        double childKBArticlePriority=childKBArticle.getPriority();
        if (childKBArticlePriority > maxChildKBArticlePriority) {
          maxChildKBArticlePriority=childKBArticlePriority;
        }
      }
      maxChildKBArticlePriorityMap.put(parentKBArticleUrlTitle,maxChildKBArticlePriority);
    }
    ListUtil.sort(_newParentUrlTitles);
    for (    String parentKBArticleUrlTitle : _newParentUrlTitles) {
      KBArticle parentKBArticle=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(_groupId,_parentKBFolderId,parentKBArticleUrlTitle);
      maxParentKBArticlePriority++;
      KBArticleLocalServiceUtil.updatePriority(parentKBArticle.getResourcePrimKey(),maxParentKBArticlePriority);
    }
    updateChildKBArticlesPriorities(_newChildArticlesMap,maxChildKBArticlePriorityMap);
  }
}
