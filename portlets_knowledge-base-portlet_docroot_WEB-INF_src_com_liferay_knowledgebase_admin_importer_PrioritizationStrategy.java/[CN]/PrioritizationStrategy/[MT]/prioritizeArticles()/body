{
  if (_prioritizeUpdatedArticles) {
    _initNonImportedArticles();
  }
  if (_prioritizeByNumericalPrefix) {
    Set<String> importedKBArticleUrlTitles=_importedUrlTitlesPrioritiesMap.keySet();
    for (    String importedKBArticleUrlTitle : importedKBArticleUrlTitles) {
      KBArticle kbArticle=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(_groupId,_parentKBFolderId,importedKBArticleUrlTitle);
      double priority=_importedUrlTitlesPrioritiesMap.get(importedKBArticleUrlTitle);
      KBArticleLocalServiceUtil.updatePriority(kbArticle.getResourcePrimKey(),priority);
      Set<String> keySet=_importedArticlesMap.keySet();
      for (      String parentUrlTitle : keySet) {
        List<KBArticle> kbArticles=_importedArticlesMap.get(parentUrlTitle);
        if (kbArticles.contains(kbArticle)) {
          kbArticles.remove(kbArticle);
        }
        _importedArticlesMap.put(parentUrlTitle,kbArticles);
      }
      keySet=_importedUrlTitlesMap.keySet();
      for (      String parentUrlTitle : keySet) {
        List<String> urlTitles=_importedUrlTitlesMap.get(parentUrlTitle);
        String urlTitle=kbArticle.getUrlTitle();
        if (urlTitles.contains(urlTitle)) {
          urlTitles.remove(urlTitle);
        }
        _importedUrlTitlesMap.put(parentUrlTitle,urlTitles);
      }
      keySet=_newArticlesMap.keySet();
      for (      String parentUrlTitle : keySet) {
        List<KBArticle> kbArticles=_newArticlesMap.get(parentUrlTitle);
        if (kbArticles.contains(kbArticle)) {
          kbArticles.remove(kbArticle);
        }
        _newArticlesMap.put(parentUrlTitle,kbArticles);
      }
      keySet=_newUrlTitlesMap.keySet();
      for (      String parentUrlTitle : keySet) {
        List<String> urlTitles=_newUrlTitlesMap.get(parentUrlTitle);
        String urlTitle=kbArticle.getUrlTitle();
        if (urlTitles.contains(urlTitle)) {
          urlTitles.remove(urlTitle);
        }
        _newUrlTitlesMap.put(parentUrlTitle,urlTitles);
      }
    }
  }
  if (_prioritizeUpdatedArticles) {
    Map<String,Double> maxKBArticlePriorityMap=new HashMap<String,Double>();
    Set<String> keySet=_nonImportedArticlesMap.keySet();
    for (    String parentUrlTitle : keySet) {
      double maxKBArticlePriority=0.0;
      List<KBArticle> kbArticles=_nonImportedArticlesMap.get(parentUrlTitle);
      for (      KBArticle kbArticle : kbArticles) {
        double kbArticlePriority=kbArticle.getPriority();
        if (kbArticlePriority > maxKBArticlePriority) {
          maxKBArticlePriority=kbArticlePriority;
        }
      }
      maxKBArticlePriorityMap.put(parentUrlTitle,maxKBArticlePriority);
    }
    keySet=_importedArticlesMap.keySet();
    for (    String parentUrlTitle : keySet) {
      List<String> urlTitles=getList(_importedUrlTitlesMap,parentUrlTitle);
      ListUtil.sort(urlTitles);
      int size=urlTitles.size();
      for (int i=0; i < size; i++) {
        String urlTitle=urlTitles.get(i);
        KBArticle kbArticle=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(_groupId,_parentKBFolderId,urlTitle);
        double maxPriority=0.0;
        if (maxKBArticlePriorityMap.containsKey(parentUrlTitle)) {
          maxPriority=maxKBArticlePriorityMap.get(parentUrlTitle);
        }
        maxPriority++;
        maxKBArticlePriorityMap.put(parentUrlTitle,maxPriority);
        KBArticleLocalServiceUtil.updatePriority(kbArticle.getResourcePrimKey(),maxPriority);
      }
    }
  }
 else {
    Map<String,Double> maxKBArticlePriorityMap=new HashMap<String,Double>();
    Set<String> keySet=_existingArticlesMap.keySet();
    for (    String parentUrlTitle : keySet) {
      double maxKBArticlePriority=0.0;
      List<KBArticle> kbArticles=_existingArticlesMap.get(parentUrlTitle);
      for (      KBArticle kbArticle : kbArticles) {
        double kbArticlePriority=kbArticle.getPriority();
        if (kbArticlePriority > maxKBArticlePriority) {
          maxKBArticlePriority=kbArticlePriority;
        }
      }
      maxKBArticlePriorityMap.put(parentUrlTitle,maxKBArticlePriority);
    }
    keySet=_newArticlesMap.keySet();
    for (    String parentUrlTitle : keySet) {
      List<String> urlTitles=getList(_newUrlTitlesMap,parentUrlTitle);
      ListUtil.sort(urlTitles);
      int size=urlTitles.size();
      for (int i=0; i < size; i++) {
        String urlTitle=urlTitles.get(i);
        KBArticle kbArticle=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(_groupId,_parentKBFolderId,urlTitle);
        double maxPriority=0.0;
        if (maxKBArticlePriorityMap.containsKey(parentUrlTitle)) {
          maxPriority=maxKBArticlePriorityMap.get(parentUrlTitle);
        }
        maxPriority++;
        maxKBArticlePriorityMap.put(parentUrlTitle,maxPriority);
        KBArticleLocalServiceUtil.updatePriority(kbArticle.getResourcePrimKey(),maxPriority);
      }
    }
  }
}
