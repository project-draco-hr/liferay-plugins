{
  if (_prioritizeUpdatedArticles) {
    _initNonImportedArticles();
  }
  if (_prioritizeByNumericalPrefix) {
    for (    Map.Entry<String,Double> entry : _importedUrlTitlesPrioritiesMap.entrySet()) {
      KBArticle kbArticle=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(_groupId,_parentKBFolderId,entry.getKey());
      KBArticleLocalServiceUtil.updatePriority(kbArticle.getResourcePrimKey(),entry.getValue());
      remove(_importedArticlesMap,kbArticle);
      remove(_importedUrlTitlesMap,kbArticle.getUrlTitle());
      remove(_newArticlesMap,kbArticle);
      remove(_newUrlTitlesMap,kbArticle.getUrlTitle());
    }
  }
  if (_prioritizeUpdatedArticles) {
    Map<String,Double> maxKBArticlePriorityMap=new HashMap<String,Double>();
    for (    Map.Entry<String,List<KBArticle>> entry : _nonImportedArticlesMap.entrySet()) {
      double maxKBArticlePriority=0.0;
      List<KBArticle> kbArticles=entry.getValue();
      if (kbArticles == null) {
        continue;
      }
      for (      KBArticle kbArticle : kbArticles) {
        double kbArticlePriority=kbArticle.getPriority();
        if (kbArticlePriority > maxKBArticlePriority) {
          maxKBArticlePriority=kbArticlePriority;
        }
      }
      maxKBArticlePriorityMap.put(entry.getKey(),maxKBArticlePriority);
    }
    for (    Map.Entry<String,List<KBArticle>> entry : _importedArticlesMap.entrySet()) {
      List<KBArticle> kbArticles=entry.getValue();
      if (kbArticles == null) {
        continue;
      }
      ListUtil.sort(kbArticles,new Comparator<KBArticle>(){
        @Override public int compare(        KBArticle kbArticle1,        KBArticle kbArticle2){
          String urlTitle1=kbArticle1.getUrlTitle();
          String urlTitle2=kbArticle2.getUrlTitle();
          return urlTitle1.compareTo(urlTitle2);
        }
      }
);
      String parentUrlTitle=entry.getKey();
      int size=kbArticles.size();
      for (int i=0; i < size; i++) {
        KBArticle kbArticle=kbArticles.get(i);
        double maxPriority=0.0;
        if (maxKBArticlePriorityMap.containsKey(parentUrlTitle)) {
          maxPriority=maxKBArticlePriorityMap.get(parentUrlTitle);
        }
        maxPriority++;
        maxKBArticlePriorityMap.put(parentUrlTitle,maxPriority);
        KBArticleLocalServiceUtil.updatePriority(kbArticle.getResourcePrimKey(),maxPriority);
      }
    }
  }
 else {
    Map<String,Double> maxKBArticlePriorityMap=new HashMap<String,Double>();
    for (    Map.Entry<String,List<KBArticle>> entry : _existingArticlesMap.entrySet()) {
      double maxKBArticlePriority=0.0;
      List<KBArticle> kbArticles=entry.getValue();
      if (kbArticles == null) {
        continue;
      }
      for (      KBArticle kbArticle : kbArticles) {
        double kbArticlePriority=kbArticle.getPriority();
        if (kbArticlePriority > maxKBArticlePriority) {
          maxKBArticlePriority=kbArticlePriority;
        }
      }
      maxKBArticlePriorityMap.put(entry.getKey(),maxKBArticlePriority);
    }
    for (    Map.Entry<String,List<KBArticle>> entry : _newArticlesMap.entrySet()) {
      List<KBArticle> kbArticles=entry.getValue();
      if (kbArticles == null) {
        continue;
      }
      ListUtil.sort(kbArticles,new Comparator<KBArticle>(){
        @Override public int compare(        KBArticle kbArticle1,        KBArticle kbArticle2){
          String urlTitle1=kbArticle1.getUrlTitle();
          String urlTitle2=kbArticle2.getUrlTitle();
          return urlTitle1.compareTo(urlTitle2);
        }
      }
);
      String parentUrlTitle=entry.getKey();
      int size=kbArticles.size();
      for (int i=0; i < size; i++) {
        KBArticle kbArticle=kbArticles.get(i);
        double maxPriority=0.0;
        if (maxKBArticlePriorityMap.containsKey(parentUrlTitle)) {
          maxPriority=maxKBArticlePriorityMap.get(parentUrlTitle);
        }
        maxPriority++;
        maxKBArticlePriorityMap.put(parentUrlTitle,maxPriority);
        KBArticleLocalServiceUtil.updatePriority(kbArticle.getResourcePrimKey(),maxPriority);
      }
    }
  }
}
