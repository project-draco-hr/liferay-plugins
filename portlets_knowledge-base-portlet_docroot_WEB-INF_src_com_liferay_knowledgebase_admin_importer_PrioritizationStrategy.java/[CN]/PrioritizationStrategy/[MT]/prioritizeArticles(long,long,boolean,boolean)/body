{
  if (prioritizeUpdatedArticles) {
    _initNonImportedArticles();
  }
 else {
    _initNewArticles();
  }
  if (prioritizeByNumericalPrefix) {
    Set<String> keySet=_importedUrlTitlesPrioritiesMap.keySet();
    KBArticle article=null;
    long resourcePrimKey=0;
    Double priority=null;
    for (    String key : keySet) {
      article=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(groupId,parentKBFolderId,key);
      resourcePrimKey=article.getResourcePrimKey();
      priority=_importedUrlTitlesPrioritiesMap.get(key);
      KBArticleLocalServiceUtil.updatePriority(resourcePrimKey,priority);
      if (_importedParentArticles != null) {
        if (_importedParentArticles.contains(article)) {
          _importedParentArticles.remove(article);
        }
      }
      if (_importedParentUrlTitles != null) {
        if (_importedParentUrlTitles.contains(key)) {
          _importedParentUrlTitles.remove(key);
        }
      }
      if (_newParentArticles != null) {
        if (_newParentArticles.contains(article)) {
          _newParentArticles.remove(article);
        }
      }
      if (_newParentUrlTitles != null) {
        if (_newParentUrlTitles.contains(key)) {
          _newParentUrlTitles.remove(key);
        }
      }
      Set<String> childArticlesKeySet=_importedChildArticlesMap.keySet();
      for (      String childArticlesKey : childArticlesKeySet) {
        if (_importedChildArticlesMap != null) {
          List<KBArticle> importedChildArticles=_importedChildArticlesMap.get(childArticlesKey);
          if (importedChildArticles.contains(article)) {
            importedChildArticles.remove(article);
          }
          _importedChildArticlesMap.put(childArticlesKey,importedChildArticles);
        }
        if (_importedChildUrlTitlesMap != null) {
          List<String> importedChildArticlesUrlTitles=_importedChildUrlTitlesMap.get(childArticlesKey);
          if (importedChildArticlesUrlTitles.contains(key)) {
            importedChildArticlesUrlTitles.remove(key);
          }
          _importedChildUrlTitlesMap.put(childArticlesKey,importedChildArticlesUrlTitles);
        }
        if (_newChildArticlesMap != null) {
          List<KBArticle> newChildArticles=_newChildArticlesMap.get(childArticlesKey);
          if (newChildArticles == null) {
            continue;
          }
          if (newChildArticles.contains(article)) {
            newChildArticles.remove(article);
          }
          _newChildArticlesMap.put(childArticlesKey,newChildArticles);
        }
        if (_newChildUrlTitlesMap != null) {
          List<String> newChildArticlesUrlTitles=_newChildUrlTitlesMap.get(childArticlesKey);
          if (newChildArticlesUrlTitles == null) {
            continue;
          }
          if (newChildArticlesUrlTitles.contains(key)) {
            newChildArticlesUrlTitles.remove(key);
          }
          _newChildUrlTitlesMap.put(childArticlesKey,newChildArticlesUrlTitles);
        }
      }
    }
  }
  KBArticleComparator comparator=new KBArticleComparator();
  if (prioritizeUpdatedArticles) {
    double maxParentPriority=0.0;
    Map<String,Double> maxChildPriorityMap=new HashMap<String,Double>();
    for (    KBArticle parentArticle : _nonImportedParentArticles) {
      double parentPriority=parentArticle.getPriority();
      if (parentPriority > maxParentPriority) {
        maxParentPriority=parentPriority;
      }
      String parentUrlTitle=parentArticle.getUrlTitle();
      List<KBArticle> childArticles=_nonImportedChildArticlesMap.get(parentUrlTitle);
      if (childArticles == null) {
        continue;
      }
      double maxChildPriority=0.0;
      for (      KBArticle childArticle : childArticles) {
        double childPriority=childArticle.getPriority();
        if (childPriority > maxChildPriority) {
          maxChildPriority=childPriority;
        }
      }
      maxChildPriorityMap.put(parentUrlTitle,maxChildPriority);
    }
    ListUtil.sort(_importedParentUrlTitles);
    int parentSize=_importedParentUrlTitles.size();
    for (int i=0; i < parentSize; i++) {
      KBArticle parentArticle=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(groupId,parentKBFolderId,_importedParentUrlTitles.get(i));
      long parentResourcePrimKey=parentArticle.getResourcePrimKey();
      KBArticleLocalServiceUtil.updatePriority(parentResourcePrimKey,maxParentPriority + 1 + i);
    }
    Set<String> childKeySet=_importedChildArticlesMap.keySet();
    for (    String childKey : childKeySet) {
      List<KBArticle> childArticles=_importedChildArticlesMap.get(childKey);
      if (childArticles != null) {
        ListUtil.sort(childArticles,comparator);
        int childSize=childArticles.size();
        for (int i=0; i < childSize; i++) {
          KBArticle childArticle=childArticles.get(i);
          long childArticleResourcePrimKey=childArticle.getResourcePrimKey();
          Double maxChildArticlePriority=maxChildPriorityMap.get(childKey);
          if (maxChildArticlePriority == null) {
            maxChildArticlePriority=0.0;
          }
          KBArticleLocalServiceUtil.updatePriority(childArticleResourcePrimKey,maxChildArticlePriority + 1 + i);
        }
      }
    }
  }
 else {
    double maxParentPriority=0.0;
    Map<String,Double> maxChildPriorityMap=new HashMap<String,Double>();
    for (    KBArticle parentArticle : _existingParentArticles) {
      double parentPriority=parentArticle.getPriority();
      if (parentPriority > maxParentPriority) {
        maxParentPriority=parentPriority;
      }
      String parentUrlTitle=parentArticle.getUrlTitle();
      List<KBArticle> childArticles=_existingChildArticlesMap.get(parentUrlTitle);
      double maxChildPriority=0.0;
      for (      KBArticle childArticle : childArticles) {
        double childPriority=childArticle.getPriority();
        if (childPriority > maxChildPriority) {
          maxChildPriority=childPriority;
        }
      }
      maxChildPriorityMap.put(parentUrlTitle,maxChildPriority);
    }
    ListUtil.sort(_newParentUrlTitles);
    int parentSize=_newParentUrlTitles.size();
    for (int i=0; i < parentSize; i++) {
      KBArticle parentArticle=KBArticleLocalServiceUtil.getKBArticleByUrlTitle(groupId,parentKBFolderId,_newParentUrlTitles.get(i));
      long parentResourcePrimKey=parentArticle.getResourcePrimKey();
      KBArticleLocalServiceUtil.updatePriority(parentResourcePrimKey,maxParentPriority + 1 + i);
    }
    Set<String> childKeySet=_newChildArticlesMap.keySet();
    for (    String childKey : childKeySet) {
      List<KBArticle> childArticles=_newChildArticlesMap.get(childKey);
      if (childArticles != null) {
        ListUtil.sort(childArticles,comparator);
        int childSize=childArticles.size();
        for (int i=0; i < childSize; i++) {
          KBArticle childArticle=childArticles.get(i);
          long childArticleResourcePrimKey=childArticle.getResourcePrimKey();
          Double maxChildArticlePriority=maxChildPriorityMap.get(childKey);
          if (maxChildArticlePriority == null) {
            maxChildArticlePriority=0.0;
          }
          KBArticleLocalServiceUtil.updatePriority(childArticleResourcePrimKey,maxChildArticlePriority + 1 + i);
        }
      }
    }
  }
}
