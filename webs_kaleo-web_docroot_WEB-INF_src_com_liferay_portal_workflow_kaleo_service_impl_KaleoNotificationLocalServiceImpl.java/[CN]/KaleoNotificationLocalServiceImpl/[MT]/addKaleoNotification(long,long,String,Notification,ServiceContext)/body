{
  User user=userPersistence.findByPrimaryKey(serviceContext.getUserId());
  Date now=new Date();
  long kaleoNotificationId=counterLocalService.increment();
  KaleoNotification kaleoNotification=kaleoNotificationPersistence.create(kaleoNotificationId);
  kaleoNotification.setCompanyId(user.getCompanyId());
  kaleoNotification.setUserId(user.getUserId());
  kaleoNotification.setUserName(user.getFullName());
  kaleoNotification.setCreateDate(now);
  kaleoNotification.setModifiedDate(now);
  kaleoNotification.setKaleoDefinitionId(kaleoDefinitionId);
  kaleoNotification.setKaleoNodeId(kaleoNodeId);
  kaleoNotification.setKaleoNodeName(kaleoNodeName);
  kaleoNotification.setName(notification.getName());
  kaleoNotification.setDescription(notification.getDescription());
  kaleoNotification.setExecutionType(notification.getExecutionType().getValue());
  kaleoNotification.setTemplate(notification.getTemplate());
  kaleoNotification.setTemplateLanguage(notification.getTemplateLanguage().getValue());
  Set<NotificationType> notificationTypes=notification.getNotificationTypes();
  if (!notificationTypes.isEmpty()) {
    StringBundler bundler=new StringBundler(notificationTypes.size() * 2);
    Iterator<NotificationType> itr=notificationTypes.iterator();
    while (itr.hasNext()) {
      NotificationType notificationType=itr.next();
      bundler.append(notificationType.getValue());
      if (itr.hasNext()) {
        bundler.append(StringPool.COMMA);
      }
    }
    kaleoNotification.setNotificationTypes(bundler.toString());
  }
  kaleoNotificationPersistence.update(kaleoNotification,false);
  Set<Recipient> recipients=notification.getRecipients();
  for (  Recipient recipient : recipients) {
    kaleoNotificationRecipientLocalService.addKaleoNotificationRecipient(kaleoNotificationId,recipient,serviceContext);
  }
  return kaleoNotification;
}
