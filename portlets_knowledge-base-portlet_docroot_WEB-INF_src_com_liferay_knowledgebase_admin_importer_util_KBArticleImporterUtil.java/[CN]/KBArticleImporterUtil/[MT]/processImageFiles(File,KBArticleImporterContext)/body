{
  String fileName=importerContext.getFileName();
  if (fileName.contains(StringPool.PERIOD)) {
    fileName=fileName.substring(0,fileName.lastIndexOf(StringPool.PERIOD));
  }
  File tempDir=new File(_TMP_DIR);
  tempDir.mkdir();
  String dirPath=_TMP_DIR + StringPool.SLASH + fileName;
  File fileTempDir=new File(dirPath);
  File fileImagesTempDir=new File(dirPath + StringPool.SLASH + _IMAGES);
  fileTempDir.mkdir();
  fileImagesTempDir.mkdir();
  String namespaceFolderName=StringUtil.toLowerCase(fileName);
  ServiceContext serviceContext=importerContext.getServiceContext();
  Folder imagesFolder=null;
  try {
    KBArticleDLUtil.deleteFolder(namespaceFolderName,serviceContext);
    imagesFolder=KBArticleDLUtil.addFolder(namespaceFolderName,importerContext);
  }
 catch (  Exception e) {
    throw new KBArticleImportException(e);
  }
  ZipReader zipReader=ZipReaderFactoryUtil.getZipReader(zipFile);
  for (  String zipEntry : zipReader.getEntries()) {
    if (!zipEntry.contains(_IMAGES)) {
      continue;
    }
    String zipEntryLower=StringUtil.toLowerCase(zipEntry);
    if (!zipEntryLower.endsWith(".bmp") && !zipEntryLower.endsWith(".gif") && !zipEntryLower.endsWith(".jpeg")&& !zipEntryLower.endsWith(".jpg")&& !zipEntryLower.endsWith(".png")) {
      if (_log.isWarnEnabled()) {
        _log.warn("Unsupported image file suffix used in ZIP file: " + zipEntry);
      }
      continue;
    }
    File picturesFile=new File(dirPath + StringPool.SLASH + zipEntry);
    if (picturesFile.isDirectory()) {
      continue;
    }
    try {
      FileUtil.write(picturesFile,zipReader.getEntryAsInputStream(zipEntry));
      KBArticleDLUtil.addFile(imagesFolder,picturesFile,importerContext);
    }
 catch (    Exception e) {
      StringBuffer sb=new StringBuffer("Unable to import image file: ");
      sb.append(zipEntry);
      sb.append(". ");
      sb.append(e.getLocalizedMessage());
      throw new KBArticleImportException(sb.toString());
    }
  }
  fileImagesTempDir.delete();
  fileTempDir.delete();
  tempDir.delete();
}
