{
  sleep(45);
  SSHClient sshClient=new SSHClient();
  sshClient.addHostKeyVerifier(new PromiscuousVerifier());
  sshClient.setTimeout(Integer.parseInt(properties.getProperty("ssh.timeout")) * 1000);
  sshClient.useCompression();
  System.out.println("Connecting via SSH to " + _publicIpAddress);
  sshClient.connect(_publicIpAddress);
  FileKeyProvider fileKeyProvider=new PKCS8KeyFile();
  fileKeyProvider.init(new File(getKeyFileName()));
  sshClient.authPublickey(properties.getProperty("ssh.username"),fileKeyProvider);
  try {
    Set<String> keys=_provisioners.keySet();
    for (    String key : keys) {
      String provisioner=_provisioners.get(key);
      if (key.contains("shell.inline")) {
        executeSessionCommand(sshClient,provisioner);
      }
 else       if (key.contains("shell.script")) {
        String shellScriptFileName=null;
        if (provisioner.startsWith(File.separator)) {
          shellScriptFileName=provisioner;
        }
 else {
          shellScriptFileName=_baseDirName + File.separator + provisioner;
        }
        executeScript(sshClient,shellScriptFileName);
      }
 else {
        JSONObject jsonObject=new JSONObject(provisioner);
        String fileName=null;
        String src=jsonObject.getString("src");
        if (src.startsWith(File.separator)) {
          fileName=src;
        }
 else {
          fileName=_baseDirName + File.separator + jsonObject.getString("src");
        }
        uploadFile(sshClient,fileName,jsonObject.getString("dest"));
      }
    }
  }
  finally {
    sshClient.disconnect();
  }
}
