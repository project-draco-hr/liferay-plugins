{
  ProcessInstance processInstance=taskInstance.getProcessInstance();
  ProcessDefinition processDefinition=processInstance.getProcessDefinition();
  Token token=taskInstance.getToken();
  Set<PooledActor> pooledActors=taskInstance.getPooledActors();
  if ((pooledActors != null) && !pooledActors.isEmpty()) {
    PooledActor pooledActor=pooledActors.iterator().next();
    setAssigneeRoleId(GetterUtil.getLong(pooledActor.getActorId()));
  }
  if (Validator.isEmailAddress(taskInstance.getActorId())) {
    setAssigneeEmailAddress(taskInstance.getActorId());
  }
 else {
    setAssigneeUserId(GetterUtil.getLong(taskInstance.getActorId()));
  }
  setAsynchronous(!taskInstance.isBlocking());
  setCompletionDate(taskInstance.getEnd());
  setCreateDate(taskInstance.getCreate());
  setDescription(taskInstance.getDescription());
  setDueDate(taskInstance.getDueDate());
  setName(taskInstance.getName());
  Map<String,Serializable> optionalAttributes=new HashMap<String,Serializable>();
  Map<String,Object> objectValues=taskInstance.getVariables();
  for (  Map.Entry<String,Object> objectValue : objectValues.entrySet()) {
    optionalAttributes.put(objectValue.getKey(),(Serializable)objectValue.getValue());
  }
  setOptionalAttributes(optionalAttributes);
  setWorkflowDefinitionId(processDefinition.getId());
  setWorkflowDefinitionName(processDefinition.getName());
  setWorkflowDefinitionVersion(processDefinition.getVersion());
  setWorkflowInstanceId(token.getId());
  setWorkflowTaskId(taskInstance.getId());
}
