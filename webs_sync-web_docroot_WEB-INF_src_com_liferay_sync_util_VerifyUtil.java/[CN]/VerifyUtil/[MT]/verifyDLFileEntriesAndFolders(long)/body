{
  _dlFoldersAndFileEntriesCount=0;
  ActionableDynamicQuery dlFolderActionableDynamicQuery=DLFolderLocalServiceUtil.getActionableDynamicQuery();
  dlFolderActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      Property mountPointProperty=PropertyFactoryUtil.forName("mountPoint");
      dynamicQuery.add(mountPointProperty.eq(false));
      Property statusProperty=PropertyFactoryUtil.forName("status");
      int[] workflowConstants=new int[]{WorkflowConstants.STATUS_APPROVED,WorkflowConstants.STATUS_IN_TRASH};
      dynamicQuery.add(statusProperty.in(workflowConstants));
    }
  }
);
  dlFolderActionableDynamicQuery.setGroupId(groupId);
  dlFolderActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<DLFolder>(){
    @Override public void performAction(    DLFolder dlFolder) throws PortalException {
      _dlFoldersAndFileEntriesCount++;
      logCount(_dlFoldersAndFileEntriesCount,_dlFoldersAndFileEntriesTotalCount,"DL folders and DL file entries");
      if (!SyncUtil.isSupportedFolder(dlFolder)) {
        return;
      }
      try {
        SyncDLObject syncDLObject=SyncDLObjectLocalServiceUtil.fetchSyncDLObject(SyncConstants.TYPE_FOLDER,dlFolder.getFolderId());
        Date modifiedDate=dlFolder.getModifiedDate();
        if ((syncDLObject != null) && (syncDLObject.getModifiedTime() >= modifiedDate.getTime())) {
          return;
        }
        if (dlFolder.getStatus() == WorkflowConstants.STATUS_APPROVED) {
          addSyncDLObject(SyncUtil.toSyncDLObject(dlFolder,SyncConstants.EVENT_ADD));
        }
 else {
          addSyncDLObject(SyncUtil.toSyncDLObject(dlFolder,SyncConstants.EVENT_TRASH));
        }
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  }
);
  ActionableDynamicQuery dlFileEntryActionableDynamicQuery=DLFileEntryLocalServiceUtil.getActionableDynamicQuery();
  dlFileEntryActionableDynamicQuery.setGroupId(groupId);
  dlFileEntryActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<DLFileEntry>(){
    @Override public void performAction(    DLFileEntry dlFileEntry) throws PortalException {
      _dlFoldersAndFileEntriesCount++;
      logCount(_dlFoldersAndFileEntriesCount,_dlFoldersAndFileEntriesTotalCount,"DL folders and DL file entries");
      if ((dlFileEntry.getStatus() != WorkflowConstants.STATUS_APPROVED) && (dlFileEntry.getStatus() != WorkflowConstants.STATUS_IN_TRASH)) {
        return;
      }
      try {
        SyncDLObject fileEntrySyncDLObject=SyncDLObjectLocalServiceUtil.fetchSyncDLObject(SyncConstants.TYPE_FILE,dlFileEntry.getFileEntryId());
        Date modifiedDate=dlFileEntry.getModifiedDate();
        if ((fileEntrySyncDLObject != null) && (fileEntrySyncDLObject.getModifiedTime() >= modifiedDate.getTime())) {
          return;
        }
        String event=null;
        if (dlFileEntry.getStatus() == WorkflowConstants.STATUS_APPROVED) {
          event=SyncConstants.EVENT_ADD;
        }
 else {
          event=SyncConstants.EVENT_TRASH;
        }
        if (dlFileEntry.isCheckedOut()) {
          SyncDLObject approvedFileEntrySyncDLObject=SyncUtil.toSyncDLObject(dlFileEntry,event,true,true);
          addSyncDLObject(approvedFileEntrySyncDLObject);
        }
        fileEntrySyncDLObject=SyncUtil.toSyncDLObject(dlFileEntry,event,true);
        addSyncDLObject(fileEntrySyncDLObject);
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  }
);
  _dlFoldersAndFileEntriesTotalCount=dlFolderActionableDynamicQuery.performCount() + dlFileEntryActionableDynamicQuery.performCount();
  dlFolderActionableDynamicQuery.performActions();
  dlFileEntryActionableDynamicQuery.performActions();
  logCount(_dlFoldersAndFileEntriesCount,_dlFoldersAndFileEntriesTotalCount,"DL folders and DL file entries");
}
