{
  if (_methodName0.equals(name) && Arrays.deepEquals(_methodParameterTypes0,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.addSVNRepository((com.liferay.socialcoding.model.SVNRepository)arguments[0]);
  }
  if (_methodName1.equals(name) && Arrays.deepEquals(_methodParameterTypes1,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.createSVNRepository(((Long)arguments[0]).longValue());
  }
  if (_methodName2.equals(name) && Arrays.deepEquals(_methodParameterTypes2,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.deleteSVNRepository(((Long)arguments[0]).longValue());
  }
  if (_methodName3.equals(name) && Arrays.deepEquals(_methodParameterTypes3,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.deleteSVNRepository((com.liferay.socialcoding.model.SVNRepository)arguments[0]);
  }
  if (_methodName4.equals(name) && Arrays.deepEquals(_methodParameterTypes4,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.dynamicQuery();
  }
  if (_methodName5.equals(name) && Arrays.deepEquals(_methodParameterTypes5,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.dynamicQuery((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0]);
  }
  if (_methodName6.equals(name) && Arrays.deepEquals(_methodParameterTypes6,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.dynamicQuery((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0],((Integer)arguments[1]).intValue(),((Integer)arguments[2]).intValue());
  }
  if (_methodName7.equals(name) && Arrays.deepEquals(_methodParameterTypes7,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.dynamicQuery((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0],((Integer)arguments[1]).intValue(),((Integer)arguments[2]).intValue(),(com.liferay.portal.kernel.util.OrderByComparator)arguments[3]);
  }
  if (_methodName8.equals(name) && Arrays.deepEquals(_methodParameterTypes8,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.dynamicQueryCount((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0]);
  }
  if (_methodName9.equals(name) && Arrays.deepEquals(_methodParameterTypes9,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.fetchSVNRepository(((Long)arguments[0]).longValue());
  }
  if (_methodName10.equals(name) && Arrays.deepEquals(_methodParameterTypes10,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.getSVNRepository(((Long)arguments[0]).longValue());
  }
  if (_methodName11.equals(name) && Arrays.deepEquals(_methodParameterTypes11,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.getPersistedModel((java.io.Serializable)arguments[0]);
  }
  if (_methodName12.equals(name) && Arrays.deepEquals(_methodParameterTypes12,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.getSVNRepositories(((Integer)arguments[0]).intValue(),((Integer)arguments[1]).intValue());
  }
  if (_methodName13.equals(name) && Arrays.deepEquals(_methodParameterTypes13,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.getSVNRepositoriesCount();
  }
  if (_methodName14.equals(name) && Arrays.deepEquals(_methodParameterTypes14,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.updateSVNRepository((com.liferay.socialcoding.model.SVNRepository)arguments[0]);
  }
  if (_methodName15.equals(name) && Arrays.deepEquals(_methodParameterTypes15,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.updateSVNRepository((com.liferay.socialcoding.model.SVNRepository)arguments[0],((Boolean)arguments[1]).booleanValue());
  }
  if (_methodName58.equals(name) && Arrays.deepEquals(_methodParameterTypes58,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.getBeanIdentifier();
  }
  if (_methodName59.equals(name) && Arrays.deepEquals(_methodParameterTypes59,parameterTypes)) {
    SVNRepositoryLocalServiceUtil.setBeanIdentifier((java.lang.String)arguments[0]);
  }
  if (_methodName64.equals(name) && Arrays.deepEquals(_methodParameterTypes64,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.getSVNRepository(((Long)arguments[0]).longValue());
  }
  if (_methodName65.equals(name) && Arrays.deepEquals(_methodParameterTypes65,parameterTypes)) {
    return SVNRepositoryLocalServiceUtil.getSVNRepository((java.lang.String)arguments[0]);
  }
  if (_methodName66.equals(name) && Arrays.deepEquals(_methodParameterTypes66,parameterTypes)) {
    SVNRepositoryLocalServiceUtil.updateSVNRepository((java.lang.String)arguments[0]);
  }
  throw new UnsupportedOperationException();
}
