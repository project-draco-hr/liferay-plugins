{
  List<Assignee> assignees=new ArrayList<Assignee>();
  if ((pooledActors != null) && !pooledActors.isEmpty()) {
    for (    PooledActor pooledActor : pooledActors) {
      Role role=null;
      if (Validator.isNumber(pooledActor.getActorId())) {
        role=RoleLocalServiceUtil.getRole(GetterUtil.getLong(pooledActor.getActorId()));
      }
 else {
        ServiceContext serviceContext=new ServiceContext();
        serviceContext.setCompanyId(companyId);
        role=RoleRetrievalUtil.getRole(pooledActor.getActorId(),RoleConstants.TYPE_REGULAR,true,serviceContext);
      }
      Assignee assignee=new Assignee(companyId,groupId,Role.class.getName(),role.getRoleId());
      assignees.add(assignee);
    }
  }
 else {
    User user=null;
    if (Validator.isEmailAddress(actorId)) {
      user=UserLocalServiceUtil.getUserByEmailAddress(companyId,actorId);
    }
 else {
      user=UserLocalServiceUtil.getUser(GetterUtil.getLong(actorId));
    }
    Assignee assignee=new Assignee(companyId,groupId,User.class.getName(),user.getUserId());
    assignees.add(assignee);
  }
  return assignees;
}
