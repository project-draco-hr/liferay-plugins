{
  String command=message.getString("command");
  if (!command.equals("deploy")) {
    return;
  }
  String servletContextName=message.getString("servletContextName");
  ServletContext servletContext=ServletContextPool.get(servletContextName);
  URL resourcesDirURL=servletContext.getResource(_RESOURCES_DIR);
  if (resourcesDirURL == null) {
    return;
  }
  String layoutSetPrototypeName=TextFormatter.format(servletContextName,TextFormatter.J);
  Set<String> resourcePaths=servletContext.getResourcePaths(_RESOURCES_DIR);
  URL larURL=servletContext.getResource(_RESOURCES_DIR.concat("archive.lar"));
  List<Company> companies=CompanyLocalServiceUtil.getCompanies();
  for (  Company company : companies) {
    if (hasLayoutSetPrototype(company.getCompanyId(),layoutSetPrototypeName)) {
      if (_log.isInfoEnabled()) {
        _log.info("Layout set prototype already exists for company " + company.getWebId());
      }
      continue;
    }
    long companyId=CompanyThreadLocal.getCompanyId();
    try {
      CompanyThreadLocal.setCompanyId(company.getCompanyId());
      Importer importer=null;
      if (larURL != null) {
        LARImporter larImporter=getLARImporter();
        URLConnection urlConnection=larURL.openConnection();
        larImporter.setLARInputStream(urlConnection.getInputStream());
        importer=larImporter;
      }
 else       if ((resourcePaths != null) && (!resourcePaths.isEmpty()) && (larURL == null)) {
        importer=getResourceImporter();
        importer.setResourcesDir(_RESOURCES_DIR);
      }
 else {
        Properties pluginProperties=getPluginProperties(servletContext);
        String resourcesDir=pluginProperties.getProperty("resources-importer-external-dir");
        if (Validator.isNotNull(resourcesDir)) {
          importer=getFileSystemImporter();
          importer.setResourcesDir(resourcesDir);
        }
      }
      if (importer == null) {
        Message newMessage=new Message();
        newMessage.put("companyId",company.getCompanyId());
        newMessage.put("layoutSetPrototypeId",0);
        newMessage.put("servletContextName",servletContextName);
        newMessage.put("error","no valid importer found");
        MessageBusUtil.sendMessage("liferay/resources_importer",newMessage);
        return;
      }
      importer.setCompanyId(company.getCompanyId());
      Map<Locale,String> layoutSetPrototypeNameMap=new HashMap<Locale,String>();
      Locale locale=LocaleUtil.getDefault();
      layoutSetPrototypeNameMap.put(locale,layoutSetPrototypeName);
      importer.setLayoutSetPrototypeNameMap(layoutSetPrototypeNameMap);
      importer.setServletContext(servletContext);
      importer.setServletContextName(servletContextName);
      importer.afterPropertiesSet();
      if (_log.isInfoEnabled()) {
        _log.info("Importing resources from " + servletContextName + " to group "+ importer.getGroupId());
      }
      importer.importResources();
      Message newMessage=new Message();
      newMessage.put("companyId",company.getCompanyId());
      newMessage.put("layoutSetPrototypeId",importer.getLayoutSetPrototypeId());
      newMessage.put("servletContextName",servletContextName);
      MessageBusUtil.sendMessage("liferay/resources_importer",newMessage);
    }
  finally {
      CompanyThreadLocal.setCompanyId(companyId);
    }
  }
}
