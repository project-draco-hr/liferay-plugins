{
  if ((resourcePrimKeies != null) && (resourcePrimKeies.length == 1)) {
    return findByR_G_L(resourcePrimKeies[0],groupId,latest,start,end,orderByComparator);
  }
  boolean pagination=true;
  Object[] finderArgs=null;
  if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) {
    pagination=false;
    finderArgs=new Object[]{StringUtil.merge(resourcePrimKeies),groupId,latest};
  }
 else {
    finderArgs=new Object[]{StringUtil.merge(resourcePrimKeies),groupId,latest,start,end,orderByComparator};
  }
  List<KBArticle> list=(List<KBArticle>)FinderCacheUtil.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_R_G_L,finderArgs,this);
  if ((list != null) && !list.isEmpty()) {
    for (    KBArticle kbArticle : list) {
      if (!ArrayUtil.contains(resourcePrimKeies,kbArticle.getResourcePrimKey()) || (groupId != kbArticle.getGroupId()) || (latest != kbArticle.getLatest())) {
        list=null;
        break;
      }
    }
  }
  if (list == null) {
    StringBundler query=new StringBundler();
    query.append(_SQL_SELECT_KBARTICLE_WHERE);
    boolean conjunctionable=false;
    if ((resourcePrimKeies == null) || (resourcePrimKeies.length > 0)) {
      if (conjunctionable) {
        query.append(WHERE_AND);
      }
      query.append(StringPool.OPEN_PARENTHESIS);
      for (int i=0; i < resourcePrimKeies.length; i++) {
        query.append(_FINDER_COLUMN_R_G_L_RESOURCEPRIMKEY_5);
        if ((i + 1) < resourcePrimKeies.length) {
          query.append(WHERE_OR);
        }
      }
      query.append(StringPool.CLOSE_PARENTHESIS);
      conjunctionable=true;
    }
    if (conjunctionable) {
      query.append(WHERE_AND);
    }
    query.append(_FINDER_COLUMN_R_G_L_GROUPID_5);
    conjunctionable=true;
    if (conjunctionable) {
      query.append(WHERE_AND);
    }
    query.append(_FINDER_COLUMN_R_G_L_LATEST_5);
    conjunctionable=true;
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else     if (pagination) {
      query.append(KBArticleModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (resourcePrimKeies != null) {
        qPos.add(resourcePrimKeies);
      }
      qPos.add(groupId);
      qPos.add(latest);
      if (!pagination) {
        list=(List<KBArticle>)QueryUtil.list(q,getDialect(),start,end,false);
        Collections.sort(list);
        list=new UnmodifiableList<KBArticle>(list);
      }
 else {
        list=(List<KBArticle>)QueryUtil.list(q,getDialect(),start,end);
      }
      cacheResult(list);
      FinderCacheUtil.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_R_G_L,finderArgs,list);
    }
 catch (    Exception e) {
      FinderCacheUtil.removeResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_R_G_L,finderArgs);
      throw processException(e);
    }
 finally {
      closeSession(session);
    }
  }
  return list;
}
