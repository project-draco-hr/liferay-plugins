{
  if (targetClassName.equals(LayoutSetPrototype.class.getName())) {
    privateLayout=true;
  }
  Map<Locale,String> nameMap=getMap(layoutJSONObject,"name",true);
  Map<Locale,String> titleMap=getMap(layoutJSONObject,"title",true);
  String type=GetterUtil.getString(layoutJSONObject.getString("type"),LayoutConstants.TYPE_PORTLET);
  String typeSettings=layoutJSONObject.getString("typeSettings");
  boolean hidden=layoutJSONObject.getBoolean("hidden");
  Map<Locale,String> friendlyURLMap=new HashMap<Locale,String>();
  String friendlyURL=layoutJSONObject.getString("friendlyURL");
  if (Validator.isNotNull(friendlyURL) && !friendlyURL.startsWith(StringPool.SLASH)) {
    friendlyURL=StringPool.SLASH + friendlyURL;
  }
  friendlyURLMap.put(LocaleUtil.getDefault(),friendlyURL);
  Layout layout=LayoutLocalServiceUtil.addLayout(userId,groupId,privateLayout,parentLayoutId,nameMap,titleMap,null,null,null,type,typeSettings,hidden,friendlyURLMap,serviceContext);
  LayoutTypePortlet layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
  String layoutTemplateId=layoutJSONObject.getString("layoutTemplateId",_defaultLayoutTemplateId);
  if (Validator.isNotNull(layoutTemplateId)) {
    layoutTypePortlet.setLayoutTemplateId(userId,layoutTemplateId,false);
  }
  JSONArray columnsJSONArray=layoutJSONObject.getJSONArray("columns");
  addLayoutColumns(layout,LayoutTypePortletConstants.COLUMN_PREFIX,columnsJSONArray);
  LayoutLocalServiceUtil.updateLayout(groupId,layout.isPrivateLayout(),layout.getLayoutId(),layout.getTypeSettings());
  JSONArray layoutsJSONArray=layoutJSONObject.getJSONArray("layouts");
  addLayouts(privateLayout,layout.getLayoutId(),layoutsJSONArray);
}
