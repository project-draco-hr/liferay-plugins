{
  Date now=new Date();
  User user=UserLocalServiceUtil.getUserById(userId);
  long kbFeedbackEntryId=CounterLocalServiceUtil.increment();
  KBFeedbackEntry kbFeedbackEntry=kbFeedbackEntryPersistence.create(kbFeedbackEntryId);
  kbFeedbackEntry.setArticleId(articleId);
  kbFeedbackEntry.setCreateDate(now);
  kbFeedbackEntry.setComments(comments);
  kbFeedbackEntry.setModifiedDate(now);
  kbFeedbackEntry.setScore(score);
  kbFeedbackEntry.setUserId(userId);
  kbFeedbackEntry.setUserName(user.getFullName());
  kbFeedbackEntry.setVote(vote);
  kbFeedbackEntryPersistence.update(kbFeedbackEntry,false);
  KBFeedbackStats kbFeedbackStats=kbFeedbackStatsLocalService.getArticleKBFeedbackStats(articleId);
  int totalScoreEntries=kbFeedbackStats.getTotalScoreEntries();
  int totalVotes=kbFeedbackStats.getTotalVotes();
  int yesVotes=kbFeedbackStats.getYesVotes();
  double averageScore=kbFeedbackStats.getAverageScore();
  double totalScore=averageScore * totalScoreEntries;
  if (score != 0) {
    totalScoreEntries=totalScoreEntries + 1;
  }
  averageScore=(totalScore + score) / totalScoreEntries;
  if (vote == 1) {
    yesVotes++;
  }
  if (vote != 0) {
    totalVotes++;
  }
  kbFeedbackStats.setAverageScore(averageScore);
  kbFeedbackStats.setTotalScoreEntries(totalScoreEntries);
  kbFeedbackStats.setTotalVotes(totalVotes);
  kbFeedbackStats.setYesVotes(yesVotes);
  kbFeedbackStatsPersistence.update(kbFeedbackStats,false);
  return kbFeedbackEntry;
}
