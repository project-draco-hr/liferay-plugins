{
  KBFeedbackEntry feedbackEntry=null;
  try {
    Date now=new Date();
    feedbackEntry=kbFeedbackEntryPersistence.findByA_U(articleResourcePrimKey,userId);
    double oldScore=feedbackEntry.getScore();
    feedbackEntry.setModifiedDate(now);
    feedbackEntry.setScore(score);
    kbFeedbackEntryPersistence.update(feedbackEntry,false);
    KBFeedbackStats feedbackStats=kbFeedbackStatsLocalService.getArticleFeedbackStats(articleResourcePrimKey);
    int totalScoreEntries=feedbackStats.getTotalScoreEntries();
    double averageScore=feedbackStats.getAverageScore();
    double scoreDifference=score - oldScore;
    double totalScore=averageScore * totalScoreEntries;
    if ((oldScore == 0) && (score != 0)) {
      totalScoreEntries=totalScoreEntries + 1;
    }
    if (oldScore != score) {
      averageScore=(totalScore + scoreDifference) / totalScoreEntries;
    }
    feedbackStats.setAverageScore(averageScore);
    feedbackStats.setTotalScoreEntries(totalScoreEntries);
    kbFeedbackStatsPersistence.update(feedbackStats,false);
  }
 catch (  NoSuchFeedbackEntryException nsfee) {
    feedbackEntry=addFeedbackEntry(articleResourcePrimKey,userId,score,0,StringPool.BLANK);
  }
  return feedbackEntry;
}
