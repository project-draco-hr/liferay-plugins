{
  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
  String methodName=method.getName();
  URL bindingURL=(URL)args[0];
  int x=methodName.indexOf("_v2_") + 4;
  int y=methodName.lastIndexOf("_Service");
  String serviceName=methodName.substring(x,y);
  StringBundler sb=new StringBundler(7);
  sb.append(_OASIS_PACKAGE);
  sb.append(_version);
  sb.append(".bind.WSRP_");
  sb.append(_version);
  sb.append(StringPool.UNDERLINE);
  sb.append(serviceName);
  sb.append("_Binding_SOAPStub");
  Class<?> clazz=classLoader.loadClass(sb.toString());
  args=new Object[]{bindingURL,getService()};
  Object stub=ConstructorUtils.invokeConstructor(clazz,args);
  sb=new StringBundler(5);
  sb.append("getWSRP_");
  sb.append(_version);
  sb.append(StringPool.UNDERLINE);
  sb.append(serviceName);
  sb.append("_ServiceWSDDServiceName");
  Object serviceWSDDServiceName=MethodUtils.invokeMethod(_serviceLocator,sb.toString(),null);
  MethodUtils.invokeMethod(stub,"setPortName",serviceWSDDServiceName);
  if (_v2) {
    return stub;
  }
 else {
    sb=new StringBundler(4);
    sb.append(_OASIS_PACKAGE);
    sb.append("v2.intf.WSRP_v2_");
    sb.append(serviceName);
    sb.append("_PortType");
    Class<?> proxyInterface=classLoader.loadClass(sb.toString());
    sb=new StringBundler(3);
    sb.append(_WSRP_PROXY_PACKAGE);
    sb.append(serviceName);
    sb.append("ServiceHandler");
    clazz=classLoader.loadClass(sb.toString());
    InvocationHandler invocationHandler=(InvocationHandler)ConstructorUtils.invokeConstructor(clazz,stub);
    return Proxy.newProxyInstance(ServiceHandler.class.getClassLoader(),new Class[]{proxyInterface},invocationHandler);
  }
}
