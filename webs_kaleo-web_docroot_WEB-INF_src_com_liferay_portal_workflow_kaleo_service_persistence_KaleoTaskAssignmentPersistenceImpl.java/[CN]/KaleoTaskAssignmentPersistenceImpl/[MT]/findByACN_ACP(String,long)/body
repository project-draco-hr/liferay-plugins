{
  Object[] finderArgs=new Object[]{assigneeClassName,new Long(assigneeClassPK)};
  List<KaleoTaskAssignment> list=(List<KaleoTaskAssignment>)FinderCacheUtil.getResult(FINDER_PATH_FIND_BY_ACN_ACP,finderArgs,this);
  if (list == null) {
    Session session=null;
    try {
      session=openSession();
      StringBundler query=new StringBundler(4);
      query.append(_SQL_SELECT_KALEOTASKASSIGNMENT_WHERE);
      if (assigneeClassName == null) {
        query.append(_FINDER_COLUMN_ACN_ACP_ASSIGNEECLASSNAME_1);
      }
 else {
        if (assigneeClassName.equals(StringPool.BLANK)) {
          query.append(_FINDER_COLUMN_ACN_ACP_ASSIGNEECLASSNAME_3);
        }
 else {
          query.append(_FINDER_COLUMN_ACN_ACP_ASSIGNEECLASSNAME_2);
        }
      }
      query.append(_FINDER_COLUMN_ACN_ACP_ASSIGNEECLASSPK_2);
      query.append(KaleoTaskAssignmentModelImpl.ORDER_BY_JPQL);
      String sql=query.toString();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (assigneeClassName != null) {
        qPos.add(assigneeClassName);
      }
      qPos.add(assigneeClassPK);
      list=q.list();
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (list == null) {
        list=new ArrayList<KaleoTaskAssignment>();
      }
      cacheResult(list);
      FinderCacheUtil.putResult(FINDER_PATH_FIND_BY_ACN_ACP,finderArgs,list);
      closeSession(session);
    }
  }
  return list;
}
