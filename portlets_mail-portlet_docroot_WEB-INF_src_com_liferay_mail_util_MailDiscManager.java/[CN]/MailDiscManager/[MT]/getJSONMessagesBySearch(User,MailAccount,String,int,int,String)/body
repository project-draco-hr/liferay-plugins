{
  String folderPath=getFolderPath(user,mailAccount,folderName);
  String folderFilepath=getFolderFilepath(user,mailAccount,folderName);
  try {
    JSONObject jsonFolderObj=new JSONObject(FileUtil.read(folderFilepath));
    String[] messageUids=FileUtil.listDirs(folderPath);
    List matchingMessageUids=new ArrayList();
    for (    String messageUid : messageUids) {
      String messageFilepath=getMessageFilepath(user,mailAccount,folderName,messageUid);
      String jsonString=FileUtil.read(messageFilepath);
      if (jsonString.indexOf(searchString) != -1) {
        matchingMessageUids.add(messageUid);
      }
    }
    int messageCount=matchingMessageUids.size();
    int begin=(messageCount + 1) - (messagesPerPage * pageNumber);
    int end=messageCount - (messagesPerPage * (pageNumber - 1)) - 1;
    if (begin < 0) {
      begin=0;
    }
    double pageCount=Math.ceil((double)messageCount / messagesPerPage);
    JSONObject jsonObj=new JSONObject();
    JSONArray jsonArray=new JSONArray();
    JSONUtil.put(jsonObj,"messages",jsonArray);
    JSONUtil.put(jsonObj,"messageCount",messageCount);
    JSONUtil.put(jsonObj,"messagesPerPage",messagesPerPage);
    JSONUtil.put(jsonObj,"pageCount",(int)pageCount);
    JSONUtil.put(jsonObj,"pageNumber",pageNumber);
    for (int i=begin; i <= end; i++) {
      jsonArray.put(getJSONMessageByUid(user,mailAccount,folderName,matchingMessageUids.get(i).toString()));
    }
    return jsonObj;
  }
 catch (  IOException ioe) {
    _log.error(ioe,ioe);
  }
catch (  JSONException jsone) {
    _log.error(jsone,jsone);
  }
  return null;
}
