{
  Object[] finderArgs=new Object[]{userId,address};
  Object result=null;
  if (retrieveFromCache) {
    result=FinderCacheUtil.getResult(FINDER_PATH_FETCH_BY_U_A,finderArgs,this);
  }
  if (result instanceof Account) {
    Account account=(Account)result;
    if ((userId != account.getUserId()) || !Validator.equals(address,account.getAddress())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(4);
    query.append(_SQL_SELECT_ACCOUNT_WHERE);
    query.append(_FINDER_COLUMN_U_A_USERID_2);
    if (address == null) {
      query.append(_FINDER_COLUMN_U_A_ADDRESS_1);
    }
 else {
      if (address.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_U_A_ADDRESS_3);
      }
 else {
        query.append(_FINDER_COLUMN_U_A_ADDRESS_2);
      }
    }
    query.append(AccountModelImpl.ORDER_BY_JPQL);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(userId);
      if (address != null) {
        qPos.add(address);
      }
      List<Account> list=q.list();
      result=list;
      Account account=null;
      if (list.isEmpty()) {
        FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_U_A,finderArgs,list);
      }
 else {
        account=list.get(0);
        cacheResult(account);
        if ((account.getUserId() != userId) || (account.getAddress() == null) || !account.getAddress().equals(address)) {
          FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_U_A,finderArgs,account);
        }
      }
      return account;
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (result == null) {
        FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_U_A,finderArgs);
      }
      closeSession(session);
    }
  }
 else {
    if (result instanceof List<?>) {
      return null;
    }
 else {
      return (Account)result;
    }
  }
}
