{
  if (isEscapedModel()) {
    return (WorkflowTask)this;
  }
 else {
    WorkflowTask model=new WorkflowTaskImpl();
    model.setNew(isNew());
    model.setEscapedModel(true);
    model.setWorkflowTaskId(getWorkflowTaskId());
    model.setCompanyId(getCompanyId());
    model.setCreateDate(getCreateDate());
    model.setFriendlyId(HtmlUtil.escape(getFriendlyId()));
    model.setWorkflowDefinitionId(getWorkflowDefinitionId());
    model.setWorkflowDefinitionName(HtmlUtil.escape(getWorkflowDefinitionName()));
    model.setWorkflowDefinitionVersion(getWorkflowDefinitionVersion());
    model.setWorkflowInstanceId(getWorkflowInstanceId());
    model.setMetaName(HtmlUtil.escape(getMetaName()));
    model.setRelation(HtmlUtil.escape(getRelation()));
    model.setDueDate(getDueDate());
    model.setCompletionDate(getCompletionDate());
    model.setCompleted(getCompleted());
    model.setState(getState());
    model.setPriority(getPriority());
    model.setAsynchronous(getAsynchronous());
    model.setTaskName(HtmlUtil.escape(getTaskName()));
    model.setDescription(HtmlUtil.escape(getDescription()));
    model.setAssigneeUserId(getAssigneeUserId());
    model.setAssigneeUserName(HtmlUtil.escape(getAssigneeUserName()));
    model.setAssigneeGroupId(getAssigneeGroupId());
    model.setAssigneeGroupName(HtmlUtil.escape(getAssigneeGroupName()));
    model.setAssigneeRoleId(getAssigneeRoleId());
    model.setAssigneeRoleName(HtmlUtil.escape(getAssigneeRoleName()));
    model=(WorkflowTask)Proxy.newProxyInstance(WorkflowTask.class.getClassLoader(),new Class[]{WorkflowTask.class},new ReadOnlyBeanHandler(model));
    return model;
  }
}
