{
  StringBundler sb=new StringBundler(3);
  sb.append(StringPool.SLASH);
  sb.append(parentSyncDLObject.getTypePK());
  sb.append(StringPool.SLASH);
  final String searchTreePath=sb.toString();
  ActionableDynamicQuery syncDLObjectActionableDynamicQuery=getActionableDynamicQuery();
  syncDLObjectActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      StringBundler sb=new StringBundler(3);
      sb.append(StringPool.PERCENT);
      sb.append(searchTreePath);
      sb.append(StringPool.PERCENT);
      dynamicQuery.add(RestrictionsFactoryUtil.like("treePath",sb.toString()));
    }
  }
);
  syncDLObjectActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<SyncDLObject>(){
    @Override public void performAction(    SyncDLObject dependentSyncDLObject) throws PortalException {
      String treePath=dependentSyncDLObject.getTreePath();
      String oldParentTreePath=treePath.substring(0,treePath.indexOf(searchTreePath) + searchTreePath.length());
      treePath=StringUtil.replaceFirst(treePath,oldParentTreePath,parentSyncDLObject.getTreePath());
      dependentSyncDLObject.setUserId(parentSyncDLObject.getUserId());
      dependentSyncDLObject.setUserName(parentSyncDLObject.getUserName());
      dependentSyncDLObject.setTreePath(treePath);
      syncDLObjectPersistence.update(dependentSyncDLObject);
    }
  }
);
  syncDLObjectActionableDynamicQuery.performActions();
}
