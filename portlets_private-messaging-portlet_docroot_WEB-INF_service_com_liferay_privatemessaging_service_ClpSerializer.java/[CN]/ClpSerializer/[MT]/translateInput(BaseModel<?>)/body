{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals(UserThreadClp.class.getName())) {
    UserThreadClp oldCplModel=(UserThreadClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.privatemessaging.model.impl.UserThreadImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setUserThreadId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getUserThreadId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getUserId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setMbThreadId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getMbThreadId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setRead",new Class[]{Boolean.TYPE});
        Boolean value3=new Boolean(oldCplModel.getRead());
        method3.invoke(newModel,value3);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
