{
  boolean jsonWebServiceMethodsPresent=false;
  ClassWriter classWriter=new ClassWriter(ClassWriter.COMPUTE_FRAMES);
  String alloyControllerInvokerClassBinaryName=getClassBinaryName(alloyControllerInvokerClassName);
  String baseAlloyControllerInvokerClassBinaryName=getClassBinaryName(BaseAlloyControllerInvokerImpl.class.getName());
  classWriter.visit(Opcodes.V1_5,Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER,alloyControllerInvokerClassBinaryName,null,baseAlloyControllerInvokerClassBinaryName,null);
  MethodVisitor methodVisitor=classWriter.visitMethod(Opcodes.ACC_PUBLIC,"<init>","()V",null,null);
  methodVisitor.visitCode();
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,baseAlloyControllerInvokerClassBinaryName,"<init>","()V");
  methodVisitor.visitInsn(Opcodes.RETURN);
  methodVisitor.visitMaxs(1,1);
  methodVisitor.visitEnd();
  Method[] methods=controllerClass.getDeclaredMethods();
  for (  Method method : methods) {
    if (!Modifier.isPublic(method.getModifiers())) {
      continue;
    }
    JSONWebServiceMethod jsonWebServiceMethod=method.getAnnotation(JSONWebServiceMethod.class);
    if (jsonWebServiceMethod == null) {
      continue;
    }
    jsonWebServiceMethodsPresent=true;
    String methodName=jsonWebServiceMethod.methodName();
    if (Validator.isNull(methodName)) {
      methodName=method.getName();
    }
    Class<?>[] parameterTypes=jsonWebServiceMethod.parameterTypes();
    StringBundler sb=new StringBundler(parameterTypes.length + 3);
    sb.append(StringPool.OPEN_PARENTHESIS);
    for (    Class<?> parameterType : parameterTypes) {
      sb.append(Type.getDescriptor(parameterType));
    }
    sb.append(StringPool.CLOSE_PARENTHESIS);
    sb.append(Type.getDescriptor(JSONSerializable.class));
    String methodDescriptor=sb.toString();
    methodVisitor=classWriter.visitMethod(Opcodes.ACC_PUBLIC,methodName,methodDescriptor,null,new String[]{getClassBinaryName(Exception.class.getName())});
    methodVisitor.visitCode();
    for (int i=0; i < parameterTypes.length; i++) {
      String parameterName=jsonWebServiceMethod.parameterNames()[i];
      Class<?> parameterType=parameterTypes[i];
      methodVisitor.visitLocalVariable(parameterName,Type.getDescriptor(parameterType),null,new Label(),new Label(),i + 1);
    }
    methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
    methodVisitor.visitLdcInsn(jsonWebServiceMethod.lifecycle());
    methodVisitor.visitIntInsn(Opcodes.BIPUSH,parameterTypes.length * 2 + 2);
    methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,getClassBinaryName(Object.class.getName()));
    methodVisitor.visitInsn(Opcodes.DUP);
    methodVisitor.visitInsn(Opcodes.ICONST_0);
    methodVisitor.visitLdcInsn("action");
    methodVisitor.visitInsn(Opcodes.AASTORE);
    methodVisitor.visitInsn(Opcodes.DUP);
    methodVisitor.visitInsn(Opcodes.ICONST_1);
    methodVisitor.visitLdcInsn(method.getName());
    methodVisitor.visitInsn(Opcodes.AASTORE);
    for (int i=0; i < parameterTypes.length; i++) {
      String parameterName=jsonWebServiceMethod.parameterNames()[i];
      methodVisitor.visitInsn(Opcodes.DUP);
      methodVisitor.visitIntInsn(Opcodes.BIPUSH,(i + 1) * 2);
      methodVisitor.visitLdcInsn(parameterName);
      methodVisitor.visitInsn(Opcodes.AASTORE);
      methodVisitor.visitInsn(Opcodes.DUP);
      methodVisitor.visitIntInsn(Opcodes.BIPUSH,(i + 1) * 2 + 1);
      methodVisitor.visitVarInsn(Opcodes.ALOAD,i + 1);
      methodVisitor.visitInsn(Opcodes.AASTORE);
    }
    sb=new StringBundler(5);
    sb.append(StringPool.OPEN_PARENTHESIS);
    sb.append(Type.getDescriptor(String.class));
    sb.append(Type.getDescriptor(Object[].class));
    sb.append(StringPool.CLOSE_PARENTHESIS);
    sb.append(Type.getDescriptor(JSONSerializable.class));
    methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,alloyControllerInvokerClassBinaryName,"invokeAlloyController",sb.toString());
    methodVisitor.visitInsn(Opcodes.ARETURN);
    methodVisitor.visitMaxs(-1,-1);
    methodVisitor.visitEnd();
  }
  classWriter.visitEnd();
  if (!jsonWebServiceMethodsPresent) {
    throw new NoClassNecessaryException();
  }
  return classWriter.toByteArray();
}
