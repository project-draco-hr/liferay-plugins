{
  ClassLoader classLoader=controllerClass.getClassLoader();
  String alloyControllerInvokerClassName=getAlloyControllerInvokerClassName(controllerClass);
  Class<? extends AlloyControllerInvoker> alloyControllerInvokerClass=null;
synchronized (classLoader) {
    try {
      Method defineClassMethod=ReflectionUtil.getDeclaredMethod(ClassLoader.class,"defineClass",String.class,byte[].class,int.class,int.class);
      final byte[] classData=generateAlloyControllerInvokerClassData(controllerClass,alloyControllerInvokerClassName);
      final String filename=PropsUtil.get(PropsKeys.LIFERAY_HOME) + "/data/alloy/" + getClassBinaryName(alloyControllerInvokerClassName)+ ".class";
      ClassLoader customClassLoader=new ClassLoader(classLoader){
        @Override public URL getResource(        String name){
          if (filename.contains(name)) {
            File file=new File(filename);
            try {
              FileUtil.write(file,classData);
              URI uri=file.toURI();
              return uri.toURL();
            }
 catch (            Exception e) {
              throw new RuntimeException(e);
            }
          }
          return super.getResource(name);
        }
      }
;
      alloyControllerInvokerClass=(Class)defineClassMethod.invoke(customClassLoader,alloyControllerInvokerClassName,classData,0,classData.length);
      return alloyControllerInvokerClass;
    }
 catch (    NoClassNecessaryException ncne) {
      throw ncne;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}
