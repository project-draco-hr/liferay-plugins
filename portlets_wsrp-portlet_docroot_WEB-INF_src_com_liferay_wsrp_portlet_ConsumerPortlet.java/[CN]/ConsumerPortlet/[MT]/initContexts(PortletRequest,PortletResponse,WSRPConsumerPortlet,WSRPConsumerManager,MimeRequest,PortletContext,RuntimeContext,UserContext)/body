{
  PortletSession portletSession=portletRequest.getPortletSession();
  HttpServletRequest request=PortalUtil.getHttpServletRequest(portletRequest);
  ThemeDisplay themeDisplay=(ThemeDisplay)portletRequest.getAttribute(WebKeys.THEME_DISPLAY);
  ClientData clientData=new ClientData();
  clientData.setRequestVerb(HttpMethods.GET);
  clientData.setUserAgent(request.getHeader(HttpHeaders.USER_AGENT));
  User user=themeDisplay.getUser();
  List<MessageElement> clientAttributes=new ArrayList<MessageElement>();
  Enumeration<String> enu=request.getHeaderNames();
  while (enu.hasMoreElements()) {
    String name=enu.nextElement();
    String value=request.getHeader(name);
    ExtensionUtil.addMessageElement(clientAttributes,name,value);
  }
  ExtensionUtil.addMessageElement(clientAttributes,HttpHeaders.LIFERAY_EMAIL_ADDRESS,user.getEmailAddress());
  ExtensionUtil.addMessageElement(clientAttributes,HttpHeaders.LIFERAY_SCREEN_NAME,user.getScreenName());
  ExtensionUtil.addMessageElement(clientAttributes,HttpHeaders.LIFERAY_USER_ID,String.valueOf(user.getUserId()));
  clientData.setExtensions(ExtensionUtil.getExtensions(clientAttributes));
  mimeRequest.setClientData(clientData);
  List<Locale> locales=Collections.list(portletRequest.getLocales());
  String[] localesArray=new String[locales.size()];
  for (int i=0; i < locales.size(); i++) {
    Locale locale=locales.get(i);
    localesArray[i]=locale.toString();
  }
  mimeRequest.setLocales(localesArray);
  mimeRequest.setMarkupCharacterSets(_CHAR_SETS);
  mimeRequest.setMimeTypes(_MIME_TYPES);
  mimeRequest.setMode(getWSRPMode(portletRequest.getPortletMode()));
  mimeRequest.setWindowState(getWSRPWindowState(portletRequest.getWindowState()));
  String[] modes={getWSRPMode(PortletMode.EDIT),getWSRPMode(PortletMode.HELP),getWSRPMode(PortletMode.VIEW)};
  mimeRequest.setValidNewModes(modes);
  String[] windowStates={getWSRPWindowState(WindowState.MAXIMIZED),getWSRPWindowState(WindowState.MINIMIZED),getWSRPWindowState(WindowState.NORMAL)};
  mimeRequest.setValidNewWindowStates(windowStates);
  NavigationalContext navigationalContext=new NavigationalContext();
  String navigationalState=portletRequest.getParameter("wsrp-navigationalState");
  navigationalContext.setOpaqueValue(navigationalState);
  Map<String,String[]> publicParameterMap=portletRequest.getPublicParameterMap();
  List<NamedString> publicValues=new ArrayList<NamedString>();
  for (  Map.Entry<String,String[]> entry : publicParameterMap.entrySet()) {
    String name=entry.getKey();
    String[] values=entry.getValue();
    for (    String value : values) {
      NamedString publicValue=new NamedString();
      publicValue.setName(name);
      publicValue.setValue(value);
      publicValues.add(publicValue);
    }
  }
  navigationalContext.setPublicValues(publicValues.toArray(new NamedString[publicValues.size()]));
  mimeRequest.setNavigationalContext(navigationalContext);
  processFormParameters(portletRequest,portletResponse,mimeRequest);
  portletContext.setPortletHandle(wsrpConsumerPortlet.getPortletHandle());
  runtimeContext.setNamespacePrefix(portletResponse.getNamespace());
  runtimeContext.setPortletInstanceKey(portletResponse.getNamespace());
  SessionContext sessionContext=(SessionContext)portletSession.getAttribute(WebKeys.SESSION_CONTEXT);
  if (sessionContext != null) {
    SessionParams sessionParams=new SessionParams();
    sessionParams.setSessionID(sessionContext.getSessionID());
    runtimeContext.setSessionParams(sessionParams);
  }
  runtimeContext.setUserAuthentication("wsrp:password");
  PortletDescription portletDescription=wsrpConsumerManager.getPortletDescription(wsrpConsumerPortlet.getPortletHandle());
  Boolean doesUrlTemplateProcessing=portletDescription.getDoesUrlTemplateProcessing();
  if ((doesUrlTemplateProcessing != null) && doesUrlTemplateProcessing) {
    Templates templates=new Templates();
    templates.setBlockingActionTemplate(_BLOCKING_ACTION_TEMPLATE);
    templates.setRenderTemplate(_RENDER_TEMPLATE);
    templates.setResourceTemplate(_RESOURCE_TEMPLATE);
    templates.setSecureBlockingActionTemplate(_BLOCKING_ACTION_TEMPLATE);
    templates.setSecureRenderTemplate(_RENDER_TEMPLATE);
    templates.setSecureResourceTemplate(_RESOURCE_TEMPLATE);
    runtimeContext.setTemplates(templates);
  }
  userContext.setUserContextKey(String.valueOf(user.getUserId()));
  UserProfile userProfile=new UserProfile();
  Calendar birthday=Calendar.getInstance();
  birthday.setTime(user.getBirthday());
  userProfile.setBdate(birthday);
  if (user.getMale()) {
    userProfile.setGender("M");
  }
 else {
    userProfile.setGender("F");
  }
  PersonName personName=new PersonName();
  personName.setFamily(user.getLastName());
  personName.setGiven(user.getFirstName());
  personName.setMiddle(user.getMiddleName());
  personName.setNickname(user.getScreenName());
  com.liferay.portal.model.Contact liferayContact=user.getContact();
  ListType listType=null;
  try {
    listType=ListTypeServiceUtil.getListType(liferayContact.getPrefixId());
  }
 catch (  PortalException e) {
  }
  if (listType != null) {
    personName.setPrefix(listType.getName());
  }
  try {
    listType=ListTypeServiceUtil.getListType(liferayContact.getSuffixId());
  }
 catch (  PortalException e) {
  }
  if (listType != null) {
    personName.setSuffix(listType.getName());
  }
  userProfile.setName(personName);
  long companyId=liferayContact.getCompanyId();
  String className=com.liferay.portal.model.Contact.class.getName();
  long classPK=liferayContact.getContactId();
  List<Address> addresses=AddressLocalServiceUtil.getAddresses(companyId,className,classPK);
  Address businessAddress=null;
  Address homeAddress=null;
  for (  Address address : addresses) {
    listType=address.getType();
    String listTypeName=listType.getName();
    if (listTypeName.equals("Business")) {
      businessAddress=address;
    }
 else     if (listTypeName.equals("Personal")) {
      homeAddress=address;
    }
  }
  List<EmailAddress> emailAddresses=EmailAddressLocalServiceUtil.getEmailAddresses(companyId,className,classPK);
  String businessEmailAddress=user.getEmailAddress();
  String homeEmailAddress=user.getEmailAddress();
  for (  EmailAddress emailAddress : emailAddresses) {
    listType=emailAddress.getType();
    String listTypeName=listType.getName();
    if (listTypeName.equals("E-mail")) {
      homeEmailAddress=emailAddress.getAddress();
    }
  }
  List<Phone> phones=PhoneLocalServiceUtil.getPhones(companyId,className,classPK);
  Phone businessPhone=null;
  Phone businessFax=null;
  Phone homePhone=null;
  Phone homeFax=null;
  for (  Phone phone : phones) {
    listType=phone.getType();
    String listTypeName=listType.getName();
    if (listTypeName.equals("Business")) {
      businessPhone=phone;
    }
 else     if (listTypeName.equals("Business Fax")) {
      businessFax=phone;
    }
 else     if (listTypeName.equals("Personal")) {
      homePhone=phone;
    }
 else     if (listTypeName.equals("Personal Fax")) {
      homeFax=phone;
    }
  }
  List<Website> websites=WebsiteLocalServiceUtil.getWebsites(companyId,className,classPK);
  Website businessWebsite=null;
  Website homeWebsite=null;
  for (  Website website : websites) {
    listType=website.getType();
    String listTypeName=listType.getName();
    if (listTypeName.equals("Business")) {
      businessWebsite=website;
    }
 else     if (listTypeName.equals("Personal")) {
      homeWebsite=website;
    }
  }
  Contact contact=getContact(businessAddress,businessPhone,businessFax,businessEmailAddress,businessWebsite);
  userProfile.setBusinessInfo(contact);
  contact=getContact(homeAddress,homePhone,homeFax,homeEmailAddress,homeWebsite);
  userProfile.setHomeInfo(contact);
  userContext.setProfile(userProfile);
}
