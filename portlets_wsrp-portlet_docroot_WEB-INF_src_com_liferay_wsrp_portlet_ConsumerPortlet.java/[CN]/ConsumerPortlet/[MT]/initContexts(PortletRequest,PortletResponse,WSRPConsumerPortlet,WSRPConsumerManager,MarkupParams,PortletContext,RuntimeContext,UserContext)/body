{
  PortletSession portletSession=portletRequest.getPortletSession();
  HttpServletRequest request=PortalUtil.getHttpServletRequest(portletRequest);
  ThemeDisplay themeDisplay=(ThemeDisplay)portletRequest.getAttribute(WebKeys.THEME_DISPLAY);
  List<NamedString> clientAttributes=new ArrayList<NamedString>();
  Enumeration<String> enu=request.getHeaderNames();
  while (enu.hasMoreElements()) {
    String name=enu.nextElement();
    String value=request.getHeader(name);
    NamedString clientAttribute=new NamedString();
    clientAttribute.setName(name);
    clientAttribute.setValue(value);
    clientAttributes.add(clientAttribute);
  }
  User user=themeDisplay.getUser();
  clientAttributes.add(new NamedString(user.getEmailAddress(),HttpHeaders.LIFERAY_EMAIL_ADDRESS));
  clientAttributes.add(new NamedString(user.getScreenName(),HttpHeaders.LIFERAY_SCREEN_NAME));
  clientAttributes.add(new NamedString(String.valueOf(user.getUserId()),HttpHeaders.LIFERAY_USER_ID));
  ClientData clientData=new ClientData();
  clientData.setClientAttributes(clientAttributes.toArray(new NamedString[clientAttributes.size()]));
  clientData.setRequestVerb(HttpMethods.GET);
  clientData.setUserAgent(request.getHeader(HttpHeaders.USER_AGENT));
  markupParams.setClientData(clientData);
  List<Locale> locales=Collections.list(portletRequest.getLocales());
  String[] localesArray=new String[locales.size()];
  for (int i=0; i < locales.size(); i++) {
    Locale locale=locales.get(i);
    localesArray[i]=locale.toString();
  }
  markupParams.setLocales(localesArray);
  markupParams.setMarkupCharacterSets(_CHAR_SETS);
  markupParams.setMimeTypes(_MIME_TYPES);
  markupParams.setMode("wsrp:" + portletRequest.getPortletMode());
  markupParams.setWindowState("wsrp:" + portletRequest.getWindowState());
  PortletDescription portletDescription=wsrpConsumerManager.getPortletDescription(wsrpConsumerPortlet.getPortletHandle());
  MarkupType[] markupTypes=portletDescription.getMarkupTypes();
  for (  MarkupType markupType : markupTypes) {
    if (markupType.getMimeType().equalsIgnoreCase(ContentTypes.TEXT_HTML)) {
      markupParams.setValidNewModes(markupType.getModes());
      markupParams.setValidNewWindowStates(markupType.getWindowStates());
    }
  }
  NavigationalContext navigationalContext=new NavigationalContext();
  String navigationalState=portletRequest.getParameter("wsrp-navigationalState");
  navigationalContext.setOpaqueValue(navigationalState);
  Map<String,String[]> publicParameterMap=portletRequest.getPublicParameterMap();
  List<NamedString> publicValues=new ArrayList<NamedString>();
  for (  Map.Entry<String,String[]> entry : publicParameterMap.entrySet()) {
    String name=entry.getKey();
    String[] values=entry.getValue();
    for (    String value : values) {
      NamedString publicValue=new NamedString();
      publicValue.setName(name);
      publicValue.setValue(value);
      publicValues.add(publicValue);
    }
  }
  navigationalContext.setPublicValues(publicValues.toArray(new NamedString[publicValues.size()]));
  markupParams.setNavigationalContext(navigationalContext);
  processFormParameters(portletRequest,portletResponse,markupParams);
  portletContext.setPortletHandle(wsrpConsumerPortlet.getPortletHandle());
  runtimeContext.setNamespacePrefix(portletResponse.getNamespace());
  runtimeContext.setPortletInstanceKey(portletResponse.getNamespace());
  SessionContext sessionContext=(SessionContext)portletSession.getAttribute(WebKeys.SESSION_CONTEXT);
  if (sessionContext != null) {
    SessionParams sessionParams=new SessionParams();
    sessionParams.setSessionID(sessionContext.getSessionID());
    runtimeContext.setSessionParams(sessionParams);
  }
  runtimeContext.setUserAuthentication("wsrp:password");
  Boolean doesUrlTemplateProcessing=portletDescription.getDoesUrlTemplateProcessing();
  if (doesUrlTemplateProcessing != null && doesUrlTemplateProcessing) {
    Templates templates=new Templates();
    templates.setBlockingActionTemplate(_BLOCKING_ACTION_TEMPLATE);
    templates.setRenderTemplate(_RENDER_TEMPLATE);
    templates.setResourceTemplate(_RESOURCE_TEMPLATE);
    templates.setSecureBlockingActionTemplate(_BLOCKING_ACTION_TEMPLATE);
    templates.setSecureRenderTemplate(_RENDER_TEMPLATE);
    templates.setSecureResourceTemplate(_RESOURCE_TEMPLATE);
    runtimeContext.setTemplates(templates);
  }
  userContext.setUserCategories(new String[]{RoleConstants.USER});
  userContext.setUserContextKey(String.valueOf(themeDisplay.getUserId()));
}
