{
  _hotDeployMessageListener=new HotDeployMessageListener(){
    @Override protected void onDeploy(    Message message) throws Exception {
      ServletContext servletContext=ServletContextPool.get(message.getString("servletContextName"));
      URL url=servletContext.getResource(_SCRIPTS_DIR);
      if (url == null) {
        return;
      }
      Set<String> supportedLanguages=ScriptingUtil.getSupportedLanguages();
      Properties pluginPackageProperties=getPluginPackageProperties(servletContext);
      String language=getLanguage(pluginPackageProperties);
      if (!supportedLanguages.contains(language)) {
        if (_log.isWarnEnabled()) {
          _log.warn("Unsupported language " + language);
        }
        return;
      }
      String requiredDeploymentContexts=pluginPackageProperties.getProperty("required-deployment-contexts");
      if (Validator.isNull(requiredDeploymentContexts)) {
        return;
      }
      ClassLoader classLoader=ClassLoaderUtil.getAggregatePluginsClassLoader(StringUtil.split(requiredDeploymentContexts),false);
      executeScripts(servletContext,language,classLoader);
    }
    @Override protected void onUndeploy(    Message message) throws Exception {
      ServletContext servletContext=ServletContextPool.get(message.getString("servletContextName"));
      if (servletContext != null) {
        Properties pluginPackageProperties=getPluginPackageProperties(servletContext);
        String language=getLanguage(pluginPackageProperties);
        ScriptingUtil.clearCache(language);
      }
 else {
        Set<String> supportedLanguages=ScriptingUtil.getSupportedLanguages();
        for (        String supportedLanguage : supportedLanguages) {
          ScriptingUtil.clearCache(supportedLanguage);
        }
      }
    }
  }
;
  MessageBusUtil.registerMessageListener(DestinationNames.HOT_DEPLOY,_hotDeployMessageListener);
}
