{
  User user=userPersistence.findByPrimaryKey(userId);
  long groupId=serviceContext.getScopeGroupId();
  if (Validator.isNull(className)) {
    className=CalendarResource.class.getName();
  }
  long classNameId=PortalUtil.getClassNameId(className);
  if (hasCalendarResource(classNameId,classPK)) {
    throw new DuplicateCalendarResourceException();
  }
  if (className.equals(Group.class.getName()) || className.equals(User.class.getName())) {
    long globalCalendarResourceUserId=getGlobalCalendarResourceUserId(className,classPK);
    if (globalCalendarResourceUserId > 0) {
      userId=globalCalendarResourceUserId;
      user=userPersistence.findByPrimaryKey(userId);
    }
  }
  Date now=new Date();
  long calendarResourceId=counterLocalService.increment();
  CalendarResource calendarResource=calendarResourcePersistence.create(calendarResourceId);
  calendarResource.setUuid(serviceContext.getUuid());
  calendarResource.setGroupId(groupId);
  calendarResource.setCompanyId(user.getCompanyId());
  calendarResource.setUserId(user.getUserId());
  calendarResource.setUserName(user.getFullName());
  calendarResource.setCreateDate(serviceContext.getCreateDate(now));
  calendarResource.setModifiedDate(serviceContext.getModifiedDate(now));
  calendarResource.setClassNameId(classNameId);
  calendarResource.setClassPK(classPK);
  calendarResource.setNameMap(nameMap);
  calendarResource.setDescriptionMap(descriptionMap);
  calendarResource.setActive(active);
  calendarResource.setExpandoBridgeAttributes(serviceContext);
  calendarResourcePersistence.update(calendarResource,false);
  resourceLocalService.addModelResources(calendarResource,serviceContext);
  return calendarResource;
}
