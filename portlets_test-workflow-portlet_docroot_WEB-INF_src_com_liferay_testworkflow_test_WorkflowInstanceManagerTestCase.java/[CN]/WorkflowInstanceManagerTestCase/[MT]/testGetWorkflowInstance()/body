{
  WorkflowInstance workflowInstance1=WorkflowInstanceManagerUtil.startWorkflowInstance(user.getUserId(),_workflowDefinition1.getName(),_workflowDefinition1.getVersion(),null,null);
  WorkflowInstance workflowInstance2=WorkflowInstanceManagerUtil.startWorkflowInstance(user.getUserId(),_workflowDefinition2.getName(),_workflowDefinition2.getVersion(),null,null);
  WorkflowInstance workflowInstance3=WorkflowInstanceManagerUtil.startWorkflowInstance(user.getUserId(),_workflowDefinition3.getName(),_workflowDefinition3.getVersion(),null,null);
  long rootWorkflowInstanceId1=workflowInstance1.getWorkflowInstanceId();
  workflowInstance1=WorkflowInstanceManagerUtil.getWorkflowInstance(workflowInstance1.getWorkflowInstanceId());
  assertEquals(0,workflowInstance1.getChildren().size());
  Map<String,Object> context1=workflowInstance1.getContext();
  assertNotNull(context1);
  assertEquals(1,context1.size());
  assertEquals("success",context1.get("javaNode11"));
  assertEquals("State1-1",workflowInstance1.getCurrentNodeName());
  assertNull(workflowInstance1.getEndDate());
  assertNull(workflowInstance1.getParent());
  assertNotNull(workflowInstance1.getStartDate());
  assertEquals(DEFINITION_NAME_1,workflowInstance1.getWorkflowDefinitionName());
  assertEquals(_workflowDefinition1.getVersion(),workflowInstance1.getWorkflowDefinitionVersion());
  assertEquals(rootWorkflowInstanceId1,workflowInstance1.getWorkflowInstanceId());
  long rootWorkflowInstanceId2=workflowInstance2.getWorkflowInstanceId();
  workflowInstance2=WorkflowInstanceManagerUtil.getWorkflowInstance(workflowInstance2.getWorkflowInstanceId());
  assertEquals(0,workflowInstance2.getChildren().size());
  Map<String,Object> context2=workflowInstance2.getContext();
  assertNotNull(context2);
  assertEquals(1,context2.size());
  assertEquals("success",context2.get("javaNode21"));
  assertEquals("taskNode3",workflowInstance2.getCurrentNodeName());
  assertNull(workflowInstance2.getEndDate());
  assertNull(workflowInstance2.getParent());
  assertNotNull(workflowInstance2.getStartDate());
  assertEquals(DEFINITION_NAME_2,workflowInstance2.getWorkflowDefinitionName());
  assertEquals(_workflowDefinition2.getVersion(),workflowInstance2.getWorkflowDefinitionVersion());
  assertEquals(rootWorkflowInstanceId2,workflowInstance2.getWorkflowInstanceId());
  long rootWorkflowInstanceId3=workflowInstance3.getWorkflowInstanceId();
  workflowInstance3=WorkflowInstanceManagerUtil.getWorkflowInstance(workflowInstance3.getWorkflowInstanceId());
  List<WorkflowInstance> childrenInstances=workflowInstance3.getChildren();
  Collections.sort(childrenInstances,new Comparator<WorkflowInstance>(){
    public int compare(    WorkflowInstance child1,    WorkflowInstance child2){
      return child1.getCurrentNodeName().compareTo(child2.getCurrentNodeName());
    }
  }
);
  assertEquals(3,childrenInstances.size());
  WorkflowInstance childInstance1=childrenInstances.get(0);
  assertEquals(0,childInstance1.getChildren().size());
  Map<String,Object> context3_1=childInstance1.getContext();
  assertNotNull(context3_1);
  assertEquals(1,context3_1.size());
  assertEquals("success",context3_1.get("javaNode31"));
  assertEquals("taskNode1",childInstance1.getCurrentNodeName());
  assertNull(childInstance1.getEndDate());
  assertEquals(rootWorkflowInstanceId3,childInstance1.getParent().getWorkflowInstanceId());
  assertNotNull(childInstance1.getStartDate());
  assertEquals(DEFINITION_NAME_3,childInstance1.getWorkflowDefinitionName());
  assertEquals(_workflowDefinition3.getVersion(),childInstance1.getWorkflowDefinitionVersion());
  WorkflowInstance childInstance2=childrenInstances.get(1);
  assertEquals(0,childInstance2.getChildren().size());
  Map<String,Object> context3_2=childInstance2.getContext();
  assertNotNull(context3_2);
  assertEquals(1,context3_2.size());
  assertEquals("success",context3_2.get("javaNode31"));
  assertEquals("taskNode2",childInstance2.getCurrentNodeName());
  assertNull(childInstance2.getEndDate());
  assertEquals(rootWorkflowInstanceId3,childInstance2.getParent().getWorkflowInstanceId());
  assertNotNull(childInstance2.getStartDate());
  assertEquals(DEFINITION_NAME_3,childInstance2.getWorkflowDefinitionName());
  assertEquals(_workflowDefinition3.getVersion(),childInstance2.getWorkflowDefinitionVersion());
  WorkflowInstance childInstance3=childrenInstances.get(2);
  assertEquals(0,childInstance3.getChildren().size());
  Map<String,Object> context3_3=childInstance3.getContext();
  assertNotNull(context3_3);
  assertEquals(1,context3_3.size());
  assertEquals("success",context3_3.get("javaNode31"));
  assertEquals("taskNode3",childInstance3.getCurrentNodeName());
  assertNull(childInstance3.getEndDate());
  assertEquals(rootWorkflowInstanceId3,childInstance3.getParent().getWorkflowInstanceId());
  assertNotNull(childInstance3.getStartDate());
  assertEquals(DEFINITION_NAME_3,childInstance3.getWorkflowDefinitionName());
  assertEquals(_workflowDefinition3.getVersion(),childInstance3.getWorkflowDefinitionVersion());
  Map<String,Object> context3=workflowInstance3.getContext();
  assertNotNull(context3);
  assertEquals(1,context3.size());
  assertEquals("success",context3.get("javaNode31"));
  assertEquals("forkNode",workflowInstance3.getCurrentNodeName());
  assertNull(workflowInstance3.getEndDate());
  assertNull(workflowInstance3.getParent());
  assertNotNull(workflowInstance3.getStartDate());
  assertEquals(DEFINITION_NAME_3,workflowInstance3.getWorkflowDefinitionName());
  assertEquals(_workflowDefinition3.getVersion(),workflowInstance3.getWorkflowDefinitionVersion());
  assertEquals(rootWorkflowInstanceId3,workflowInstance3.getWorkflowInstanceId());
  WorkflowInstanceManagerUtil.deleteWorkflowInstance(workflowInstance1.getWorkflowInstanceId());
  WorkflowInstanceManagerUtil.deleteWorkflowInstance(workflowInstance2.getWorkflowInstanceId());
  WorkflowInstanceManagerUtil.deleteWorkflowInstance(workflowInstance3.getWorkflowInstanceId());
}
