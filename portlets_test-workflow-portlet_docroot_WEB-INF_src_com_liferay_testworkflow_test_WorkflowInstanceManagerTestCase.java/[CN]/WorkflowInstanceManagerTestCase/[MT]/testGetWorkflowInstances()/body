{
  WorkflowInstance workflowInstance1_1=WorkflowInstanceManagerUtil.startWorkflowInstance(USER.getUserId(),_workflowDefinition1.getName(),_workflowDefinition1.getVersion(),null,null);
  WorkflowInstance workflowInstance1_2=WorkflowInstanceManagerUtil.startWorkflowInstance(USER.getUserId(),_workflowDefinition1.getName(),_workflowDefinition1.getVersion(),null,null);
  WorkflowInstance workflowInstance1_3=WorkflowInstanceManagerUtil.startWorkflowInstance(USER.getUserId(),_workflowDefinition1.getName(),_workflowDefinition1.getVersion(),null,null);
  WorkflowInstance workflowInstance2_1=WorkflowInstanceManagerUtil.startWorkflowInstance(USER.getUserId(),_workflowDefinition2.getName(),_workflowDefinition2.getVersion(),null,null);
  WorkflowInstance workflowInstance2_2=WorkflowInstanceManagerUtil.startWorkflowInstance(USER.getUserId(),_workflowDefinition2.getName(),_workflowDefinition2.getVersion(),null,null);
  workflowInstance1_1=WorkflowInstanceManagerUtil.signalWorkflowInstance(USER.getUserId(),workflowInstance1_1.getWorkflowInstanceId(),"toTaskNode",null);
  workflowInstance1_1=WorkflowInstanceManagerUtil.signalWorkflowInstance(USER.getUserId(),workflowInstance1_1.getWorkflowInstanceId(),"toEnd",null);
  workflowInstance1_2=WorkflowInstanceManagerUtil.signalWorkflowInstance(USER.getUserId(),workflowInstance1_2.getWorkflowInstanceId(),"toTaskNode",null);
  workflowInstance1_2=WorkflowInstanceManagerUtil.signalWorkflowInstance(USER.getUserId(),workflowInstance1_2.getWorkflowInstanceId(),"toEnd",null);
  workflowInstance2_1=WorkflowInstanceManagerUtil.signalWorkflowInstance(USER.getUserId(),workflowInstance2_1.getWorkflowInstanceId(),"toEnd",null);
  List<WorkflowInstance> workflowInstances1=WorkflowInstanceManagerUtil.getWorkflowInstances(NAME_1,_workflowDefinition1.getVersion(),Boolean.TRUE,QueryUtil.ALL_POS,QueryUtil.ALL_POS,new WorkflowInstanceStartDateComparator(true));
  assertEquals(2,workflowInstances1.size());
  WorkflowInstance instance1=workflowInstances1.get(0);
  assertEquals(0,instance1.getChildren().size());
  Map<String,Object> context1=instance1.getContext();
  assertEquals(1,context1.size());
  assertEquals("success",context1.get("javaNode11"));
  assertEquals("end",instance1.getCurrentNodeName());
  assertNotNull(instance1.getEndDate());
  assertNull(instance1.getParent());
  assertNotNull(instance1.getStartDate());
  assertEquals(NAME_1,instance1.getWorkflowDefinitionName());
  assertEquals(_workflowDefinition1.getVersion(),instance1.getWorkflowDefinitionVersion());
  assertEquals(workflowInstance1_1.getWorkflowInstanceId(),instance1.getWorkflowInstanceId());
  WorkflowInstance instance2=workflowInstances1.get(1);
  assertEquals(0,instance2.getChildren().size());
  Map<String,Object> context2=instance2.getContext();
  assertEquals(1,context2.size());
  assertEquals("success",context2.get("javaNode11"));
  assertEquals("end",instance2.getCurrentNodeName());
  assertNotNull(instance2.getEndDate());
  assertNull(instance2.getParent());
  assertNotNull(instance2.getStartDate());
  assertEquals(NAME_1,instance2.getWorkflowDefinitionName());
  assertEquals(_workflowDefinition1.getVersion(),instance2.getWorkflowDefinitionVersion());
  assertEquals(workflowInstance1_2.getWorkflowInstanceId(),instance2.getWorkflowInstanceId());
  List<WorkflowInstance> workflowInstances2=WorkflowInstanceManagerUtil.getWorkflowInstances(NAME_1,_workflowDefinition1.getVersion(),Boolean.TRUE,1,2,new WorkflowInstanceStartDateComparator(true));
  assertEquals(1,workflowInstances2.size());
  WorkflowInstance instance3=workflowInstances2.get(0);
  assertEquals(0,instance3.getChildren().size());
  Map<String,Object> context3=instance3.getContext();
  assertEquals(1,context3.size());
  assertEquals("success",context3.get("javaNode11"));
  assertEquals("end",instance3.getCurrentNodeName());
  assertNotNull(instance3.getEndDate());
  assertNull(instance3.getParent());
  assertNotNull(instance3.getStartDate());
  assertEquals(NAME_1,instance3.getWorkflowDefinitionName());
  assertEquals(_workflowDefinition1.getVersion(),instance3.getWorkflowDefinitionVersion());
  assertEquals(workflowInstance1_2.getWorkflowInstanceId(),instance3.getWorkflowInstanceId());
  List<WorkflowInstance> workflowInstances3=WorkflowInstanceManagerUtil.getWorkflowInstances(NAME_1,_workflowDefinition1.getVersion(),Boolean.FALSE,QueryUtil.ALL_POS,QueryUtil.ALL_POS,new WorkflowInstanceStartDateComparator(true));
  assertEquals(1,workflowInstances3.size());
  WorkflowInstance instance4=workflowInstances3.get(0);
  assertEquals(0,instance4.getChildren().size());
  Map<String,Object> context4=instance4.getContext();
  assertEquals(1,context4.size());
  assertEquals("success",context4.get("javaNode11"));
  assertEquals("State1-1",instance4.getCurrentNodeName());
  assertNull(instance4.getEndDate());
  assertNull(instance4.getParent());
  assertNotNull(instance4.getStartDate());
  assertEquals(NAME_1,instance4.getWorkflowDefinitionName());
  assertEquals(_workflowDefinition1.getVersion(),instance4.getWorkflowDefinitionVersion());
  assertEquals(workflowInstance1_3.getWorkflowInstanceId(),instance4.getWorkflowInstanceId());
  List<WorkflowInstance> workflowInstances4=WorkflowInstanceManagerUtil.getWorkflowInstances(NAME_2,_workflowDefinition2.getVersion(),Boolean.TRUE,QueryUtil.ALL_POS,QueryUtil.ALL_POS,new WorkflowInstanceStartDateComparator(true));
  assertEquals(1,workflowInstances4.size());
  WorkflowInstance instance5=workflowInstances4.get(0);
  assertEquals(0,instance5.getChildren().size());
  Map<String,Object> context5=instance5.getContext();
  assertEquals(1,context5.size());
  assertEquals("success",context5.get("javaNode21"));
  assertEquals("end",instance5.getCurrentNodeName());
  assertNotNull(instance5.getEndDate());
  assertNull(instance5.getParent());
  assertNotNull(instance5.getStartDate());
  assertEquals(NAME_2,instance5.getWorkflowDefinitionName());
  assertEquals(_workflowDefinition2.getVersion(),instance5.getWorkflowDefinitionVersion());
  assertEquals(workflowInstance2_1.getWorkflowInstanceId(),instance5.getWorkflowInstanceId());
  List<WorkflowInstance> workflowInstances5=WorkflowInstanceManagerUtil.getWorkflowInstances(NAME_2,_workflowDefinition2.getVersion(),Boolean.FALSE,QueryUtil.ALL_POS,QueryUtil.ALL_POS,new WorkflowInstanceStartDateComparator(true));
  assertEquals(1,workflowInstances5.size());
  WorkflowInstance instance6=workflowInstances5.get(0);
  assertEquals(0,instance6.getChildren().size());
  Map<String,Object> context6=instance6.getContext();
  assertEquals(1,context6.size());
  assertEquals("success",context6.get("javaNode21"));
  assertEquals("taskNode3",instance6.getCurrentNodeName());
  assertNull(instance6.getEndDate());
  assertNull(instance6.getParent());
  assertNotNull(instance6.getStartDate());
  assertEquals(NAME_2,instance6.getWorkflowDefinitionName());
  assertEquals(_workflowDefinition2.getVersion(),instance6.getWorkflowDefinitionVersion());
  assertEquals(workflowInstance2_2.getWorkflowInstanceId(),instance6.getWorkflowInstanceId());
  WorkflowInstanceManagerUtil.deleteWorkflowInstance(workflowInstance1_1.getWorkflowInstanceId());
  WorkflowInstanceManagerUtil.deleteWorkflowInstance(workflowInstance1_2.getWorkflowInstanceId());
  WorkflowInstanceManagerUtil.deleteWorkflowInstance(workflowInstance1_3.getWorkflowInstanceId());
  WorkflowInstanceManagerUtil.deleteWorkflowInstance(workflowInstance2_1.getWorkflowInstanceId());
  WorkflowInstanceManagerUtil.deleteWorkflowInstance(workflowInstance2_2.getWorkflowInstanceId());
}
