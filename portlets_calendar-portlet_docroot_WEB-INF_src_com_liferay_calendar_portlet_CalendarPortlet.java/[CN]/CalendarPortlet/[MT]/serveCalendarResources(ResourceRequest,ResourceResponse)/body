{
  ThemeDisplay themeDisplay=(ThemeDisplay)resourceRequest.getAttribute(WebKeys.THEME_DISPLAY);
  String keywords=ParamUtil.getString(resourceRequest,"keywords");
  JSONArray jsonArray=JSONFactoryUtil.createJSONArray();
  long classNameId=PortalUtil.getClassNameId(CalendarResource.class);
  List<CalendarResource> calendarResources=CalendarResourceServiceUtil.search(themeDisplay.getCompanyId(),new long[]{themeDisplay.getCompanyGroupId(),themeDisplay.getScopeGroupId()},new long[]{classNameId},keywords,true,true,0,SearchContainer.DEFAULT_DELTA,new CalendarResourceNameComparator());
  for (  CalendarResource calendarResource : calendarResources) {
    addCalendarJSONObject(resourceRequest,jsonArray,calendarResource.getClassNameId(),calendarResource.getClassPK());
  }
  long groupClassNameId=PortalUtil.getClassNameId(Group.class);
  List<CalendarResource> companyCalendarResources=CalendarResourceServiceUtil.search(themeDisplay.getCompanyId(),new long[]{themeDisplay.getCompanyGroupId()},new long[]{groupClassNameId},keywords,true,true,0,SearchContainer.DEFAULT_DELTA,new CalendarResourceNameComparator());
  for (  CalendarResource calendarResource : companyCalendarResources) {
    addCalendarJSONObject(resourceRequest,jsonArray,calendarResource.getClassNameId(),calendarResource.getClassPK());
  }
  String name=StringUtil.merge(CustomSQLUtil.keywords(keywords),StringPool.BLANK);
  LinkedHashMap<String,Object> params=new LinkedHashMap<String,Object>();
  params.put("usersGroups",themeDisplay.getUserId());
  List<Group> groups=GroupLocalServiceUtil.search(themeDisplay.getCompanyId(),name,null,params,true,0,SearchContainer.DEFAULT_DELTA);
  for (  Group group : groups) {
    addCalendarJSONObject(resourceRequest,jsonArray,groupClassNameId,group.getGroupId());
  }
  long userClassNameId=PortalUtil.getClassNameId(User.class);
  List<User> users=UserLocalServiceUtil.search(themeDisplay.getCompanyId(),keywords,0,null,0,SearchContainer.DEFAULT_DELTA,new UserFirstNameComparator());
  for (  User user : users) {
    addCalendarJSONObject(resourceRequest,jsonArray,userClassNameId,user.getUserId());
  }
  writeJSON(resourceRequest,resourceResponse,jsonArray);
}
