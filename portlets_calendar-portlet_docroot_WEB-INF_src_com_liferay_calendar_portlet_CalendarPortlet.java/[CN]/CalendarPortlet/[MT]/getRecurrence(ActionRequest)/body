{
  boolean repeat=ParamUtil.getBoolean(actionRequest,"repeat");
  if (!repeat) {
    return null;
  }
  Recurrence recurrence=new Recurrence();
  int count=0;
  String ends=ParamUtil.getString(actionRequest,"ends");
  if (ends.equals("after")) {
    count=ParamUtil.getInteger(actionRequest,"count");
  }
  recurrence.setCount(count);
  Frequency frequency=Frequency.parse(ParamUtil.getString(actionRequest,"frequency"));
  recurrence.setFrequency(frequency);
  int interval=ParamUtil.getInteger(actionRequest,"interval");
  recurrence.setInterval(interval);
  java.util.Calendar untilJCalendar=null;
  if (ends.equals("on")) {
    int untilDateDay=ParamUtil.getInteger(actionRequest,"untilDateDay");
    int untilDateMonth=ParamUtil.getInteger(actionRequest,"untilDateMonth");
    int untilDateYear=ParamUtil.getInteger(actionRequest,"untilDateYear");
    untilJCalendar=CalendarFactoryUtil.getCalendar();
    untilJCalendar.set(java.util.Calendar.DATE,untilDateDay);
    untilJCalendar.set(java.util.Calendar.MONTH,untilDateMonth);
    untilJCalendar.set(java.util.Calendar.YEAR,untilDateYear);
  }
  recurrence.setUntil(untilJCalendar);
  List<Weekday> weekdays=new ArrayList<Weekday>();
  if (frequency == Frequency.WEEKLY) {
    for (    Weekday weekday : Weekday.values()) {
      boolean checked=ParamUtil.getBoolean(actionRequest,weekday.getValue());
      if (checked) {
        weekdays.add(weekday);
      }
    }
  }
  recurrence.setWeekdays(weekdays);
  return RecurrenceSerializer.serialize(recurrence);
}
