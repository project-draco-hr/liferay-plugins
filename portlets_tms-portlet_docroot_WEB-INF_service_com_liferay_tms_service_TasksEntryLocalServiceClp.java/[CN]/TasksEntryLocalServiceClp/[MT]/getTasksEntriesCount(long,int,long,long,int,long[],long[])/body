{
  Object paramObj0=new LongWrapper(groupId);
  Object paramObj1=new IntegerWrapper(priority);
  Object paramObj2=new LongWrapper(assigneeUserId);
  Object paramObj3=new LongWrapper(reporterUserId);
  Object paramObj4=new IntegerWrapper(status);
  Object paramObj5=ClpSerializer.translateInput(tagsEntryIds);
  if (tagsEntryIds == null) {
    paramObj5=new NullWrapper("[J");
  }
  Object paramObj6=ClpSerializer.translateInput(notTagsEntryIds);
  if (notTagsEntryIds == null) {
    paramObj6=new NullWrapper("[J");
  }
  Object returnObj=null;
  try {
    returnObj=_classLoaderProxy.invoke("getTasksEntriesCount",new Object[]{paramObj0,paramObj1,paramObj2,paramObj3,paramObj4,paramObj5,paramObj6});
  }
 catch (  Throwable t) {
    if (t instanceof com.liferay.portal.SystemException) {
      throw (com.liferay.portal.SystemException)t;
    }
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RuntimeException(t.getClass().getName() + " is not a valid exception");
    }
  }
  return ((Integer)returnObj).intValue();
}
