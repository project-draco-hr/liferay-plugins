{
  long startTime=System.currentTimeMillis();
  Hits subset=new HitsImpl();
  SAXReader reader=new SAXReader();
  org.dom4j.Document xmlDoc=reader.read(new StringReader(xml));
  Element root=xmlDoc.getRootElement();
  Element resultEl=root.element("result");
  int length=Integer.parseInt(resultEl.attributeValue("numFound"));
  float maxScore=GetterUtil.getFloat(resultEl.attributeValue("maxScore"));
  if ((start > -1) && (start <= end)) {
    if (end > length) {
      end=length;
    }
    int subsetTotal=end - start;
    Document[] subsetDocs=new DocumentImpl[subsetTotal];
    float[] subsetScores=new float[subsetTotal];
    List<Element> docsEl=resultEl.elements();
    int j=0;
    for (int i=start; i < end; i++, j++) {
      Element docEl=docsEl.get(i);
      Document doc=new DocumentImpl();
      List<Element> fieldEls=docEl.elements();
      for (      Element fieldEl : fieldEls) {
        Field field=new Field(fieldEl.attributeValue("name"),fieldEl.getText(),false);
        doc.add(field);
      }
      float score=GetterUtil.getFloat(doc.get("score"));
      subsetDocs[j]=doc;
      subsetScores[j]=score / maxScore;
    }
    subset.setLength(length);
    subset.setDocs(subsetDocs);
    subset.setScores(subsetScores);
    subset.setStart(startTime);
    float searchTime=(float)(System.currentTimeMillis() - startTime) / Time.SECOND;
    subset.setSearchTime(searchTime);
  }
  return subset;
}
