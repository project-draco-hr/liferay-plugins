{
  long startTime=System.currentTimeMillis();
  Hits subset=new HitsImpl();
  com.liferay.portal.kernel.xml.Document xmlDoc=SAXReaderUtil.read(xml);
  Element root=xmlDoc.getRootElement();
  Element resultEl=root.element("result");
  int length=GetterUtil.getInteger(resultEl.attributeValue("numFound"));
  if (allResults && length > 0) {
    url=HttpUtil.removeParameter(url,"rows");
    url=HttpUtil.addParameter(url,"rows",length);
    xml=HttpUtil.URLtoString(url);
    return subset(url,xml,false);
  }
  float maxScore=GetterUtil.getFloat(resultEl.attributeValue("maxScore"));
  List<Element> docsEl=resultEl.elements();
  int subsetTotal=docsEl.size();
  Document[] subsetDocs=new DocumentImpl[subsetTotal];
  float[] subsetScores=new float[subsetTotal];
  int j=0;
  for (  Element docEl : docsEl) {
    Document doc=new DocumentImpl();
    List<Element> fieldEls=docEl.elements();
    for (    Element fieldEl : fieldEls) {
      Field field=new Field(fieldEl.attributeValue("name"),fieldEl.getText(),false);
      doc.add(field);
    }
    float score=GetterUtil.getFloat(doc.get("score"));
    subsetDocs[j]=doc;
    subsetScores[j]=score / maxScore;
    j++;
  }
  subset.setLength(length);
  subset.setDocs(subsetDocs);
  subset.setScores(subsetScores);
  subset.setStart(startTime);
  float searchTime=(float)(System.currentTimeMillis() - startTime) / Time.SECOND;
  subset.setSearchTime(searchTime);
  return subset;
}
