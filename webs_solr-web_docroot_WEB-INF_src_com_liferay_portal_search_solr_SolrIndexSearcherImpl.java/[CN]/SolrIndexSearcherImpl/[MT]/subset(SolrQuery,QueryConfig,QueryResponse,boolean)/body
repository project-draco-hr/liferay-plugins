{
  long startTime=System.currentTimeMillis();
  Hits subset=new HitsImpl();
  SolrDocumentList results=queryResponse.getResults();
  long length=results.getNumFound();
  if (allResults && (length > 0)) {
    solrQuery.setRows((int)length);
    queryResponse=_solrServer.query(solrQuery);
    return subset(solrQuery,queryConfig,queryResponse,false);
  }
  float maxScore=1;
  if (queryConfig.isScoreEnabled()) {
    maxScore=results.getMaxScore();
  }
  int subsetTotal=results.size();
  Document[] subsetDocs=new DocumentImpl[subsetTotal];
  String[] subsetSnippets=new String[subsetTotal];
  float[] subsetScores=new float[subsetTotal];
  int j=0;
  Map<String,Map<String,List<String>>> highlights=queryResponse.getHighlighting();
  Set<String> queryTerms=new HashSet<String>();
  for (  SolrDocument solrDocument : results) {
    Document document=new DocumentImpl();
    Collection<String> names=solrDocument.getFieldNames();
    for (    String name : names) {
      Field field=new Field(name,solrDocument.getFieldValue(name).toString());
      document.add(field);
    }
    float score=1;
    if (queryConfig.isScoreEnabled()) {
      score=GetterUtil.getFloat(solrDocument.getFieldValue("score").toString());
    }
    subsetDocs[j]=document;
    if (queryConfig.isHighlightEnabled()) {
      subsetSnippets[j]=getSnippet(solrDocument,queryTerms,highlights);
    }
 else {
      subsetSnippets[j]=StringPool.BLANK;
    }
    subsetScores[j]=score / maxScore;
    j++;
  }
  float searchTime=(float)(System.currentTimeMillis() - startTime) / Time.SECOND;
  subset.setDocs(subsetDocs);
  subset.setLength((int)length);
  subset.setQueryTerms(queryTerms.toArray(new String[queryTerms.size()]));
  subset.setScores(subsetScores);
  subset.setSearchTime(searchTime);
  subset.setSnippets(subsetSnippets);
  subset.setStart(startTime);
  return subset;
}
