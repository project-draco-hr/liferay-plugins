{
  long startTime=System.currentTimeMillis();
  Hits subset=new HitsImpl();
  SolrDocumentList results=response.getResults();
  long length=results.getNumFound();
  if (allResults && (length > 0)) {
    solrQuery.setRows((int)length);
    results=_solrServer.query(solrQuery).getResults();
    return subset(solrQuery,response,false);
  }
  float maxScore=results.getMaxScore();
  int subsetTotal=results.size();
  Document[] subsetDocs=new DocumentImpl[subsetTotal];
  String[] subsetSnippets=new String[subsetTotal];
  float[] subsetScores=new float[subsetTotal];
  int j=0;
  Map<String,Map<String,List<String>>> highlights=response.getHighlighting();
  Set<String> queryTerms=new HashSet<String>();
  for (  SolrDocument solrDocument : results) {
    Document doc=new DocumentImpl();
    Collection<String> names=solrDocument.getFieldNames();
    for (    String name : names) {
      Field field=new Field(name,solrDocument.getFieldValue(name).toString(),false);
      doc.add(field);
    }
    float score=Float.valueOf(solrDocument.getFieldValue("score").toString());
    subsetDocs[j]=doc;
    subsetSnippets[j]=getSnippet(solrDocument,queryTerms,highlights);
    subsetScores[j]=score / maxScore;
    j++;
  }
  subset.setLength((int)length);
  subset.setDocs(subsetDocs);
  subset.setScores(subsetScores);
  subset.setSnippets(subsetSnippets);
  subset.setStart(startTime);
  subset.setQueryTerms(queryTerms.toArray(new String[queryTerms.size()]));
  float searchTime=(float)(System.currentTimeMillis() - startTime) / Time.SECOND;
  subset.setSearchTime(searchTime);
  return subset;
}
