{
  long startTime=System.currentTimeMillis();
  Hits hits=new HitsImpl();
  SolrDocumentList solrDocumentList=queryResponse.getResults();
  long total=solrDocumentList.getNumFound();
  if (allResults && (total > 0)) {
    solrQuery.setRows((int)total);
    queryResponse=_solrServer.query(solrQuery);
    return subset(solrQuery,query,queryConfig,queryResponse,false);
  }
  List<Document> documents=new ArrayList<Document>();
  List<Float> scores=new ArrayList<Float>();
  List<String> snippets=new ArrayList<String>();
  float maxScore=-1;
  Set<String> queryTerms=new HashSet<String>();
  int subsetTotal=0;
  for (  SolrDocument solrDocument : solrDocumentList) {
    Document document=new DocumentImpl();
    Collection<String> names=solrDocument.getFieldNames();
    for (    String name : names) {
      Collection<Object> fieldValues=solrDocument.getFieldValues(name);
      Field field=new Field(name,ArrayUtil.toStringArray(fieldValues.toArray(new Object[fieldValues.size()])));
      document.add(field);
    }
    String snippet=StringPool.BLANK;
    if (queryConfig.isHighlightEnabled()) {
      snippet=getSnippet(solrDocument,queryConfig,queryTerms,queryResponse.getHighlighting());
      if (Validator.isNull(snippet)) {
        continue;
      }
    }
    documents.add(document);
    if (queryConfig.isScoreEnabled()) {
      float score=GetterUtil.getFloat(String.valueOf(solrDocument.getFieldValue("score")));
      if (score > maxScore) {
        maxScore=score;
      }
      scores.add(score);
    }
 else {
      scores.add(maxScore);
    }
    snippets.add(snippet);
    subsetTotal++;
  }
  hits.setDocs(documents.toArray(new Document[subsetTotal]));
  hits.setLength(subsetTotal);
  hits.setQuery(query);
  hits.setQueryTerms(queryTerms.toArray(new String[queryTerms.size()]));
  Float[] scoresArray=scores.toArray(new Float[subsetTotal]);
  if (queryConfig.isScoreEnabled() && (subsetTotal > 0) && (maxScore > 0)) {
    for (int i=0; i < scoresArray.length; i++) {
      scoresArray[i]=scoresArray[i] / maxScore;
    }
  }
  hits.setScores(scoresArray);
  float searchTime=(float)(System.currentTimeMillis() - startTime) / Time.SECOND;
  hits.setSearchTime(searchTime);
  hits.setSnippets(snippets.toArray(new String[subsetTotal]));
  hits.setStart(startTime);
  return hits;
}
