{
  HTTPInTransport in=new HttpServletRequestAdapter(request);
  SAMLMessageContext<Response,SAMLObject,NameID> context=new BasicSAMLMessageContext<Response,SAMLObject,NameID>();
  Endpoint endpoint=OpenSAMLUtil.buildEndpoint(SAMLConstants.SAML2_POST_BINDING_URI,HttpRequestUtil.getACSURL(request));
  context.setPeerEntityEndpoint(endpoint);
  context.setInboundMessageTransport(in);
  HTTPPostDecoder decoder=new HTTPPostDecoder();
  decoder.decode(context);
  Response samlResponse=(Response)context.getInboundMessage();
  HttpSession session=request.getSession(true);
  if (!samlResponse.isSigned()) {
    throw new Exception("HTTP-POST binding requires SAML message to be signed");
  }
  Credential credential=CredentialUtil.getCredential(PropsValues.SAML_IDP_CREDENTIAL_ALIAS,PropsValues.SAML_IDP_CREDENTIAL_PASSWORD);
  try {
    OpenSAMLUtil.validateSignature(samlResponse,credential);
  }
 catch (  ValidationException e) {
    throw new Exception("Signature validaton failed: " + e.getMessage());
  }
  Status status=samlResponse.getStatus();
  if (!StatusCode.SUCCESS_URI.equals(status.getStatusCode().getValue())) {
    throw new Exception("Assertion failed: " + status.getStatusCode().getValue());
  }
  List<Assertion> assertions=samlResponse.getAssertions();
  if (assertions.isEmpty()) {
    throw new Exception("No assertions found in response from IdP");
  }
 else   if (assertions.size() > 1) {
    throw new Exception("More than 1 assertion found in response from IdP");
  }
  Assertion assertion=assertions.get(0);
  if (assertion.isSigned()) {
    OpenSAMLUtil.validateSignature(assertion,credential);
  }
  if (samlResponse.getInResponseTo() != null) {
    verifyInResponseTo(request,samlResponse.getInResponseTo());
  }
  String nameID=assertion.getSubject().getNameID().getValue();
  String nameIDFormat=assertion.getSubject().getNameID().getFormat();
  DateTime notOnOrAfter=assertion.getConditions().getNotOnOrAfter();
  DateTime notBefore=assertion.getConditions().getNotBefore();
  if (notBefore.isAfterNow() || notOnOrAfter.isBeforeNow()) {
    throw new Exception("Assertion not valid");
  }
  Map<String,DateTime> replayCache=getReplayCache(request);
  DateTime expiration=replayCache.get(assertion.getID());
  if (expiration != null && expiration.isAfter(notOnOrAfter.getMillis())) {
    throw new Exception("Replay attempt. Assertion ID: " + assertion.getID() + " already consumed.");
  }
 else {
    replayCache.put(assertion.getID(),assertion.getConditions().getNotOnOrAfter());
  }
  Map<String,List<XMLObject>> attributes=new HashMap<String,List<XMLObject>>();
  List<AttributeStatement> attributeStatements=assertion.getAttributeStatements();
  for (  AttributeStatement statement : attributeStatements) {
    for (    Attribute attribute : statement.getAttributes()) {
      attributes.put(attribute.getName(),attribute.getAttributeValues());
    }
  }
  SPSession spSession=new SPSession();
  spSession.setSessionId(session.getId());
  spSession.setNameID(nameID);
  spSession.setNameIDFormat(nameIDFormat);
  spSession.setNotOnOrAfter(notOnOrAfter);
  spSession.addAttributes(attributes);
  sessionManager.registerSPSession(spSession);
  response.sendRedirect(context.getRelayState());
}
