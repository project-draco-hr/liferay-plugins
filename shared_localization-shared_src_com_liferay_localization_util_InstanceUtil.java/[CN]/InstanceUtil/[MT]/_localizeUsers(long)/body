{
  Company company=CompanyLocalServiceUtil.getCompany(companyId);
  ExpandoBridge expandoBridge=company.getExpandoBridge();
  String attributeName="localizationUpdated_" + PortletPropsValues.COMPANY_DEFAULT_LOCALE;
  boolean localizationUpdated=GetterUtil.getBoolean(expandoBridge.getAttribute(attributeName,false));
  if (localizationUpdated) {
    return;
  }
  try {
    expandoBridge.addAttribute(attributeName,ExpandoColumnConstants.BOOLEAN,Boolean.FALSE,false);
  }
 catch (  DuplicateColumnNameException dcne) {
  }
  expandoBridge.setAttribute(attributeName,Boolean.TRUE,false);
  CompanyLocalServiceUtil.updateCompany(company);
  ActionableDynamicQuery actionableDynamicQuery=UserLocalServiceUtil.getActionableDynamicQuery();
  actionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod(){
    @Override public void addCriteria(    DynamicQuery dynamicQuery){
      Property property=PropertyFactoryUtil.forName("createDate");
      dynamicQuery.add(property.eqProperty("modifiedDate"));
    }
  }
);
  actionableDynamicQuery.setCompanyId(companyId);
  actionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<User>(){
    @Override public void performAction(    User user) throws PortalException {
      user.setModifiedDate(new Date());
      user.setLanguageId(PortletPropsValues.COMPANY_DEFAULT_LOCALE);
      user.setTimeZoneId(PortletPropsValues.COMPANY_DEFAULT_TIME_ZONE);
      UserLocalServiceUtil.updateUser(user);
    }
  }
);
  actionableDynamicQuery.performActions();
}
