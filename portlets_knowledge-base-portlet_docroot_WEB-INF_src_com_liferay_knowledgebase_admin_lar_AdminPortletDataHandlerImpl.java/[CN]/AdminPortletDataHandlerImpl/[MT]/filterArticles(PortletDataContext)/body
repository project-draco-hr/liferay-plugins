{
  List<Article> articles=new ArrayList<Article>();
  List<Article> siblingArticles=new ArrayList<Article>();
  long[] parentResourcePrimKeys=new long[]{ArticleConstants.DEFAULT_PARENT_RESOURCE_PRIM_KEY};
  while (parentResourcePrimKeys.length > 0) {
    long[] curParentResourcePrimKeys=null;
    if (parentResourcePrimKeys.length > _SQL_DATA_MAX_PARAMETERS) {
      curParentResourcePrimKeys=new long[_SQL_DATA_MAX_PARAMETERS];
      System.arraycopy(parentResourcePrimKeys,0,curParentResourcePrimKeys,0,_SQL_DATA_MAX_PARAMETERS);
      long[] array=new long[parentResourcePrimKeys.length - _SQL_DATA_MAX_PARAMETERS];
      System.arraycopy(parentResourcePrimKeys,_SQL_DATA_MAX_PARAMETERS,array,0,parentResourcePrimKeys.length - _SQL_DATA_MAX_PARAMETERS);
      parentResourcePrimKeys=array;
    }
 else {
      curParentResourcePrimKeys=parentResourcePrimKeys.clone();
      parentResourcePrimKeys=new long[0];
    }
    List<Article> curArticles=ArticleUtil.findByG_P_L_S(portletDataContext.getScopeGroupId(),curParentResourcePrimKeys,ArticleConstants.LATEST_ANY,WorkflowConstants.STATUS_APPROVED);
    for (    Article curArticle : curArticles) {
      if (portletDataContext.isWithinDateRange(curArticle.getModifiedDate())) {
        siblingArticles.add(curArticle);
      }
    }
    if (parentResourcePrimKeys.length == 0) {
      Collections.sort(siblingArticles,new ArticlePriorityComparator(true));
      articles.addAll(siblingArticles);
      parentResourcePrimKeys=StringUtil.split(ListUtil.toString(siblingArticles,"resourcePrimKey"),0L);
      siblingArticles=new ArrayList<Article>();
    }
  }
  return articles;
}
