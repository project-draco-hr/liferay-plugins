{
  long userId=context.getUserId(article.getUserUuid());
  long parentResourcePrimKey=MapUtil.getLong(resourcePrimKeys,article.getParentResourcePrimKey());
  int priority=article.getPriority();
  String dirName=MapUtil.getString(dirNames,String.valueOf(article.getResourcePrimKey()));
  Map<String,Object> params=new HashMap<String,Object>();
  params.put("groupId",context.getScopeGroupId());
  params.put("parentResourcePrimKey",parentResourcePrimKey);
  params.put("status",WorkflowConstants.STATUS_APPROVED);
  int maxPriority=ArticleLocalServiceUtil.getArticlesCount(params,false);
  if (priority > maxPriority) {
    priority=maxPriority;
  }
  long[] assetCategoryIds=null;
  if (context.getBooleanParameter(_NAMESPACE_ARTICLE,"categories")) {
    assetCategoryIds=context.getAssetCategoryIds(Article.class,article.getResourcePrimKey());
  }
  String[] assetTagNames=null;
  if (context.getBooleanParameter(_NAMESPACE_ARTICLE,"tags")) {
    assetTagNames=context.getAssetTagNames(Article.class,article.getResourcePrimKey());
  }
  ServiceContext serviceContext=new ServiceContext();
  serviceContext.setAddCommunityPermissions(true);
  serviceContext.setAddGuestPermissions(true);
  serviceContext.setAssetCategoryIds(assetCategoryIds);
  serviceContext.setAssetTagNames(assetTagNames);
  serviceContext.setCreateDate(article.getCreateDate());
  serviceContext.setModifiedDate(article.getModifiedDate());
  serviceContext.setScopeGroupId(context.getScopeGroupId());
  Article importedArticle=null;
  if (context.isDataStrategyMirror()) {
    Article existingArticle=ArticleUtil.fetchByUUID_G(article.getUuid(),context.getScopeGroupId());
    if (existingArticle == null) {
      importedArticle=importArticleVersions(context,article.getUuid(),parentResourcePrimKey,priority,dirName,assetCategoryIds,assetTagNames,articleElement);
    }
 else {
      importedArticle=ArticleLocalServiceUtil.updateArticle(userId,existingArticle.getResourcePrimKey(),parentResourcePrimKey,article.getTitle(),article.getContent(),article.getDescription(),priority,dirName,serviceContext);
    }
  }
 else {
    importedArticle=importArticleVersions(context,null,parentResourcePrimKey,priority,dirName,assetCategoryIds,assetTagNames,articleElement);
  }
  resourcePrimKeys.put(article.getResourcePrimKey(),importedArticle.getResourcePrimKey());
  context.importPermissions(Article.class,article.getResourcePrimKey(),importedArticle.getResourcePrimKey());
  if (context.getBooleanParameter(_NAMESPACE_ARTICLE,"ratings")) {
    context.importRatingsEntries(Article.class,article.getResourcePrimKey(),importedArticle.getResourcePrimKey());
  }
  if (context.getBooleanParameter(_NAMESPACE_ARTICLE,"comments")) {
    context.importComments(Article.class,article.getResourcePrimKey(),importedArticle.getResourcePrimKey(),context.getScopeGroupId());
  }
}
