{
  WorkflowInstance workflowInstance=WorkflowInstanceManagerUtil.startWorkflowInstance(user.getUserId(),DEFINITION_NAME_3,_workflowDefinition.getVersion(),null,null);
  workflowInstance=WorkflowInstanceManagerUtil.getWorkflowInstance(workflowInstance.getWorkflowInstanceId());
  List<WorkflowInstance> childrenWorkflowInstances=workflowInstance.getChildren();
  assertEquals(3,childrenWorkflowInstances.size());
  Collections.sort(childrenWorkflowInstances,new Comparator<WorkflowInstance>(){
    public int compare(    WorkflowInstance workflowInstance1,    WorkflowInstance workflowInstance2){
      return workflowInstance1.getCurrentNodeName().compareTo(workflowInstance2.getCurrentNodeName());
    }
  }
);
  long[] roleIds=user.getRoleIds();
  assertTrue(roleIds.length > 0);
  long testRoleId=roleIds[0];
  WorkflowInstance childInstance1=childrenWorkflowInstances.get(0);
  List<WorkflowTask> childWorkflowTasks1=WorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(childInstance1.getWorkflowInstanceId(),null,QueryUtil.ALL_POS,QueryUtil.ALL_POS,new WorkflowTaskNameComparator(true));
  assertEquals(1,childWorkflowTasks1.size());
  WorkflowTask workflowTask1=childWorkflowTasks1.get(0);
  workflowTask1=WorkflowTaskManagerUtil.assignWorkflowTaskToRole(user.getUserId(),workflowTask1.getWorkflowTaskId(),testRoleId,"Assign to role",null);
  workflowTask1=WorkflowTaskManagerUtil.assignWorkflowTaskToUser(user.getUserId(),workflowTask1.getWorkflowTaskId(),user.getUserId(),"Assign to user",null);
  List<String> nextTransitionNames1=WorkflowTaskManagerUtil.getNextTransitionNames(user.getUserId(),workflowTask1.getWorkflowTaskId());
  assertEquals(1,nextTransitionNames1.size());
  assertEquals("toJoinNode",nextTransitionNames1.get(0));
  WorkflowInstance childInstance2=childrenWorkflowInstances.get(1);
  List<WorkflowTask> childWorkflowTasks2=WorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(childInstance2.getWorkflowInstanceId(),null,QueryUtil.ALL_POS,QueryUtil.ALL_POS,new WorkflowTaskNameComparator(true));
  assertEquals(1,childWorkflowTasks2.size());
  WorkflowTask workflowTask2=childWorkflowTasks2.get(0);
  workflowTask2=WorkflowTaskManagerUtil.assignWorkflowTaskToRole(user.getUserId(),workflowTask2.getWorkflowTaskId(),testRoleId,"Assign to role",null);
  workflowTask2=WorkflowTaskManagerUtil.assignWorkflowTaskToUser(user.getUserId(),workflowTask2.getWorkflowTaskId(),user.getUserId(),"Assign to user",null);
  List<String> nextTransitionNames2=WorkflowTaskManagerUtil.getNextTransitionNames(user.getUserId(),workflowTask2.getWorkflowTaskId());
  assertEquals(1,nextTransitionNames2.size());
  assertEquals("toTaskNode4",nextTransitionNames2.get(0));
  WorkflowInstance childInstance3=childrenWorkflowInstances.get(2);
  List<WorkflowTask> childWorkflowTasks3=WorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(childInstance3.getWorkflowInstanceId(),null,QueryUtil.ALL_POS,QueryUtil.ALL_POS,new WorkflowTaskNameComparator(true));
  assertEquals(1,childWorkflowTasks3.size());
  WorkflowTask workflowTask3=childWorkflowTasks3.get(0);
  workflowTask3=WorkflowTaskManagerUtil.assignWorkflowTaskToRole(user.getUserId(),workflowTask3.getWorkflowTaskId(),testRoleId,"Assign to role",null);
  workflowTask3=WorkflowTaskManagerUtil.assignWorkflowTaskToUser(user.getUserId(),workflowTask3.getWorkflowTaskId(),user.getUserId(),"Assign to user",null);
  List<String> nextTransitionNames3=WorkflowTaskManagerUtil.getNextTransitionNames(user.getUserId(),workflowTask3.getWorkflowTaskId());
  assertEquals(1,nextTransitionNames3.size());
  assertEquals("toJoinNode",nextTransitionNames3.get(0));
  WorkflowInstanceManagerUtil.deleteWorkflowInstance(workflowInstance.getWorkflowInstanceId());
}
