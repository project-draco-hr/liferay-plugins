{
  JbpmContext jbpmContext=_jbpmConfiguration.createJbpmContext();
  try {
    ProcessDefinition processDefinition=getProcessDefinition(jbpmContext,workflowDefinitionName,workflowDefinitionVersion);
    ProcessInstance processInstance=new ProcessInstance(processDefinition);
    if (workflowContext != null) {
      ContextInstance contextInstance=processInstance.getContextInstance();
      Map<String,Object> variables=new HashMap<String,Object>(workflowContext);
      contextInstance.addVariables(variables);
    }
    if (Validator.isNotNull(transitionName)) {
      processInstance.signal(transitionName);
    }
 else {
      processInstance.signal();
    }
    jbpmContext.save(processInstance);
    TaskMgmtInstance taskMgmtInstance=processInstance.getTaskMgmtInstance();
    Collection<TaskInstance> taskInstances=taskMgmtInstance.getTaskInstances();
    if (taskInstances != null) {
      for (      TaskInstance taskInstance : taskInstances) {
        List<Assignee> assignees=AssigneeRetrievalUtil.getAssignees(companyId,taskInstance.getActorId(),taskInstance.getPooledActors());
        String context=WorkflowContextUtil.convertToJSON(workflowContext);
        TaskInstanceExtensionImpl taskInstanceExtensionImpl=new TaskInstanceExtensionImpl(companyId,groupId,userId,assignees,context,taskInstance);
        jbpmContext.getSession().save(taskInstanceExtensionImpl);
      }
    }
    Token token=processInstance.getRootToken();
    return getWorkflowInstance(token);
  }
 catch (  Exception e) {
    throw new WorkflowException(e);
  }
 finally {
    jbpmContext.close();
  }
}
