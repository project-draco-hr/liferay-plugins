{
  String servletContextName=message.getString("servletContextName");
  ServletContext servletContext=ServletContextPool.get(servletContextName);
  Properties pluginPackageProperties=getPluginPackageProperties(servletContext);
  String resourcesDir=pluginPackageProperties.getProperty("resources-importer-external-dir");
  if ((servletContext.getResource(_RESOURCES_DIR) == null) && (servletContext.getResource(_TEMPLATES_DIR) == null) && Validator.isNull(resourcesDir)) {
    return;
  }
  String targetClassName=pluginPackageProperties.getProperty("resources-importer-target-class-name",LayoutSetPrototype.class.getName());
  Set<String> resourcePaths=servletContext.getResourcePaths(_RESOURCES_DIR);
  Set<String> templatePaths=servletContext.getResourcePaths(_TEMPLATES_DIR);
  URL privateLARURL=null;
  URL publicLARURL=servletContext.getResource(_RESOURCES_DIR.concat("archive.lar"));
  if (publicLARURL == null) {
    privateLARURL=servletContext.getResource(_RESOURCES_DIR.concat("private.lar"));
    publicLARURL=servletContext.getResource(_RESOURCES_DIR.concat("public.lar"));
  }
  List<Company> companies=CompanyLocalServiceUtil.getCompanies();
  try {
    ExportImportThreadLocal.setLayoutImportInProcess(true);
    ExportImportThreadLocal.setPortletImportInProcess(true);
    for (    Company company : companies) {
      importResources(company,servletContext,message,pluginPackageProperties,resourcesDir,targetClassName,resourcePaths,templatePaths,privateLARURL,publicLARURL);
    }
  }
  finally {
    ExportImportThreadLocal.setLayoutImportInProcess(false);
    ExportImportThreadLocal.setPortletImportInProcess(false);
  }
}
