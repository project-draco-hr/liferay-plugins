{
  String servletContextName=message.getString("servletContextName");
  ServletContext servletContext=ServletContextPool.get(servletContextName);
  Properties pluginPackageProperties=getPluginPackageProperties(servletContext);
  String resourcesDir=pluginPackageProperties.getProperty("resources-importer-external-dir");
  if ((servletContext.getResource(_RESOURCES_DIR) == null) && (servletContext.getResource(_TEMPLATES_DIR) == null) && Validator.isNull(resourcesDir)) {
    return;
  }
  String targetClassName=pluginPackageProperties.getProperty("resources-importer-target-class-name",LayoutSetPrototype.class.getName());
  Set<String> resourcePaths=servletContext.getResourcePaths(_RESOURCES_DIR);
  Set<String> templatePaths=servletContext.getResourcePaths(_TEMPLATES_DIR);
  URL privateLARURL=null;
  URL publicLARURL=servletContext.getResource(_RESOURCES_DIR.concat("archive.lar"));
  if (publicLARURL == null) {
    privateLARURL=servletContext.getResource(_RESOURCES_DIR.concat("private.lar"));
    publicLARURL=servletContext.getResource(_RESOURCES_DIR.concat("public.lar"));
  }
  List<Company> companies=CompanyLocalServiceUtil.getCompanies();
  for (  Company company : companies) {
    long companyId=CompanyThreadLocal.getCompanyId();
    ExportImportThreadLocal.setLayoutImportInProcess(true);
    ExportImportThreadLocal.setPortletImportInProcess(true);
    try {
      CompanyThreadLocal.setCompanyId(company.getCompanyId());
      Importer importer=createImporter(company.getCompanyId(),resourcesDir,resourcePaths,templatePaths,privateLARURL,publicLARURL);
      boolean developerModeEnabled=configureImporter(company.getCompanyId(),importer,servletContext,pluginPackageProperties,targetClassName);
      if (!developerModeEnabled && importer.isExisting() && !importer.isCompanyGroup()) {
        if (_log.isInfoEnabled()) {
          _log.info("Group or layout set prototype already exists " + "for company " + company.getWebId());
        }
        continue;
      }
      long startTime=0;
      if (_log.isInfoEnabled()) {
        startTime=System.currentTimeMillis();
      }
      importer.importResources();
      if (_log.isInfoEnabled()) {
        long endTime=System.currentTimeMillis() - startTime;
        _log.info("Importing resources from " + servletContextName + " to group "+ importer.getGroupId()+ " takes "+ endTime+ " ms");
      }
      Message newMessage=new Message();
      newMessage.put("companyId",company.getCompanyId());
      newMessage.put("servletContextName",servletContextName);
      newMessage.put("targetClassName",targetClassName);
      newMessage.put("targetClassPK",importer.getTargetClassPK());
      if (message.getResponseId() != null) {
        Map<String,Object> responseMap=new HashMap<String,Object>();
        responseMap.put("groupId",importer.getTargetClassPK());
        newMessage.setPayload(responseMap);
        newMessage.setResponseId(message.getResponseId());
      }
      MessageBusUtil.sendMessage("liferay/resources_importer",newMessage);
    }
 catch (    ImporterException ie) {
      Message newMessage=new Message();
      newMessage.put("companyId",company.getCompanyId());
      newMessage.put("error",ie.getMessage());
      newMessage.put("servletContextName",servletContextName);
      newMessage.put("targetClassName",targetClassName);
      newMessage.put("targetClassPK",0);
      MessageBusUtil.sendMessage("liferay/resources_importer",newMessage);
    }
 finally {
      CompanyThreadLocal.setCompanyId(companyId);
      ExportImportThreadLocal.setLayoutImportInProcess(false);
      ExportImportThreadLocal.setPortletImportInProcess(false);
    }
  }
}
