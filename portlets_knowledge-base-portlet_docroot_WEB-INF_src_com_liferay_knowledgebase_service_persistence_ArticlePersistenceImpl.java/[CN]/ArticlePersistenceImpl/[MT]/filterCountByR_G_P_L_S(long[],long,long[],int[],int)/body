{
  if (!InlineSQLHelperUtil.isEnabled(groupId)) {
    return countByR_G_P_L_S(resourcePrimKeies,groupId,parentResourcePrimKeies,latests,status);
  }
  StringBundler query=new StringBundler();
  query.append(_FILTER_SQL_COUNT_ARTICLE_WHERE);
  boolean conjunctionable=false;
  if ((resourcePrimKeies == null) || (resourcePrimKeies.length > 0)) {
    if (conjunctionable) {
      query.append(WHERE_AND);
    }
    query.append(StringPool.OPEN_PARENTHESIS);
    for (int i=0; i < resourcePrimKeies.length; i++) {
      long resourcePrimKey=resourcePrimKeies[i];
      query.append(_FINDER_COLUMN_R_G_P_L_S_RESOURCEPRIMKEY_5);
      if ((i + 1) < resourcePrimKeies.length) {
        query.append(WHERE_OR);
      }
    }
    query.append(StringPool.CLOSE_PARENTHESIS);
    conjunctionable=true;
  }
  if (conjunctionable) {
    query.append(WHERE_AND);
  }
  query.append(_FINDER_COLUMN_R_G_P_L_S_GROUPID_5);
  conjunctionable=true;
  if ((parentResourcePrimKeies == null) || (parentResourcePrimKeies.length > 0)) {
    if (conjunctionable) {
      query.append(WHERE_AND);
    }
    query.append(StringPool.OPEN_PARENTHESIS);
    for (int i=0; i < parentResourcePrimKeies.length; i++) {
      long parentResourcePrimKey=parentResourcePrimKeies[i];
      query.append(_FINDER_COLUMN_R_G_P_L_S_PARENTRESOURCEPRIMKEY_5);
      if ((i + 1) < parentResourcePrimKeies.length) {
        query.append(WHERE_OR);
      }
    }
    query.append(StringPool.CLOSE_PARENTHESIS);
    conjunctionable=true;
  }
  if ((latests == null) || (latests.length > 0)) {
    if (conjunctionable) {
      query.append(WHERE_AND);
    }
    query.append(StringPool.OPEN_PARENTHESIS);
    for (int i=0; i < latests.length; i++) {
      int latest=latests[i];
      query.append(_FINDER_COLUMN_R_G_P_L_S_LATEST_5);
      if ((i + 1) < latests.length) {
        query.append(WHERE_OR);
      }
    }
    query.append(StringPool.CLOSE_PARENTHESIS);
    conjunctionable=true;
  }
  if (conjunctionable) {
    query.append(WHERE_AND);
  }
  query.append(_FINDER_COLUMN_R_G_P_L_S_STATUS_5);
  conjunctionable=true;
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),Article.class.getName(),_FILTER_COLUMN_PK,_FILTER_COLUMN_USERID,groupId);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    q.addScalar(COUNT_COLUMN_NAME,com.liferay.portal.kernel.dao.orm.Type.LONG);
    QueryPos qPos=QueryPos.getInstance(q);
    if (resourcePrimKeies != null) {
      qPos.add(resourcePrimKeies);
    }
    qPos.add(groupId);
    if (parentResourcePrimKeies != null) {
      qPos.add(parentResourcePrimKeies);
    }
    if (latests != null) {
      qPos.add(latests);
    }
    qPos.add(status);
    Long count=(Long)q.uniqueResult();
    return count.intValue();
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
