{
  if (!InlineSQLHelperUtil.isEnabled(groupId)) {
    return findByG_R_L(groupId,resourcePrimKeies,latests,start,end,orderByComparator);
  }
  StringBundler query=new StringBundler();
  if (getDB().isSupportsInlineDistinct()) {
    query.append(_FILTER_SQL_SELECT_ARTICLE_WHERE);
  }
 else {
    query.append(_FILTER_SQL_SELECT_ARTICLE_NO_INLINE_DISTINCT_WHERE_1);
  }
  boolean conjunctionable=false;
  if (conjunctionable) {
    query.append(WHERE_AND);
  }
  query.append(_FINDER_COLUMN_G_R_L_GROUPID_5);
  conjunctionable=true;
  if ((resourcePrimKeies == null) || (resourcePrimKeies.length > 0)) {
    if (conjunctionable) {
      query.append(WHERE_AND);
    }
    query.append(StringPool.OPEN_PARENTHESIS);
    for (int i=0; i < resourcePrimKeies.length; i++) {
      query.append(_FINDER_COLUMN_G_R_L_RESOURCEPRIMKEY_5);
      if ((i + 1) < resourcePrimKeies.length) {
        query.append(WHERE_OR);
      }
    }
    query.append(StringPool.CLOSE_PARENTHESIS);
    conjunctionable=true;
  }
  if ((latests == null) || (latests.length > 0)) {
    if (conjunctionable) {
      query.append(WHERE_AND);
    }
    query.append(StringPool.OPEN_PARENTHESIS);
    for (int i=0; i < latests.length; i++) {
      query.append(_FINDER_COLUMN_G_R_L_LATEST_5);
      if ((i + 1) < latests.length) {
        query.append(WHERE_OR);
      }
    }
    query.append(StringPool.CLOSE_PARENTHESIS);
    conjunctionable=true;
  }
  if (!getDB().isSupportsInlineDistinct()) {
    query.append(_FILTER_SQL_SELECT_ARTICLE_NO_INLINE_DISTINCT_WHERE_2);
  }
  if (orderByComparator != null) {
    if (getDB().isSupportsInlineDistinct()) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_TABLE,orderByComparator);
    }
  }
 else {
    if (getDB().isSupportsInlineDistinct()) {
      query.append(ArticleModelImpl.ORDER_BY_JPQL);
    }
 else {
      query.append(ArticleModelImpl.ORDER_BY_SQL);
    }
  }
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),Article.class.getName(),_FILTER_COLUMN_PK,_FILTER_COLUMN_USERID,groupId);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    if (getDB().isSupportsInlineDistinct()) {
      q.addEntity(_FILTER_ENTITY_ALIAS,ArticleImpl.class);
    }
 else {
      q.addEntity(_FILTER_ENTITY_TABLE,ArticleImpl.class);
    }
    QueryPos qPos=QueryPos.getInstance(q);
    qPos.add(groupId);
    if (resourcePrimKeies != null) {
      qPos.add(resourcePrimKeies);
    }
    if (latests != null) {
      qPos.add(latests);
    }
    return (List<Article>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
