{
  _workflowInstance=workflowInstance;
  ProcessSession processSession=ProcessSystemUtil.getCurrentSession();
  if (processSession == null) {
    throw new IllegalArgumentException("No process session while reading workflow entities");
  }
  Class<?> setupId=WorkflowEntityBridgeUtil.getSetupClassForName(workflowInstance.getSetupId());
  ProcessService processService=processSession.getService();
  ProcessModel processModel=processService.getProcessModel(workflowInstance.getWorkflowDefinitionId());
  Long relationId=null;
  long relationClassPK=workflowInstance.getRelationClassPK();
  if (relationClassPK > 0) {
    relationId=Long.valueOf(relationClassPK);
  }
  setId(workflowInstance.getPrimaryKey());
  setTenantId(workflowInstance.getCompanyId());
  setCreatedAt(workflowInstance.getCreateDate());
  setModifiedAt(workflowInstance.getModifiedDate());
  setSetupId(setupId);
  setBusinessId(workflowInstance.getFriendlyId());
  setProcessModelId(processModel.getProcessModelId());
  setProcessModelVersion(processModel.getProcessModelVersion());
  setParent(parentWorkflowInstanceBridge);
  setRelationType(workflowInstance.getRelationClassName());
  setRelationId(relationId);
  setXmlAttributeMap(workflowInstance.getAttributes());
  setNestedProcessModelIds(workflowInstance.getNestedWorkflowDefinitionIds());
  setNestedProcessVersions(workflowInstance.getNestedWorkflowDefinitionVersions());
  setNestedRelatedElements(workflowInstance.getNestedRelatedElements());
  setCurrentElement(workflowInstance.getCurrentElementName());
  setRelatedElement(workflowInstance.getRelatedElementName());
  setFinished(workflowInstance.getFinished());
  setFinishedAt(workflowInstance.getFinishedDated());
  setActive(workflowInstance.getActive());
  postLoad();
  if (loadChildren) {
    List<ProcessInstance> processInstances=(List<ProcessInstance>)WorkflowEntityBridgeUtil.wrapWorkflowInstances(workflowInstance.getChildren(),this,loadChildren);
    setChildren(processInstances);
  }
}
