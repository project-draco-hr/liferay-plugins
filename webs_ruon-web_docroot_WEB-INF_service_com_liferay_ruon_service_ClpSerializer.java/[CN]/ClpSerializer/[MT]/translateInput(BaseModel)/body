{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals(PresenceClp.class.getName())) {
    PresenceClp oldCplModel=(PresenceClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.ruon.model.impl.PresenceImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setPresenceId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getPresenceId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getUserId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setStatusId",new Class[]{Integer.TYPE});
        Integer value2=new Integer(oldCplModel.getStatusId());
        method2.invoke(newModel,value2);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
