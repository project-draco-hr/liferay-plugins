{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals(NetworkClp.class.getName())) {
    NetworkClp oldCplModel=(NetworkClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.ruon.model.impl.NetworkImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setNetworkId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getNetworkId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setName",new Class[]{String.class});
        String value1=oldCplModel.getName();
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setTtl",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getTtl());
        method2.invoke(newModel,value2);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(PresenceClp.class.getName())) {
    PresenceClp oldCplModel=(PresenceClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.ruon.model.impl.PresenceImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setPresenceId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getPresenceId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getUserId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setModifiedDate",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getModifiedDate());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setNetworkId",new Class[]{Long.TYPE});
        Long value3=new Long(oldCplModel.getNetworkId());
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setOnline",new Class[]{Boolean.TYPE});
        Boolean value4=new Boolean(oldCplModel.getOnline());
        method4.invoke(newModel,value4);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
