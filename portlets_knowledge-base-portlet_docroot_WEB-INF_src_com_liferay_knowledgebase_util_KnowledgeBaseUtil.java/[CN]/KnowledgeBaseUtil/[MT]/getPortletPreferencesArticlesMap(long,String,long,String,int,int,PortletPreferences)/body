{
  if (!isValidPortletId(portletId)) {
    return Collections.emptyMap();
  }
  Map<String,String> preferencesMap=initPortletPreferencesMap(portletId,preferences);
  String selectionMethod=preferencesMap.get("selectionMethod");
  long[] resourcePrimKeys=StringUtil.split(preferencesMap.get("resourcePrimKeys"),0L);
  boolean allArticles=GetterUtil.getBoolean(preferencesMap.get("allArticles"));
  String orderByColumn=preferencesMap.get("orderByColumn");
  boolean orderByAscending=GetterUtil.getBoolean(preferencesMap.get("orderByAscending"));
  long[] classPKs=getAssetEntriesClassPKs(groupId,assetCategoryId,assetTagName,preferencesMap);
  List<Article> articles=null;
  Integer count=null;
  if (selectionMethod.equals("group")) {
    if (classPKs != null) {
      long[] viewableParentResourcePrimKeys=new long[]{ArticleConstants.DEFAULT_PARENT_RESOURCE_PRIM_KEY};
      if (allArticles) {
        viewableParentResourcePrimKeys=ArticleServiceUtil.getViewableParentResourcePrimKeys(groupId,WorkflowConstants.STATUS_APPROVED);
      }
      articles=ArticleServiceUtil.getArticles(groupId,classPKs,WorkflowConstants.STATUS_APPROVED,viewableParentResourcePrimKeys,start,end,getOrderByComparator(orderByColumn,orderByAscending));
      count=ArticleServiceUtil.getArticlesCount(groupId,classPKs,WorkflowConstants.STATUS_APPROVED,viewableParentResourcePrimKeys);
    }
 else     if (allArticles) {
      long[] viewableParentResourcePrimKeys=ArticleServiceUtil.getViewableParentResourcePrimKeys(groupId,WorkflowConstants.STATUS_APPROVED);
      articles=ArticleServiceUtil.getGroupArticles(groupId,WorkflowConstants.STATUS_APPROVED,viewableParentResourcePrimKeys,start,end,getOrderByComparator(orderByColumn,orderByAscending));
      count=ArticleServiceUtil.getGroupArticlesCount(groupId,WorkflowConstants.STATUS_APPROVED,viewableParentResourcePrimKeys);
    }
 else {
      articles=ArticleServiceUtil.getSiblingArticles(groupId,ArticleConstants.DEFAULT_PARENT_RESOURCE_PRIM_KEY,WorkflowConstants.STATUS_APPROVED,start,end,getOrderByComparator(orderByColumn,orderByAscending));
      count=ArticleServiceUtil.getSiblingArticlesCount(groupId,ArticleConstants.DEFAULT_PARENT_RESOURCE_PRIM_KEY,WorkflowConstants.STATUS_APPROVED);
    }
  }
  if (selectionMethod.equals("articles")) {
    if (classPKs != null) {
      List<Long> list=new UniqueList<Long>();
      list.addAll(SetUtil.fromArray(resourcePrimKeys));
      list.retainAll(SetUtil.fromArray(classPKs));
      resourcePrimKeys=StringUtil.split(StringUtil.merge(list),0L);
    }
    articles=ArticleServiceUtil.getArticles(groupId,resourcePrimKeys,WorkflowConstants.STATUS_APPROVED,null,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);
    articles=sortPortletPreferencesArticles(resourcePrimKeys,articles);
    count=articles.size();
    if ((start != QueryUtil.ALL_POS) && (end != QueryUtil.ALL_POS)) {
      articles=ListUtil.subList(articles,start,end);
    }
  }
  Map<String,Object> articlesMap=new HashMap<String,Object>();
  articlesMap.put("articles",articles);
  articlesMap.put("count",count);
  return articlesMap;
}
