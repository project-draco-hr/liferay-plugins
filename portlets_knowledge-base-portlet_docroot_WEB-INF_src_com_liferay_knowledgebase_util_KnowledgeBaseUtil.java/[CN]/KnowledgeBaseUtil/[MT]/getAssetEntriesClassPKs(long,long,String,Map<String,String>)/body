{
  String selectionMethod=preferencesMap.get("selectionMethod");
  boolean assetEntryQueryContains=GetterUtil.getBoolean(preferencesMap.get("assetEntryQueryContains"));
  boolean assetEntryQueryAndOperator=GetterUtil.getBoolean(preferencesMap.get("assetEntryQueryAndOperator"));
  String assetEntryQueryName=preferencesMap.get("assetEntryQueryName");
  long[] assetCategoryIds=StringUtil.split(preferencesMap.get("assetCategoryIds"),0L);
  String[] assetTagNames=StringUtil.split(preferencesMap.get("assetTagNames"));
  boolean assetCategories=false;
  boolean assetTags=false;
  if (selectionMethod.equals("group")) {
    assetCategories=assetEntryQueryName.equals("asset-categories");
    assetTags=assetEntryQueryName.equals("asset-tags");
  }
  long[] allCategoryIds=new long[0];
  long[] anyCategoryIds=new long[0];
  long[] notAllCategoryIds=new long[0];
  long[] notAnyCategoryIds=new long[0];
  if (assetCategories) {
    if (assetEntryQueryContains && assetEntryQueryAndOperator) {
      allCategoryIds=assetCategoryIds;
    }
 else     if (assetEntryQueryContains && !assetEntryQueryAndOperator) {
      anyCategoryIds=assetCategoryIds;
    }
 else     if (!assetEntryQueryContains && assetEntryQueryAndOperator) {
      notAllCategoryIds=assetCategoryIds;
    }
 else {
      notAnyCategoryIds=assetCategoryIds;
    }
  }
  long[] allTagIds=new long[0];
  long[] anyTagIds=new long[0];
  long[] notAllTagIds=new long[0];
  long[] notAnyTagIds=new long[0];
  if (assetTags) {
    long[] tagIds=AssetTagLocalServiceUtil.getTagIds(groupId,assetTagNames);
    if (assetEntryQueryContains && assetEntryQueryAndOperator) {
      allTagIds=tagIds;
    }
 else     if (assetEntryQueryContains && !assetEntryQueryAndOperator) {
      anyTagIds=tagIds;
    }
 else     if (!assetEntryQueryContains && assetEntryQueryAndOperator) {
      notAllTagIds=tagIds;
    }
 else {
      notAnyTagIds=tagIds;
    }
  }
  if (assetCategoryId > 0) {
    allCategoryIds=ArrayUtil.append(allCategoryIds,assetCategoryId);
  }
  if (Validator.isNotNull(assetTagName)) {
    String[] names=new String[]{assetTagName};
    allTagIds=ArrayUtil.append(allTagIds,AssetTagLocalServiceUtil.getTagIds(groupId,names));
  }
  List<Long> categoryIds=new UniqueList<Long>();
  categoryIds.addAll(SetUtil.fromArray(allCategoryIds));
  categoryIds.addAll(SetUtil.fromArray(anyCategoryIds));
  for (  long categoryId : categoryIds) {
    try {
      AssetCategoryServiceUtil.getCategory(categoryId);
    }
 catch (    PrincipalException pe) {
      allCategoryIds=ArrayUtil.remove(allCategoryIds,categoryId);
      anyCategoryIds=ArrayUtil.remove(anyCategoryIds,categoryId);
    }
  }
  List<Long> tagIds=new UniqueList<Long>();
  tagIds.addAll(SetUtil.fromArray(allTagIds));
  tagIds.addAll(SetUtil.fromArray(anyTagIds));
  for (  long tagId : tagIds) {
    try {
      AssetTagServiceUtil.getTag(tagId);
    }
 catch (    PrincipalException pe) {
      allTagIds=ArrayUtil.remove(allTagIds,tagId);
      anyTagIds=ArrayUtil.remove(anyTagIds,tagId);
    }
  }
  if ((allCategoryIds.length == 0) && (allTagIds.length == 0) && (anyCategoryIds.length == 0)&& (anyTagIds.length == 0)&& (notAllCategoryIds.length == 0)&& (notAllTagIds.length == 0)&& (notAnyCategoryIds.length == 0)&& (notAnyTagIds.length == 0)) {
    if (!assetEntryQueryContains) {
      return null;
    }
 else     if (((assetCategoryIds.length > 0) && assetCategories) || ((assetTagNames.length > 0) && assetTags)) {
      return new long[0];
    }
 else {
      return null;
    }
  }
  AssetEntryQuery assetEntryQuery=new AssetEntryQuery();
  assetEntryQuery.setClassName(Article.class.getName());
  assetEntryQuery.setGroupIds(new long[]{groupId});
  assetEntryQuery.setAllCategoryIds(allCategoryIds);
  assetEntryQuery.setAnyCategoryIds(anyCategoryIds);
  assetEntryQuery.setNotAllCategoryIds(notAllCategoryIds);
  assetEntryQuery.setNotAnyCategoryIds(notAnyCategoryIds);
  assetEntryQuery.setAllTagIds(allTagIds);
  assetEntryQuery.setAnyTagIds(anyTagIds);
  assetEntryQuery.setNotAllTagIds(notAllTagIds);
  assetEntryQuery.setNotAnyTagIds(notAnyTagIds);
  List<AssetEntry> assetEntries=AssetEntryLocalServiceUtil.getEntries(assetEntryQuery);
  return StringUtil.split(ListUtil.toString(assetEntries,"classPK"),0L);
}
