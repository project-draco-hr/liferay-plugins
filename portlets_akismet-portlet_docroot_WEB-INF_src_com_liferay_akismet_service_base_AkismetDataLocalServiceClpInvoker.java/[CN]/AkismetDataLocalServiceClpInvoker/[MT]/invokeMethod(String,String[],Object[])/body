{
  if (_methodName0.equals(name) && Arrays.deepEquals(_methodParameterTypes0,parameterTypes)) {
    return AkismetDataLocalServiceUtil.addAkismetData((com.liferay.akismet.model.AkismetData)arguments[0]);
  }
  if (_methodName1.equals(name) && Arrays.deepEquals(_methodParameterTypes1,parameterTypes)) {
    return AkismetDataLocalServiceUtil.createAkismetData(((Long)arguments[0]).longValue());
  }
  if (_methodName2.equals(name) && Arrays.deepEquals(_methodParameterTypes2,parameterTypes)) {
    return AkismetDataLocalServiceUtil.deleteAkismetData(((Long)arguments[0]).longValue());
  }
  if (_methodName3.equals(name) && Arrays.deepEquals(_methodParameterTypes3,parameterTypes)) {
    return AkismetDataLocalServiceUtil.deleteAkismetData((com.liferay.akismet.model.AkismetData)arguments[0]);
  }
  if (_methodName4.equals(name) && Arrays.deepEquals(_methodParameterTypes4,parameterTypes)) {
    return AkismetDataLocalServiceUtil.dynamicQuery();
  }
  if (_methodName5.equals(name) && Arrays.deepEquals(_methodParameterTypes5,parameterTypes)) {
    return AkismetDataLocalServiceUtil.dynamicQuery((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0]);
  }
  if (_methodName6.equals(name) && Arrays.deepEquals(_methodParameterTypes6,parameterTypes)) {
    return AkismetDataLocalServiceUtil.dynamicQuery((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0],((Integer)arguments[1]).intValue(),((Integer)arguments[2]).intValue());
  }
  if (_methodName7.equals(name) && Arrays.deepEquals(_methodParameterTypes7,parameterTypes)) {
    return AkismetDataLocalServiceUtil.dynamicQuery((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0],((Integer)arguments[1]).intValue(),((Integer)arguments[2]).intValue(),(com.liferay.portal.kernel.util.OrderByComparator)arguments[3]);
  }
  if (_methodName8.equals(name) && Arrays.deepEquals(_methodParameterTypes8,parameterTypes)) {
    return AkismetDataLocalServiceUtil.dynamicQueryCount((com.liferay.portal.kernel.dao.orm.DynamicQuery)arguments[0]);
  }
  if (_methodName9.equals(name) && Arrays.deepEquals(_methodParameterTypes9,parameterTypes)) {
    return AkismetDataLocalServiceUtil.fetchAkismetData(((Long)arguments[0]).longValue());
  }
  if (_methodName10.equals(name) && Arrays.deepEquals(_methodParameterTypes10,parameterTypes)) {
    return AkismetDataLocalServiceUtil.getAkismetData(((Long)arguments[0]).longValue());
  }
  if (_methodName11.equals(name) && Arrays.deepEquals(_methodParameterTypes11,parameterTypes)) {
    return AkismetDataLocalServiceUtil.getPersistedModel((java.io.Serializable)arguments[0]);
  }
  if (_methodName12.equals(name) && Arrays.deepEquals(_methodParameterTypes12,parameterTypes)) {
    return AkismetDataLocalServiceUtil.getAkismetDatas(((Integer)arguments[0]).intValue(),((Integer)arguments[1]).intValue());
  }
  if (_methodName13.equals(name) && Arrays.deepEquals(_methodParameterTypes13,parameterTypes)) {
    return AkismetDataLocalServiceUtil.getAkismetDatasCount();
  }
  if (_methodName14.equals(name) && Arrays.deepEquals(_methodParameterTypes14,parameterTypes)) {
    return AkismetDataLocalServiceUtil.updateAkismetData((com.liferay.akismet.model.AkismetData)arguments[0]);
  }
  if (_methodName15.equals(name) && Arrays.deepEquals(_methodParameterTypes15,parameterTypes)) {
    return AkismetDataLocalServiceUtil.updateAkismetData((com.liferay.akismet.model.AkismetData)arguments[0],((Boolean)arguments[1]).booleanValue());
  }
  if (_methodName32.equals(name) && Arrays.deepEquals(_methodParameterTypes32,parameterTypes)) {
    return AkismetDataLocalServiceUtil.getBeanIdentifier();
  }
  if (_methodName33.equals(name) && Arrays.deepEquals(_methodParameterTypes33,parameterTypes)) {
    AkismetDataLocalServiceUtil.setBeanIdentifier((java.lang.String)arguments[0]);
    return null;
  }
  if (_methodName38.equals(name) && Arrays.deepEquals(_methodParameterTypes38,parameterTypes)) {
    AkismetDataLocalServiceUtil.deleteAkismetData((java.util.Date)arguments[0]);
    return null;
  }
  if (_methodName39.equals(name) && Arrays.deepEquals(_methodParameterTypes39,parameterTypes)) {
    AkismetDataLocalServiceUtil.deleteMBMessageAkismetData(((Long)arguments[0]).longValue());
    return null;
  }
  if (_methodName40.equals(name) && Arrays.deepEquals(_methodParameterTypes40,parameterTypes)) {
    return AkismetDataLocalServiceUtil.fetchMBMessageAkismetData(((Long)arguments[0]).longValue());
  }
  if (_methodName41.equals(name) && Arrays.deepEquals(_methodParameterTypes41,parameterTypes)) {
    return AkismetDataLocalServiceUtil.updateAkismetData(((Long)arguments[0]).longValue(),(java.lang.String)arguments[1],(java.lang.String)arguments[2],(java.lang.String)arguments[3],(java.lang.String)arguments[4],(java.lang.String)arguments[5],(java.lang.String)arguments[6]);
  }
  throw new UnsupportedOperationException();
}
