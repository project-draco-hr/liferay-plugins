{
  User user=userPersistence.findByPrimaryKey(userId);
  Calendar calendar=calendarPersistence.findByPrimaryKey(calendarId);
  Date now=new Date();
  TimeZone timeZone=user.getTimeZone();
  if (parentCalendarBookingId > 0) {
    CalendarBooking parentCalendarBooking=CalendarBookingLocalServiceUtil.getCalendarBooking(parentCalendarBookingId);
    User creatorUser=userPersistence.findByPrimaryKey(parentCalendarBooking.getUserId());
    timeZone=creatorUser.getTimeZone();
  }
  java.util.Calendar startDateCal=CalendarUtil.getCalendar(startDate,timeZone);
  java.util.Calendar endDateCal=CalendarUtil.getCalendar(endDate,timeZone);
  if (allDay) {
    startDateCal=CalendarUtil.toMidnight(startDateCal);
    endDateCal=CalendarUtil.toLastHour(endDateCal);
  }
  validate(titleMap,startDateCal,endDateCal);
  if (firstReminder < secondReminder) {
    int originalSecondReminder=secondReminder;
    secondReminder=firstReminder;
    firstReminder=originalSecondReminder;
  }
  long calendarBookingId=counterLocalService.increment();
  CalendarBooking calendarBooking=calendarBookingPersistence.create(calendarBookingId);
  calendarBooking.setUuid(serviceContext.getUuid());
  calendarBooking.setGroupId(calendar.getGroupId());
  calendarBooking.setCompanyId(user.getCompanyId());
  calendarBooking.setUserId(user.getUserId());
  calendarBooking.setUserName(user.getFullName());
  calendarBooking.setCreateDate(serviceContext.getCreateDate(now));
  calendarBooking.setModifiedDate(serviceContext.getModifiedDate(now));
  calendarBooking.setCalendarId(calendarId);
  calendarBooking.setCalendarResourceId(calendar.getCalendarResourceId());
  int status=CalendarBookingWorkflowConstants.STATUS_PENDING;
  if (parentCalendarBookingId == 0) {
    parentCalendarBookingId=calendarBookingId;
    status=CalendarBookingWorkflowConstants.STATUS_APPROVED;
  }
  calendarBooking.setParentCalendarBookingId(parentCalendarBookingId);
  calendarBooking.setTitleMap(titleMap);
  calendarBooking.setDescriptionMap(descriptionMap);
  calendarBooking.setLocation(location);
  calendarBooking.setStartDate(startDateCal.getTime());
  calendarBooking.setEndDate(endDateCal.getTime());
  calendarBooking.setAllDay(allDay);
  calendarBooking.setRecurrence(recurrence);
  calendarBooking.setFirstReminder(firstReminder);
  calendarBooking.setSecondReminder(secondReminder);
  calendarBooking.setStatus(status);
  calendarBooking.setStatusDate(serviceContext.getModifiedDate(now));
  calendarBookingPersistence.update(calendarBooking,false);
  calendarBookingApprovalWorkflow.startWorkflow(userId,calendarBookingId,serviceContext);
  return calendarBooking;
}
