{
  User user=userPersistence.findByPrimaryKey(userId);
  CalendarBooking calendarBooking=calendarBookingPersistence.findByPrimaryKey(calendarBookingId);
  java.util.Calendar startDateJCalendar=JCalendarUtil.getJCalendar(startDate,user.getTimeZone());
  java.util.Calendar endDateJCalendar=JCalendarUtil.getJCalendar(endDate,user.getTimeZone());
  if (allDay) {
    startDateJCalendar=toMidnightJCalendar(startDateJCalendar);
    endDateJCalendar=toLastHourJCalendar(endDateJCalendar);
  }
  if (firstReminder < secondReminder) {
    int originalSecondReminder=secondReminder;
    secondReminder=firstReminder;
    firstReminder=originalSecondReminder;
  }
  validate(titleMap,startDateJCalendar,endDateJCalendar);
  calendarBooking.setCompanyId(user.getCompanyId());
  calendarBooking.setUserId(user.getUserId());
  calendarBooking.setUserName(user.getFullName());
  calendarBooking.setModifiedDate(serviceContext.getModifiedDate(null));
  calendarBooking.setCalendarId(calendarId);
  calendarBooking.setTitleMap(titleMap);
  calendarBooking.setDescriptionMap(descriptionMap);
  calendarBooking.setLocation(location);
  calendarBooking.setStartDate(startDateJCalendar.getTime());
  calendarBooking.setEndDate(endDateJCalendar.getTime());
  calendarBooking.setAllDay(allDay);
  calendarBooking.setRecurrence(recurrence);
  calendarBooking.setFirstReminder(firstReminder);
  calendarBooking.setSecondReminder(secondReminder);
  calendarBookingPersistence.update(calendarBooking,false);
  calendarBookingApprovalWorkflow.invokeTransition(userId,calendarBookingId,CalendarBookingWorkflowConstants.toLabel(status),serviceContext);
  return calendarBooking;
}
