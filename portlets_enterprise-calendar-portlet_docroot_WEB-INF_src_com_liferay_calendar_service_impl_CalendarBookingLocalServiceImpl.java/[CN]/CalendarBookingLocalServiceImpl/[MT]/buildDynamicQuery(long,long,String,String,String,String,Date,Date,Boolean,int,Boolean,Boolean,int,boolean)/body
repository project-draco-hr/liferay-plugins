{
  Junction junction=null;
  if (andOperator) {
    junction=RestrictionsFactoryUtil.conjunction();
  }
 else {
    junction=RestrictionsFactoryUtil.disjunction();
  }
  Map<String,String> terms=new HashMap<String,String>();
  if (Validator.isNotNull(title)) {
    terms.put("title",title);
  }
  if (Validator.isNotNull(description)) {
    terms.put("description",description);
  }
  if (Validator.isNotNull(location)) {
    terms.put("location",location);
  }
  for (  Map.Entry<String,String> entry : terms.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue();
    Disjunction disjunction=RestrictionsFactoryUtil.disjunction();
    for (    String keyword : CalendarUtil.splitKeywords(value)) {
      Criterion criterion=RestrictionsFactoryUtil.ilike(key,StringUtil.quote(keyword,StringPool.PERCENT));
      disjunction.add(criterion);
    }
    junction.add(disjunction);
  }
  DynamicQuery dynamicQuery=DynamicQueryFactoryUtil.forClass(CalendarBooking.class,getClass().getClassLoader());
  if (calendarId > 0) {
    Property property=PropertyFactoryUtil.forName("calendarId");
    dynamicQuery.add(property.eq(calendarId));
  }
  if (calendarResourceId > 0) {
    Property property=PropertyFactoryUtil.forName("calendarResourceId");
    dynamicQuery.add(property.eq(calendarResourceId));
  }
  if (Validator.isNotNull(type)) {
    Property property=PropertyFactoryUtil.forName("type");
    dynamicQuery.add(property.eq(type));
  }
  if ((endDate != null) && (startDate != null)) {
    Conjunction conjunction=RestrictionsFactoryUtil.conjunction();
    Property propertyEnd=PropertyFactoryUtil.forName("endDate");
    Property propertyStart=PropertyFactoryUtil.forName("startDate");
    conjunction.add(propertyEnd.ge(startDate));
    conjunction.add(propertyStart.le(endDate));
    dynamicQuery.add(conjunction);
  }
  if (allDay != null) {
    Property property=PropertyFactoryUtil.forName("allDay");
    dynamicQuery.add(property.eq(allDay));
  }
  if (priority >= 0) {
    Property property=PropertyFactoryUtil.forName("priority");
    dynamicQuery.add(property.eq(priority));
  }
  if (outOfOffice != null) {
    Property property=PropertyFactoryUtil.forName("outOfOffice");
    dynamicQuery.add(property.eq(outOfOffice));
  }
  if (required != null) {
    Property property=PropertyFactoryUtil.forName("required");
    dynamicQuery.add(property.eq(required));
  }
  if (status != WorkflowConstants.STATUS_ANY) {
    Property property=PropertyFactoryUtil.forName("status");
    dynamicQuery.add(property.eq(status));
  }
  return dynamicQuery.add(junction);
}
