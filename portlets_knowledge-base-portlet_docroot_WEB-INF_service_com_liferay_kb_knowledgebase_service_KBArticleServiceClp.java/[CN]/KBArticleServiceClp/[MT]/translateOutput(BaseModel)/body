{
  Class oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals("com.liferay.kb.knowledgebase.model.impl.KBArticleImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        KBArticleClp newModel=new KBArticleClp();
        Method method0=oldModelClass.getMethod("getUuid");
        String value0=(String)method0.invoke(oldModel,(Object[])null);
        newModel.setUuid(value0);
        Method method1=oldModelClass.getMethod("getArticleId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setArticleId(value1.longValue());
        Method method2=oldModelClass.getMethod("getGroupId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setGroupId(value2.longValue());
        Method method3=oldModelClass.getMethod("getResourcePrimKey");
        Long value3=(Long)method3.invoke(oldModel,(Object[])null);
        newModel.setResourcePrimKey(value3.longValue());
        Method method4=oldModelClass.getMethod("getCompanyId");
        Long value4=(Long)method4.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value4.longValue());
        Method method5=oldModelClass.getMethod("getUserId");
        Long value5=(Long)method5.invoke(oldModel,(Object[])null);
        newModel.setUserId(value5.longValue());
        Method method6=oldModelClass.getMethod("getUserName");
        String value6=(String)method6.invoke(oldModel,(Object[])null);
        newModel.setUserName(value6);
        Method method7=oldModelClass.getMethod("getModifiedDate");
        Date value7=(Date)method7.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value7);
        Method method8=oldModelClass.getMethod("getTitle");
        String value8=(String)method8.invoke(oldModel,(Object[])null);
        newModel.setTitle(value8);
        Method method9=oldModelClass.getMethod("getVersion");
        Double value9=(Double)method9.invoke(oldModel,(Object[])null);
        newModel.setVersion(value9.doubleValue());
        Method method10=oldModelClass.getMethod("getMinorEdit");
        Boolean value10=(Boolean)method10.invoke(oldModel,(Object[])null);
        newModel.setMinorEdit(value10.booleanValue());
        Method method11=oldModelClass.getMethod("getContent");
        String value11=(String)method11.invoke(oldModel,(Object[])null);
        newModel.setContent(value11);
        Method method12=oldModelClass.getMethod("getDescription");
        String value12=(String)method12.invoke(oldModel,(Object[])null);
        newModel.setDescription(value12);
        Method method13=oldModelClass.getMethod("getHead");
        Boolean value13=(Boolean)method13.invoke(oldModel,(Object[])null);
        newModel.setHead(value13.booleanValue());
        Method method14=oldModelClass.getMethod("getTemplate");
        Boolean value14=(Boolean)method14.invoke(oldModel,(Object[])null);
        newModel.setTemplate(value14.booleanValue());
        Method method15=oldModelClass.getMethod("getDraft");
        Boolean value15=(Boolean)method15.invoke(oldModel,(Object[])null);
        newModel.setDraft(value15.booleanValue());
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
