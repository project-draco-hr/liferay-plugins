{
  String name=ParamUtil.getString(actionRequest,"name");
  String description=ParamUtil.getString(actionRequest,"description");
  int type=ParamUtil.getInteger(actionRequest,"type");
  ServiceContext serviceContext=ServiceContextFactory.getInstance(Group.class.getName(),actionRequest);
  Group group=GroupServiceUtil.addGroup(name,description,type,StringPool.BLANK,true,true,serviceContext);
  ExpandoBridge expandoBridge=group.getExpandoBridge();
  expandoBridge.setAttribute("socialOfficeEnabled",Boolean.TRUE);
  UnicodeProperties typeSettingsProperties=group.getTypeSettingsProperties();
  typeSettingsProperties.setProperty("customJspServletContextName","so-hook");
  group=GroupServiceUtil.updateGroup(group.getGroupId(),typeSettingsProperties.toString());
  long layoutSetPrototypeId=ParamUtil.getLong(actionRequest,"layoutSetPrototypeId");
  boolean privateLayout=false;
  if (type != GroupConstants.TYPE_SITE_OPEN) {
    privateLayout=true;
  }
  long publicLayoutSetPrototypeId=0;
  long privateLayoutSetPrototypeId=0;
  if (privateLayout) {
    privateLayoutSetPrototypeId=layoutSetPrototypeId;
  }
 else {
    publicLayoutSetPrototypeId=layoutSetPrototypeId;
  }
  PortalClassInvoker.invoke(true,_applyLayoutSetPrototypesMethodKey,group,publicLayoutSetPrototypeId,privateLayoutSetPrototypeId,serviceContext);
  long[] deleteLayoutIds=getLongArray(actionRequest,"deleteLayoutIds");
  List<Layout> layouts=new ArrayList<Layout>(deleteLayoutIds.length);
  for (  long deleteLayoutId : deleteLayoutIds) {
    Layout layout=LayoutLocalServiceUtil.getLayout(group.getGroupId(),privateLayout,deleteLayoutId);
    layouts.add(layout);
  }
  for (  Layout layout : layouts) {
    LayoutLocalServiceUtil.deleteLayout(layout,true);
  }
}
