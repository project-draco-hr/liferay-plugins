{
  Object[] finderArgs=new Object[]{uuid,groupId};
  Object result=null;
  if (retrieveFromCache) {
    result=FinderCacheUtil.getResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,this);
  }
  if (result instanceof Calendar) {
    Calendar calendar=(Calendar)result;
    if (!Validator.equals(uuid,calendar.getUuid()) || (groupId != calendar.getGroupId())) {
      result=null;
    }
  }
  if (result == null) {
    StringBundler query=new StringBundler(4);
    query.append(_SQL_SELECT_CALENDAR_WHERE);
    if (uuid == null) {
      query.append(_FINDER_COLUMN_UUID_G_UUID_1);
    }
 else {
      if (uuid.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_UUID_G_UUID_3);
      }
 else {
        query.append(_FINDER_COLUMN_UUID_G_UUID_2);
      }
    }
    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);
    query.append(CalendarModelImpl.ORDER_BY_JPQL);
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (uuid != null) {
        qPos.add(uuid);
      }
      qPos.add(groupId);
      List<Calendar> list=q.list();
      result=list;
      Calendar calendar=null;
      if (list.isEmpty()) {
        FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,list);
      }
 else {
        calendar=list.get(0);
        cacheResult(calendar);
        if ((calendar.getUuid() == null) || !calendar.getUuid().equals(uuid) || (calendar.getGroupId() != groupId)) {
          FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,calendar);
        }
      }
      return calendar;
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (result == null) {
        FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs);
      }
      closeSession(session);
    }
  }
 else {
    if (result instanceof List<?>) {
      return null;
    }
 else {
      return (Calendar)result;
    }
  }
}
