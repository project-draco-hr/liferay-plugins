{
  JSONObject testCaseJSONObject=JSONFactoryUtil.createJSONObject();
  Class<? extends TestCase> testCaseClass=getClass();
  testCaseJSONObject.put("name",testCaseClass.getName());
  Method setUpMethod=null;
  try {
    setUpMethod=testCaseClass.getMethod("setUp");
  }
 catch (  Exception e) {
  }
  Method tearDownMethod=null;
  try {
    tearDownMethod=testCaseClass.getMethod("tearDown");
  }
 catch (  Exception e) {
  }
  JSONArray testResultsJSONArray=JSONFactoryUtil.createJSONArray();
  testCaseJSONObject.put("testResults",testResultsJSONArray);
  Method[] methods=testCaseClass.getMethods();
  Arrays.sort(methods,new MethodComparator());
  for (  Method method : methods) {
    String methodName=method.getName();
    if (methodName.startsWith("test")) {
      JSONObject testResult=JSONFactoryUtil.createJSONObject();
      testResult.put("name",methodName);
      try {
        if (setUpMethod != null) {
          setUpMethod.invoke(this);
        }
        method.invoke(this);
        if (tearDownMethod != null) {
          tearDownMethod.invoke(this);
        }
        testResult.put("status","PASSED");
      }
 catch (      Exception e) {
        Throwable throwable=e.getCause();
        testResult.put("exceptionMessage",throwable.getMessage());
        testResult.put("exceptionStackTrace",StackTraceUtil.getStackTrace(throwable));
        testResult.put("status","FAILED");
      }
      testResultsJSONArray.put(testResult);
    }
  }
  return testCaseJSONObject;
}
