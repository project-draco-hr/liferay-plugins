{
  String rootPortletId=PortletConstants.getRootPortletId(portletId);
  if (!rootPortletId.equals(PortletKeys.KNOWLEDGE_BASE_DISPLAY)) {
    return null;
  }
  Layout layout=LayoutLocalServiceUtil.getLayout(plid);
  Group group=layout.getGroup();
  PortletPreferences jxPreferences=PortletPreferencesFactoryUtil.getPortletSetup(layout,portletId,StringPool.BLANK);
  String selectionMethod=jxPreferences.getValue("selection-method","group");
  long[] resourcePrimKeys=GetterUtil.getLongValues(jxPreferences.getValues("resource-prim-keys",null));
  boolean allArticles=GetterUtil.getBoolean(jxPreferences.getValue("all-articles",null),true);
  String orderByColumn=jxPreferences.getValue("order-by-column","modified-date");
  boolean orderByAscending=GetterUtil.getBoolean(jxPreferences.getValue("order-by-ascending",null));
  OrderByComparator orderByComparator=null;
  if (orderByColumn.equals("create-date")) {
    orderByComparator=new ArticleCreateDateComparator(orderByAscending);
  }
 else   if (orderByColumn.equals("modified-date")) {
    orderByComparator=new ArticleModifiedDateComparator(orderByAscending);
  }
  int delta=SearchContainer.DEFAULT_DELTA;
  int lastIntervalStart=0;
  boolean listNotExhausted=true;
  while (listNotExhausted) {
    List<Article> articles=new ArrayList<Article>();
    if (selectionMethod.equals("articles")) {
      List<AssetEntry> assetEntries=getAssetEntries(plid,portletId,assetCategoryId,assetTagName);
      if (assetEntries != null) {
        long[] classPKs=StringUtil.split(ListUtil.toString(assetEntries,"classPK"),0L);
        Set<Long> classPKsSet=SetUtil.fromArray(classPKs);
        Set<Long> resourcePrimKeysSet=SetUtil.fromArray(resourcePrimKeys);
        resourcePrimKeysSet.retainAll(classPKsSet);
        resourcePrimKeys=StringUtil.split(StringUtil.merge(resourcePrimKeysSet),0L);
      }
      articles=getArticles(resourcePrimKeys,lastIntervalStart,lastIntervalStart + delta,false);
    }
 else     if (selectionMethod.equals("group")) {
      Map<String,Object> params=new HashMap<String,Object>();
      params.put("groupId",group.getGroupId());
      params.put("status",WorkflowConstants.STATUS_APPROVED);
      if (!allArticles) {
        params.put("parentResourcePrimKey",ArticleConstants.DEFAULT_PARENT_RESOURCE_PRIM_KEY);
      }
      List<AssetEntry> assetEntries=getAssetEntries(plid,portletId,assetCategoryId,assetTagName);
      if (assetEntries != null) {
        long[] classPKs=StringUtil.split(ListUtil.toString(assetEntries,"classPK"),0L);
        params.put("resourcePrimKey",ArrayUtil.toArray(classPKs));
      }
      articles=ArticleLocalServiceUtil.getArticles(params,false,lastIntervalStart,lastIntervalStart + delta,orderByComparator);
    }
    Iterator<Article> itr=articles.iterator();
    lastIntervalStart+=delta;
    listNotExhausted=(articles.size() == delta);
    while (itr.hasNext()) {
      Article article=itr.next();
      if (ArticlePermission.contains(permissionChecker,article,ActionKeys.VIEW)) {
        return article;
      }
    }
  }
  return null;
}
