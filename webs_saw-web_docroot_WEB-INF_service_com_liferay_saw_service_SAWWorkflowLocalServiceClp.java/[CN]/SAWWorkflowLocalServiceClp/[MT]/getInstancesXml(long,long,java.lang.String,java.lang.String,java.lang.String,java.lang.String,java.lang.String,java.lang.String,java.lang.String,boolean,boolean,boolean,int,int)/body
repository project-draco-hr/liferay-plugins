{
  Object paramObj0=new LongWrapper(definitionId);
  Object paramObj1=new LongWrapper(instanceId);
  Object paramObj2=ClpSerializer.translateInput(definitionName);
  if (definitionName == null) {
    paramObj2=new NullWrapper("java.lang.String");
  }
  Object paramObj3=ClpSerializer.translateInput(definitionVersion);
  if (definitionVersion == null) {
    paramObj3=new NullWrapper("java.lang.String");
  }
  Object paramObj4=ClpSerializer.translateInput(startDateGT);
  if (startDateGT == null) {
    paramObj4=new NullWrapper("java.lang.String");
  }
  Object paramObj5=ClpSerializer.translateInput(startDateLT);
  if (startDateLT == null) {
    paramObj5=new NullWrapper("java.lang.String");
  }
  Object paramObj6=ClpSerializer.translateInput(endDateGT);
  if (endDateGT == null) {
    paramObj6=new NullWrapper("java.lang.String");
  }
  Object paramObj7=ClpSerializer.translateInput(endDateLT);
  if (endDateLT == null) {
    paramObj7=new NullWrapper("java.lang.String");
  }
  Object paramObj8=ClpSerializer.translateInput(userId);
  if (userId == null) {
    paramObj8=new NullWrapper("java.lang.String");
  }
  Object paramObj9=new BooleanWrapper(hideEndedTasks);
  Object paramObj10=new BooleanWrapper(retrieveUserInstances);
  Object paramObj11=new BooleanWrapper(andOperator);
  Object paramObj12=new IntegerWrapper(start);
  Object paramObj13=new IntegerWrapper(end);
  Object returnObj=null;
  try {
    returnObj=_classLoaderProxy.invoke("getInstancesXml",new Object[]{paramObj0,paramObj1,paramObj2,paramObj3,paramObj4,paramObj5,paramObj6,paramObj7,paramObj8,paramObj9,paramObj10,paramObj11,paramObj12,paramObj13});
  }
 catch (  Throwable t) {
    if (t instanceof com.liferay.portal.kernel.jbi.WorkflowComponentException) {
      throw (com.liferay.portal.kernel.jbi.WorkflowComponentException)t;
    }
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RuntimeException(t.getClass().getName() + " is not a valid exception");
    }
  }
  return (java.lang.String)ClpSerializer.translateOutput(returnObj);
}
