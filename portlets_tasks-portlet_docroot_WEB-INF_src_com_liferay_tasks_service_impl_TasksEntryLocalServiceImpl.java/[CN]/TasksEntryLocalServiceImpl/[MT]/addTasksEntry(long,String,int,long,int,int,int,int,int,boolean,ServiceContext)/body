{
  User user=UserLocalServiceUtil.getUserById(userId);
  long groupId=serviceContext.getScopeGroupId();
  Date now=new Date();
  Date dueDate=null;
  if (!neverDue) {
    dueDate=PortalUtil.getDate(dueDateMonth,dueDateDay,dueDateYear,dueDateHour,dueDateMinute,user.getTimeZone(),TasksEntryDueDateException.class);
  }
  long tasksEntryId=CounterLocalServiceUtil.increment();
  TasksEntry tasksEntry=tasksEntryPersistence.create(tasksEntryId);
  tasksEntry.setGroupId(groupId);
  tasksEntry.setCompanyId(user.getCompanyId());
  tasksEntry.setUserId(user.getUserId());
  tasksEntry.setUserName(user.getFullName());
  tasksEntry.setCreateDate(now);
  tasksEntry.setModifiedDate(now);
  tasksEntry.setTitle(title);
  tasksEntry.setPriority(priority);
  tasksEntry.setAssigneeUserId(assigneeUserId);
  tasksEntry.setDueDate(dueDate);
  tasksEntry.setStatus(TasksEntryConstants.STATUS_OPEN);
  tasksEntryPersistence.update(tasksEntry);
  resourceLocalService.addModelResources(tasksEntry,serviceContext);
  updateAsset(userId,tasksEntry,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
  extraDataJSONObject.put("title",tasksEntry.getTitle());
  SocialActivityLocalServiceUtil.addActivity(userId,groupId,TasksEntry.class.getName(),tasksEntryId,TasksActivityKeys.ADD_ENTRY,extraDataJSONObject.toString(),assigneeUserId);
  sendNotificationEvent(tasksEntry,TasksEntryConstants.STATUS_ALL,assigneeUserId,serviceContext);
  return tasksEntry;
}
