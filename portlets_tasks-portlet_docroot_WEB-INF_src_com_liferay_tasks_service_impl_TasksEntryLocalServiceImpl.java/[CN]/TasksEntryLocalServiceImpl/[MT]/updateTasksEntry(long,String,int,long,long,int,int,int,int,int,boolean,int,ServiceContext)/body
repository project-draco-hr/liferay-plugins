{
  Date now=new Date();
  TasksEntry tasksEntry=tasksEntryPersistence.findByPrimaryKey(tasksEntryId);
  User user=UserLocalServiceUtil.getUserById(tasksEntry.getUserId());
  Date dueDate=null;
  if (!neverDue) {
    dueDate=PortalUtil.getDate(dueDateMonth,dueDateDay,dueDateYear,dueDateHour,dueDateMinute,user.getTimeZone(),new TasksEntryDueDateException());
  }
  long previousAssigneeUserId=tasksEntry.getAssigneeUserId();
  int previousStatus=tasksEntry.getStatus();
  tasksEntry.setModifiedDate(now);
  tasksEntry.setTitle(title);
  tasksEntry.setPriority(priority);
  tasksEntry.setAssigneeUserId(assigneeUserId);
  tasksEntry.setDueDate(dueDate);
  if (status == TasksEntryConstants.STATUS_RESOLVED) {
    tasksEntry.setResolverUserId(resolverUserId);
    tasksEntry.setFinishDate(now);
  }
 else {
    tasksEntry.setResolverUserId(0);
    tasksEntry.setFinishDate(null);
  }
  tasksEntry.setStatus(status);
  tasksEntryPersistence.update(tasksEntry,false);
  updateAsset(tasksEntry.getUserId(),tasksEntry,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  int activity=TasksActivityKeys.UPDATE_ENTRY;
  if (status == TasksEntryConstants.STATUS_RESOLVED) {
    activity=TasksActivityKeys.RESOLVE_ENTRY;
  }
 else   if (status == TasksEntryConstants.STATUS_REOPENED) {
    activity=TasksActivityKeys.REOPEN_ENTRY;
  }
  SocialActivityLocalServiceUtil.addActivity(serviceContext.getUserId(),tasksEntry.getGroupId(),TasksEntry.class.getName(),tasksEntryId,activity,StringPool.BLANK,assigneeUserId);
  sendNotificationEvent(tasksEntry,previousStatus,previousAssigneeUserId,serviceContext);
  return tasksEntry;
}
