{
  Connection con=null;
  PreparedStatement ps=null;
  ResultSet rs=null;
  long parentKaleoInstanceTokenId=0;
  try {
    con=DataAccess.getConnection();
    StringBundler sb=new StringBundler();
    sb.append("select kaleoNode.type_, ");
    sb.append("kaleoInstanceToken.kaleoInstanceTokenId ");
    sb.append("from kaleoNode inner join kaleoInstanceToken on ");
    sb.append("(kaleonode.kaleonodeId = ");
    sb.append("kaleoInstanceToken.currentKaleoNodeId) ");
    sb.append("where kaleoInstanceToken.kaleoInstanceTokenId = ");
    sb.append("(select parentKaleoInstanceTokenId ");
    sb.append("from kaleoInstanceToken ");
    sb.append("where kaleoInstanceTokenId = ? )");
    String sql=sb.toString();
    ps=con.prepareStatement(sql);
    ps.setLong(1,kaleoInstanceTokenId);
    rs=ps.executeQuery();
    if (rs.next()) {
      String nodeType=rs.getString("type_");
      parentKaleoInstanceTokenId=rs.getLong("kaleoInstanceTokenId");
      if (!nodeType.equals(NodeType.TASK.toString())) {
        return kaleoInstanceTokenId;
      }
      kaleoInstanceTokenIds.add(kaleoInstanceTokenId);
    }
 else {
      return kaleoInstanceTokenId;
    }
  }
  finally {
    DataAccess.cleanUp(con,ps,rs);
  }
  return getKaleoInstanceTokenId(parentKaleoInstanceTokenId);
}
