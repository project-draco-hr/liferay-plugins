{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals(WSRPConfiguredProducerClp.class.getName())) {
    WSRPConfiguredProducerClp oldCplModel=(WSRPConfiguredProducerClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.wsrp.model.impl.WSRPConfiguredProducerImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setConfiguredProducerId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getConfiguredProducerId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setName",new Class[]{String.class});
        String value1=oldCplModel.getName();
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setPortalId",new Class[]{String.class});
        String value2=oldCplModel.getPortalId();
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setNamespace",new Class[]{String.class});
        String value3=oldCplModel.getNamespace();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setProducerURL",new Class[]{String.class});
        String value4=oldCplModel.getProducerURL();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setProducerVersion",new Class[]{String.class});
        String value5=oldCplModel.getProducerVersion();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setProducerMarkupURL",new Class[]{String.class});
        String value6=oldCplModel.getProducerMarkupURL();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setStatus",new Class[]{Integer.TYPE});
        Integer value7=new Integer(oldCplModel.getStatus());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setRegistrationData",new Class[]{String.class});
        String value8=oldCplModel.getRegistrationData();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setRegistrationContext",new Class[]{String.class});
        String value9=oldCplModel.getRegistrationContext();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setServiceDescription",new Class[]{String.class});
        String value10=oldCplModel.getServiceDescription();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setUserCategoryMapping",new Class[]{String.class});
        String value11=oldCplModel.getUserCategoryMapping();
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setCustomUserProfile",new Class[]{String.class});
        String value12=oldCplModel.getCustomUserProfile();
        method12.invoke(newModel,value12);
        Method method13=newModelClass.getMethod("setIdentityPropagationType",new Class[]{String.class});
        String value13=oldCplModel.getIdentityPropagationType();
        method13.invoke(newModel,value13);
        Method method14=newModelClass.getMethod("setLifetimeTerminationTime",new Class[]{String.class});
        String value14=oldCplModel.getLifetimeTerminationTime();
        method14.invoke(newModel,value14);
        Method method15=newModelClass.getMethod("setSdLastModified",new Class[]{Long.TYPE});
        Long value15=new Long(oldCplModel.getSdLastModified());
        method15.invoke(newModel,value15);
        Method method16=newModelClass.getMethod("setEntityVersion",new Class[]{Integer.TYPE});
        Integer value16=new Integer(oldCplModel.getEntityVersion());
        method16.invoke(newModel,value16);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(WSRPConsumerRegistrationClp.class.getName())) {
    WSRPConsumerRegistrationClp oldCplModel=(WSRPConsumerRegistrationClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.wsrp.model.impl.WSRPConsumerRegistrationImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setConsumerRegistrationId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getConsumerRegistrationId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setConsumerName",new Class[]{String.class});
        String value1=oldCplModel.getConsumerName();
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setStatus",new Class[]{Boolean.TYPE});
        Boolean value2=new Boolean(oldCplModel.getStatus());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setRegistrationHandle",new Class[]{String.class});
        String value3=oldCplModel.getRegistrationHandle();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setRegistrationData",new Class[]{String.class});
        String value4=oldCplModel.getRegistrationData();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setLifetimeTerminationTime",new Class[]{String.class});
        String value5=oldCplModel.getLifetimeTerminationTime();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setProducerKey",new Class[]{String.class});
        String value6=oldCplModel.getProducerKey();
        method6.invoke(newModel,value6);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(WSRPPortletClp.class.getName())) {
    WSRPPortletClp oldCplModel=(WSRPPortletClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.wsrp.model.impl.WSRPPortletImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setPortletId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getPortletId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setName",new Class[]{String.class});
        String value1=oldCplModel.getName();
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setChannelName",new Class[]{String.class});
        String value2=oldCplModel.getChannelName();
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setTitle",new Class[]{String.class});
        String value3=oldCplModel.getTitle();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setShortTitle",new Class[]{String.class});
        String value4=oldCplModel.getShortTitle();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setDisplayName",new Class[]{String.class});
        String value5=oldCplModel.getDisplayName();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setKeywords",new Class[]{String.class});
        String value6=oldCplModel.getKeywords();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setStatus",new Class[]{Integer.TYPE});
        Integer value7=new Integer(oldCplModel.getStatus());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setProducerEntityId",new Class[]{String.class});
        String value8=oldCplModel.getProducerEntityId();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setConsumerId",new Class[]{String.class});
        String value9=oldCplModel.getConsumerId();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setPortletHandle",new Class[]{String.class});
        String value10=oldCplModel.getPortletHandle();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setMimeTypes",new Class[]{String.class});
        String value11=oldCplModel.getMimeTypes();
        method11.invoke(newModel,value11);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(WSRPProducerClp.class.getName())) {
    WSRPProducerClp oldCplModel=(WSRPProducerClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.wsrp.model.impl.WSRPProducerImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setProducerId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getProducerId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setPortalId",new Class[]{String.class});
        String value1=oldCplModel.getPortalId();
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setStatus",new Class[]{Boolean.TYPE});
        Boolean value2=new Boolean(oldCplModel.getStatus());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setNamespace",new Class[]{String.class});
        String value3=oldCplModel.getNamespace();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setInstanceName",new Class[]{String.class});
        String value4=oldCplModel.getInstanceName();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setRequiresRegistration",new Class[]{Boolean.TYPE});
        Boolean value5=new Boolean(oldCplModel.getRequiresRegistration());
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setSupportsInbandRegistration",new Class[]{Boolean.TYPE});
        Boolean value6=new Boolean(oldCplModel.getSupportsInbandRegistration());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setVersion",new Class[]{String.class});
        String value7=oldCplModel.getVersion();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setOfferedPortlets",new Class[]{String.class});
        String value8=oldCplModel.getOfferedPortlets();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setProducerProfileMap",new Class[]{String.class});
        String value9=oldCplModel.getProducerProfileMap();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setRegistrationProperties",new Class[]{String.class});
        String value10=oldCplModel.getRegistrationProperties();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setRegistrationValidatorClass",new Class[]{String.class});
        String value11=oldCplModel.getRegistrationValidatorClass();
        method11.invoke(newModel,value11);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
