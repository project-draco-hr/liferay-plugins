{
  Calendar calendar=calendarPersistence.findByPrimaryKey(calendarId);
  if (color <= 0) {
    color=PortletPropsValues.CALENDAR_COLOR_DEFAULT;
  }
  validate(nameMap);
  calendar.setModifiedDate(serviceContext.getModifiedDate(null));
  calendar.setNameMap(nameMap);
  calendar.setDescriptionMap(descriptionMap);
  calendar.setColor(color);
  calendar.setDefaultCalendar(defaultCalendar);
  calendarPersistence.update(calendar,false);
  resourceLocalService.updateModelResources(calendar,serviceContext);
  if (defaultCalendar) {
    List<Calendar> calendarResourceCalendars=getCalendarResourceCalendars(calendar.getGroupId(),calendar.getCalendarResourceId());
    for (    Calendar calendarResourceCalendar : calendarResourceCalendars) {
      updateDefaultCalendar(calendarResourceCalendar,calendar.equals(calendarResourceCalendar));
    }
    calendarResourceLocalService.updateDefaultCalendarId(calendar.getCalendarResourceId(),calendarId);
  }
  return calendar;
}
