{
  Join join=null;
  int joinIncomingTransitions=fork.getOutgoingTransitionsCount();
  List<Node> targetNodes=new ArrayList<Node>();
  targetNodes.add(fork);
  for (  Transition transition : fork.getOutgoingTransitionsList()) {
    targetNodes.add(transition.getTargetNode());
  }
  for (int i=1; i < targetNodes.size(); i++) {
    Node targetNode=targetNodes.get(i);
    if (targetNode.getNodeType().equals(NodeType.FORK)) {
      Join localJoin=traverse((Fork)targetNode);
      List<Node> unvisitedTargetNodes=getUnvisitedTargetNodes(targetNodes,localJoin.getOutgoingTransitionsList());
      if (unvisitedTargetNodes.size() > 1) {
        joinIncomingTransitions+=unvisitedTargetNodes.size() - 1;
      }
      targetNodes.addAll(unvisitedTargetNodes);
    }
 else     if (targetNode.getNodeType().equals(NodeType.JOIN)) {
      if (Validator.isNull(join)) {
        join=(Join)targetNode;
      }
 else       if (!Validator.equals(join,targetNode)) {
        throw new WorkflowException("Fork " + fork.getName() + " and join "+ targetNode.getName()+ " are not paired");
      }
    }
 else {
      List<Node> unvisitedTargetNodes=getUnvisitedTargetNodes(targetNodes,targetNode.getOutgoingTransitionsList());
      if (unvisitedTargetNodes.size() > 1) {
        joinIncomingTransitions+=unvisitedTargetNodes.size() - 1;
      }
      targetNodes.addAll(unvisitedTargetNodes);
    }
  }
  if (join == null) {
    throw new WorkflowException("No matching join found for fork " + fork.getName());
  }
 else   if (join.getIncomingTransitionsCount() != joinIncomingTransitions) {
    throw new WorkflowException("Incorrect number of incoming transitions for join " + join.getName());
  }
  return join;
}
