{
  Object returnObj=null;
  MethodHandler methodHandler=new MethodHandler(_addCalendarBookingMethodKey18,userId,calendarId,parentCalendarBookingId,ClpSerializer.translateInput(titleMap),ClpSerializer.translateInput(descriptionMap),ClpSerializer.translateInput(locationMap),ClpSerializer.translateInput(type),startDateMonth,startDateDay,startDateYear,startDateHour,startDateMinute,endDateMonth,endDateDay,endDateYear,endDateHour,endDateMinute,allDay,ClpSerializer.translateInput(recurrence),priority,outOfOffice,firstReminder,secondReminder,required,ClpSerializer.translateInput(requestMessage),ClpSerializer.translateInput(responseMessage),ClpSerializer.translateInput(serviceContext));
  try {
    returnObj=_classLoaderProxy.invoke(methodHandler);
  }
 catch (  Throwable t) {
    if (t instanceof com.liferay.portal.kernel.exception.PortalException) {
      throw (com.liferay.portal.kernel.exception.PortalException)t;
    }
    if (t instanceof com.liferay.portal.kernel.exception.SystemException) {
      throw (com.liferay.portal.kernel.exception.SystemException)t;
    }
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RuntimeException(t.getClass().getName() + " is not a valid exception");
    }
  }
  return (com.liferay.calendar.model.CalendarBooking)ClpSerializer.translateOutput(returnObj);
}
