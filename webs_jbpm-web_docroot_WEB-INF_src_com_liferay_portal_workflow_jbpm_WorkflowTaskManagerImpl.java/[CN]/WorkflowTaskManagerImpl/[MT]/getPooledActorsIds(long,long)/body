{
  JbpmContext jbpmContext=_jbpmConfiguration.createJbpmContext();
  try {
    TaskMgmtSession taskMgmtSession=jbpmContext.getTaskMgmtSession();
    TaskInstance taskInstance=taskMgmtSession.loadTaskInstance(workflowTaskId);
    CustomSession customSession=new CustomSession(jbpmContext);
    TaskInstanceExtensionImpl taskInstanceExtensionImpl=customSession.findTaskInstanceExtension(taskInstance.getId());
    List<Assignee> assignees=taskInstanceExtensionImpl.getAssignees();
    PrimitiveLongList pooledActors=new PrimitiveLongList();
    for (    Assignee assignee : assignees) {
      String assigneeClassName=assignee.getAssigneeClassName();
      if (assigneeClassName.equals(Role.class.getName())) {
        long roleId=assignee.getAssigneeClassPK();
        Role role=RoleLocalServiceUtil.getRole(roleId);
        if ((role.getType() == RoleConstants.TYPE_SITE) || (role.getType() == RoleConstants.TYPE_ORGANIZATION)) {
          List<UserGroupRole> userGroupRoles=UserGroupRoleLocalServiceUtil.getUserGroupRolesByGroupAndRole(taskInstanceExtensionImpl.getGroupId(),roleId);
          for (          UserGroupRole userGroupRole : userGroupRoles) {
            pooledActors.add(userGroupRole.getUserId());
          }
        }
 else {
          long[] userIds=UserLocalServiceUtil.getRoleUserIds(roleId);
          pooledActors.addAll(userIds);
        }
      }
    }
    return pooledActors.getArray();
  }
 catch (  Exception e) {
    throw new WorkflowException(e);
  }
 finally {
    jbpmContext.close();
  }
}
