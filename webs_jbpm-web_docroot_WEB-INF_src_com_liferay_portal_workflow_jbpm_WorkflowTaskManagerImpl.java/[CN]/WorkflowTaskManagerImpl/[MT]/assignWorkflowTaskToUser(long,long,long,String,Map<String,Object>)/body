{
  JbpmContext jbpmContext=_jbpmConfiguration.createJbpmContext();
  try {
    TaskMgmtSession taskMgmtSession=jbpmContext.getTaskMgmtSession();
    TaskInstance taskInstance=taskMgmtSession.loadTaskInstance(workflowTaskId);
    String oldActorId=taskInstance.getActorId();
    Set<PooledActor> pooledActors=taskInstance.getPooledActors();
    if ((pooledActors == null) || pooledActors.isEmpty()) {
      throw new WorkflowException("Workflow task " + workflowTaskId + " has not been assigned to a role");
    }
    PooledActor pooledActor=pooledActors.iterator().next();
    long roleId=GetterUtil.getLong(pooledActor.getActorId());
    if (!RoleLocalServiceUtil.hasUserRole(assigneeUserId,roleId)) {
      throw new WorkflowException("Workflow task " + workflowTaskId + " cannot be assigned to user "+ assigneeUserId);
    }
    taskInstance.setActorId(String.valueOf(assigneeUserId));
    taskInstance.addComment(comment);
    if (context != null) {
      taskInstance.addVariables(context);
    }
    jbpmContext.save(taskInstance);
    WorkflowLogImpl workflowLogImpl=new WorkflowLogImpl();
    workflowLogImpl.setComment(comment);
    workflowLogImpl.setCreateDate(new Date());
    workflowLogImpl.setPreviousUserId(GetterUtil.getLong(oldActorId));
    workflowLogImpl.setType(WorkflowLog.TASK_ASSIGN);
    workflowLogImpl.setUserId(assigneeUserId);
    workflowLogImpl.setWorkflowInstanceId(taskInstance.getId());
    Session session=jbpmContext.getSession();
    session.save(workflowLogImpl);
    return new WorkflowTaskImpl(taskInstance);
  }
 catch (  Exception e) {
    throw new WorkflowException(e);
  }
 finally {
    jbpmContext.close();
  }
}
