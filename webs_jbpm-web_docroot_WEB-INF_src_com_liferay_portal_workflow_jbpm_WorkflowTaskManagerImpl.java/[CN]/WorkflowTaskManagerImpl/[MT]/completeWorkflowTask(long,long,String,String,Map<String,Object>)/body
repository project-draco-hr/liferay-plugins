{
  JbpmContext jbpmContext=_jbpmConfiguration.createJbpmContext();
  try {
    TaskMgmtSession taskMgmtSession=jbpmContext.getTaskMgmtSession();
    TaskInstance taskInstance=taskMgmtSession.loadTaskInstance(workflowTaskId);
    Token oldToken=taskInstance.getToken();
    Node oldNode=oldToken.getNode();
    long actorId=GetterUtil.getLong(taskInstance.getActorId());
    if (actorId != userId) {
      throw new WorkflowException("Workflow task " + workflowTaskId + " is not assigned to user "+ userId);
    }
    taskInstance.addComment(comment);
    if (context != null) {
      taskInstance.addVariables(context);
    }
    if (transitionName == null) {
      taskInstance.end();
    }
 else {
      taskInstance.end(transitionName);
    }
    jbpmContext.save(taskInstance);
    Token token=taskInstance.getToken();
    Node node=token.getNode();
    WorkflowLogImpl workflowLogImpl=new WorkflowLogImpl();
    workflowLogImpl.setCreateDate(new Date());
    workflowLogImpl.setComment(comment);
    workflowLogImpl.setPreviousState(oldNode.getName());
    workflowLogImpl.setState(node.getName());
    workflowLogImpl.setType(WorkflowLog.TRANSITION);
    workflowLogImpl.setUserId(actorId);
    workflowLogImpl.setWorkflowInstanceId(taskInstance.getId());
    Session session=jbpmContext.getSession();
    session.save(workflowLogImpl);
    return new WorkflowTaskImpl(taskInstance);
  }
 catch (  Exception e) {
    throw new WorkflowException(e);
  }
 finally {
    jbpmContext.close();
  }
}
