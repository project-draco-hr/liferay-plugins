{
  JbpmContext jbpmContext=_jbpmConfiguration.createJbpmContext();
  try {
    TaskMgmtSession taskMgmtSession=jbpmContext.getTaskMgmtSession();
    TaskInstance taskInstance=taskMgmtSession.loadTaskInstance(workflowTaskId);
    Token oldToken=taskInstance.getToken();
    Node oldNode=oldToken.getNode();
    long actorId=GetterUtil.getLong(taskInstance.getActorId());
    if (!isWorkflowTaskAssignedToUser(taskInstance.getActorId(),userId)) {
      throw new WorkflowException("Workflow task " + workflowTaskId + " is not assigned to user "+ userId);
    }
    taskInstance.addComment(comment);
    if (workflowContext != null) {
      taskInstance.addVariables(new HashMap<String,Object>(workflowContext));
    }
    if (transitionName == null) {
      taskInstance.end();
    }
 else {
      taskInstance.end(transitionName);
    }
    jbpmContext.save(taskInstance);
    Token token=taskInstance.getToken();
    Node node=token.getNode();
    WorkflowLogImpl workflowLogImpl=new WorkflowLogImpl();
    workflowLogImpl.setCreateDate(new Date());
    workflowLogImpl.setComment(comment);
    workflowLogImpl.setPreviousState(oldNode.getName());
    workflowLogImpl.setState(node.getName());
    workflowLogImpl.setTaskInstance(taskInstance);
    workflowLogImpl.setType(WorkflowLog.TRANSITION);
    workflowLogImpl.setUserId(actorId);
    Session session=jbpmContext.getSession();
    session.save(workflowLogImpl);
    ProcessInstance processInstance=taskInstance.getProcessInstance();
    ContextInstance contextInstance=processInstance.getContextInstance();
    long groupId=GetterUtil.getLong((String)contextInstance.getVariable("groupId"));
    TaskMgmtInstance taskMgmtInstance=taskInstance.getTaskMgmtInstance();
    Collection<TaskInstance> taskInstances=taskMgmtInstance.getTaskInstances();
    CustomSession customSession=new CustomSession(jbpmContext);
    for (    TaskInstance taskInstance_ : taskInstances) {
      TaskInstanceExtensionImpl taskInstanceExtensionImpl=customSession.findTaskInstanceExtension(taskInstance_.getId());
      if (taskInstanceExtensionImpl == null) {
        List<Assignee> assignees=AssigneeRetrievalUtil.getAssignees(companyId,groupId,taskInstance_.getActorId(),taskInstance_.getPooledActors());
        String workflowContextJSON=WorkflowContextUtil.convertToJSON(workflowContext);
        taskInstanceExtensionImpl=new TaskInstanceExtensionImpl(companyId,groupId,userId,assignees,workflowContextJSON,taskInstance_);
        session.save(taskInstanceExtensionImpl);
      }
    }
    return new WorkflowTaskImpl(taskInstance);
  }
 catch (  Exception e) {
    throw new WorkflowException(e);
  }
 finally {
    jbpmContext.close();
  }
}
