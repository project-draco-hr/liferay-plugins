{
  User user=userPersistence.findByPrimaryKey(userId);
  Date now=new Date();
  long microblogsEntryId=counterLocalService.increment();
  MicroblogsEntry microblogsEntry=microblogsEntryPersistence.create(microblogsEntryId);
  microblogsEntry.setCompanyId(user.getCompanyId());
  microblogsEntry.setUserId(user.getUserId());
  microblogsEntry.setUserName(user.getFullName());
  microblogsEntry.setCreateDate(now);
  microblogsEntry.setModifiedDate(now);
  microblogsEntry.setContent(content);
  microblogsEntry.setType(type);
  if (receiverUserId == 0) {
    receiverUserId=userId;
  }
  microblogsEntry.setReceiverUserId(receiverUserId);
  microblogsEntry.setReceiverEntryId(receiverEntryId);
  microblogsEntry.setSocialRelationType(socialRelationType);
  microblogsEntryPersistence.update(microblogsEntry,false);
  addMicroblogsEntryResources(microblogsEntry);
  int actitivtyKey=MicroblogsActivityKeys.ADD_ENTRY;
  if (type == MicroblogsEntryConstants.REPLY) {
    actitivtyKey=MicroblogsActivityKeys.REPLY_ENTRY;
  }
 else   if (type == MicroblogsEntryConstants.REPOST) {
    actitivtyKey=MicroblogsActivityKeys.REPOST_ENTRY;
  }
  SocialActivityLocalServiceUtil.addActivity(userId,0,MicroblogsEntry.class.getName(),microblogsEntryId,actitivtyKey,StringPool.BLANK,receiverUserId);
  AssetEntryLocalServiceUtil.updateEntry(userId,0,MicroblogsEntry.class.getName(),microblogsEntryId,serviceContext.getAssetCategoryIds(),serviceContext.getAssetTagNames());
  return microblogsEntry;
}
