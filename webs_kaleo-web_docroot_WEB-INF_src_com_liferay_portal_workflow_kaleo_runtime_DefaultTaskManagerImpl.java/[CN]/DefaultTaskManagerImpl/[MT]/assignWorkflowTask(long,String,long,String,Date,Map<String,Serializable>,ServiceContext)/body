{
  KaleoTaskInstanceToken kaleoTaskInstanceToken=kaleoTaskInstanceTokenLocalService.getKaleoTaskInstanceToken(workflowTaskInstanceId);
  if (kaleoTaskInstanceToken.isCompleted()) {
    throw new WorkflowException("Cannot reassign a completed task " + workflowTaskInstanceId);
  }
  if (dueDate != null) {
    kaleoTaskInstanceTokenLocalService.updateDueDate(workflowTaskInstanceId,dueDate,serviceContext);
  }
  KaleoTaskInstanceAssignment kaleoTaskInstanceAssignment=kaleoTaskInstanceToken.getKaleoTaskInstanceAssignment();
  KaleoTaskInstanceAssignment newKaleoTaskInstanceAssignment=kaleoTaskInstanceAssignmentLocalService.assignKaleoTaskInstanceAssignment(kaleoTaskInstanceAssignment.getKaleoTaskInstanceAssignmentId(),assigneeClassName,assigneeClassPK,context,serviceContext);
  ExecutionContext executionContext=new ExecutionContext(kaleoTaskInstanceToken.getKaleoInstanceToken(),kaleoTaskInstanceToken,newKaleoTaskInstanceAssignment,context,serviceContext);
  KaleoTask kaleoTask=kaleoTaskInstanceToken.getKaleoTask();
  ActionExecutorUtil.executeKaleoActions(kaleoTask.getKaleoNodeId(),ExecutionType.ON_ASSIGNMENT,executionContext);
  NotificationUtil.sendKaleoNotifications(kaleoTask.getKaleoNodeId(),ExecutionType.ON_ASSIGNMENT,executionContext);
  kaleoLogLocalService.addTaskAssignmentKaleoLog(kaleoTaskInstanceToken,kaleoTaskInstanceAssignment,newKaleoTaskInstanceAssignment,comment,context,serviceContext);
  return new WorkflowTaskAdapter(kaleoTaskInstanceToken,newKaleoTaskInstanceAssignment,context);
}
