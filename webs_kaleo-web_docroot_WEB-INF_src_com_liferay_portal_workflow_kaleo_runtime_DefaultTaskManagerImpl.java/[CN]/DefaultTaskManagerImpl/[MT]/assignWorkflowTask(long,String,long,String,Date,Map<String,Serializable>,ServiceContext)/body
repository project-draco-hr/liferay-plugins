{
  KaleoTaskInstanceToken kaleoTaskInstanceToken=kaleoTaskInstanceTokenLocalService.getKaleoTaskInstanceToken(workflowTaskInstanceId);
  workflowContext=updateWorkflowContext(workflowContext,kaleoTaskInstanceToken);
  if (kaleoTaskInstanceToken.isCompleted()) {
    throw new WorkflowException("Cannot reassign a completed task " + workflowTaskInstanceId);
  }
  if (dueDate != null) {
    kaleoTaskInstanceTokenLocalService.updateDueDate(workflowTaskInstanceId,dueDate,serviceContext);
  }
  KaleoTaskInstanceToken newKaleoTaskInstanceToken=kaleoTaskInstanceTokenLocalService.assignKaleoTaskInstanceToken(kaleoTaskInstanceToken.getKaleoTaskInstanceTokenId(),assigneeClassName,assigneeClassPK,workflowContext,serviceContext);
  ExecutionContext executionContext=new ExecutionContext(newKaleoTaskInstanceToken.getKaleoInstanceToken(),newKaleoTaskInstanceToken,workflowContext,serviceContext);
  KaleoTask kaleoTask=kaleoTaskInstanceToken.getKaleoTask();
  ActionExecutorUtil.executeKaleoActions(kaleoTask.getKaleoNodeId(),ExecutionType.ON_ASSIGNMENT,executionContext);
  NotificationUtil.sendKaleoNotifications(kaleoTask.getKaleoNodeId(),ExecutionType.ON_ASSIGNMENT,executionContext);
  kaleoLogLocalService.addTaskAssignmentKaleoLog(kaleoTaskInstanceToken,newKaleoTaskInstanceToken,comment,workflowContext,serviceContext);
  return new WorkflowTaskAdapter(newKaleoTaskInstanceToken,workflowContext);
}
