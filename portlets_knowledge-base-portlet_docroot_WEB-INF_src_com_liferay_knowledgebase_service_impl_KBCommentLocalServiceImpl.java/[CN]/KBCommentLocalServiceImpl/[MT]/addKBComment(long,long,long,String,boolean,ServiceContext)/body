{
  User user=userPersistence.findByPrimaryKey(userId);
  long groupId=serviceContext.getScopeGroupId();
  Date now=new Date();
  validate(content);
  long kbCommentId=counterLocalService.increment();
  KBComment kbComment=kbCommentPersistence.create(kbCommentId);
  kbComment.setUuid(serviceContext.getUuid());
  kbComment.setGroupId(groupId);
  kbComment.setCompanyId(user.getCompanyId());
  kbComment.setUserId(user.getUserId());
  kbComment.setUserName(user.getFullName());
  kbComment.setCreateDate(serviceContext.getCreateDate(now));
  kbComment.setModifiedDate(serviceContext.getModifiedDate(now));
  kbComment.setClassNameId(classNameId);
  kbComment.setClassPK(classPK);
  kbComment.setContent(content);
  kbComment.setHelpful(helpful);
  kbComment.setStatus(KBCommentConstants.STATUS_PENDING);
  kbCommentPersistence.update(kbComment);
  JSONObject extraDataJSONObject=JSONFactoryUtil.createJSONObject();
  putTitle(extraDataJSONObject,kbComment);
  socialActivityLocalService.addActivity(userId,kbComment.getGroupId(),KBComment.class.getName(),kbCommentId,AdminActivityKeys.ADD_KB_COMMENT,extraDataJSONObject.toString(),0);
  notifySubscribers(kbComment,serviceContext);
  return kbComment;
}
