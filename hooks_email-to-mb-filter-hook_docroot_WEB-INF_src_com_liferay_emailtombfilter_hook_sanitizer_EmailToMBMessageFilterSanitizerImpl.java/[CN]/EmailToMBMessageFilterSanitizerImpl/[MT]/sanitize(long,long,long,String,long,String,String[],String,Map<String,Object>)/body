{
  if (Validator.isNull(className) || !className.equals(MBMessage.class.getName())) {
    return s;
  }
  if (options == null) {
    return s;
  }
  Object emailPartToMBMessageBody=options.get("emailPartToMBMessageBody");
  if ((emailPartToMBMessageBody == null) || (emailPartToMBMessageBody != Boolean.TRUE)) {
    return s;
  }
  if (!contentType.startsWith(ContentTypes.TEXT_PLAIN)) {
    return s;
  }
  Matcher matcher=_pattern.matcher(s);
  if (!matcher.find()) {
    return s;
  }
  if (_log.isDebugEnabled()) {
    _log.debug("Sanitizing " + className + "#"+ classPK);
  }
  StringBuilder sb=new StringBuilder();
  sb.append(s.substring(0,matcher.start()));
  int lastTextPos=0;
  int lastQuotedTextPos=0;
  String quotedText=s.substring(matcher.end(),s.length());
  String[] quotedTextLines=quotedText.split("\r\n|\n|\r");
  for (int i=0; i < quotedTextLines.length; i++) {
    if (Validator.isNull(quotedTextLines[i])) {
      continue;
    }
    if (quotedTextLines[i].startsWith(StringPool.GREATER_THAN)) {
      lastQuotedTextPos=i;
      if ((lastTextPos > 0) && (lastTextPos < lastQuotedTextPos)) {
        return s;
      }
    }
 else {
      lastTextPos=i;
      sb.append(quotedTextLines[i]);
      sb.append(StringPool.RETURN_NEW_LINE);
    }
  }
  return sb.toString();
}
