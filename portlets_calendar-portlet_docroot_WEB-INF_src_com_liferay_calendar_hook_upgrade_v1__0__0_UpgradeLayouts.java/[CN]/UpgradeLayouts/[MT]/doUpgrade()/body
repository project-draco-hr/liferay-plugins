{
  ActionableDynamicQuery actionableDynamicQuery=new LayoutActionableDynamicQuery(){
    @Override protected void performAction(    Object object) throws SystemException {
      UnicodeProperties layoutTypeSettings=new UnicodeProperties(true);
      Layout layout=(Layout)object;
      try {
        layoutTypeSettings.load(layout.getTypeSettings());
      }
 catch (      IOException e) {
        throw new SystemException(e);
      }
      boolean propertiesChanged=false;
      for (      String key : layoutTypeSettings.keySet()) {
        String[] property=StringUtil.split(key,StringPool.DASH);
        if ((property.length == 2) && Validator.equals(property[0],"column") && Validator.isNumber(property[1])) {
          String value=layoutTypeSettings.get(key);
          String[] values=StringUtil.split(value,StringPool.COMMA);
          for (int i=0; i < values.length; i++) {
            if (values[i].equals("8")) {
              values[i]=PortletKeys.CALENDAR;
              propertiesChanged=true;
            }
          }
          layoutTypeSettings.setProperty(key,StringUtil.merge(values,StringPool.COMMA));
        }
      }
      if (propertiesChanged) {
        layout.setTypeSettings(layoutTypeSettings.toString());
        LayoutLocalServiceUtil.updateLayout(layout);
      }
    }
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      Property typeSettingsProperty=PropertyFactoryUtil.forName("typeSettings");
      Disjunction disjunction=RestrictionsFactoryUtil.disjunction();
      disjunction.add(typeSettingsProperty.like("%column-%=8\n%"));
      disjunction.add(typeSettingsProperty.like("%column-%=8,%"));
      disjunction.add(typeSettingsProperty.like("%column-%=8"));
      disjunction.add(typeSettingsProperty.like("%column-%=%,8\n%"));
      disjunction.add(typeSettingsProperty.like("%column-%=%,8,%"));
      disjunction.add(typeSettingsProperty.like("%column-%=%,8"));
      dynamicQuery.add(disjunction);
    }
  }
;
  StopWatch stopWatch=null;
  if (_log.isInfoEnabled()) {
    stopWatch=new StopWatch();
    stopWatch.start();
  }
  actionableDynamicQuery.performActions();
  if (_log.isInfoEnabled()) {
    StringBundler sb=new StringBundler(6);
    sb.append("Calendar layouts update ");
    sb.append(stopWatch.getTime());
    sb.append(" ms.");
    _log.info(sb.toString());
  }
}
