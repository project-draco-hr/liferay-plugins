{
  ActionableDynamicQuery actionableDynamicQuery=new LayoutActionableDynamicQuery(){
    @Override protected void performAction(    Object object) throws SystemException {
      Layout layout=(Layout)object;
      boolean updateLayout=false;
      UnicodeProperties typeSettingsProperties=layout.getTypeSettingsProperties();
      for (      String key : typeSettingsProperties.keySet()) {
        String[] property=StringUtil.split(key,StringPool.DASH);
        if ((property.length != 2) || !Validator.equals(property[0],"column") || !Validator.isNumber(property[1])) {
          continue;
        }
        String[] values=StringUtil.split(typeSettingsProperties.get(key));
        for (int i=0; i < values.length; i++) {
          if (values[i].equals("8")) {
            values[i]=PortletKeys.CALENDAR;
            updateLayout=true;
          }
        }
        typeSettingsProperties.setProperty(key,StringUtil.merge(values));
      }
      if (updateLayout) {
        layout.setTypeSettingsProperties(typeSettingsProperties);
        LayoutLocalServiceUtil.updateLayout(layout);
      }
    }
    @Override protected void addCriteria(    DynamicQuery dynamicQuery){
      Disjunction disjunction=RestrictionsFactoryUtil.disjunction();
      Property property=PropertyFactoryUtil.forName("typeSettings");
      disjunction.add(property.like("%column-%=8\n%"));
      disjunction.add(property.like("%column-%=8,%"));
      disjunction.add(property.like("%column-%=8"));
      disjunction.add(property.like("%column-%=%,8\n%"));
      disjunction.add(property.like("%column-%=%,8,%"));
      disjunction.add(property.like("%column-%=%,8"));
      dynamicQuery.add(disjunction);
    }
  }
;
  actionableDynamicQuery.performActions();
}
