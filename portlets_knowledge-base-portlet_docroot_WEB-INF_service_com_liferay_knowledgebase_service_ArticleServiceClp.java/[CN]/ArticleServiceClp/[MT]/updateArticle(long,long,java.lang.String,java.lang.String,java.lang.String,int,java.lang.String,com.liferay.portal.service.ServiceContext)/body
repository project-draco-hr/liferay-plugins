{
  Object paramObj0=new LongWrapper(resourcePrimKey);
  Object paramObj1=new LongWrapper(parentResourcePrimKey);
  Object paramObj2=ClpSerializer.translateInput(title);
  if (title == null) {
    paramObj2=new NullWrapper("java.lang.String");
  }
  Object paramObj3=ClpSerializer.translateInput(content);
  if (content == null) {
    paramObj3=new NullWrapper("java.lang.String");
  }
  Object paramObj4=ClpSerializer.translateInput(description);
  if (description == null) {
    paramObj4=new NullWrapper("java.lang.String");
  }
  Object paramObj5=new IntegerWrapper(priority);
  Object paramObj6=ClpSerializer.translateInput(dirName);
  if (dirName == null) {
    paramObj6=new NullWrapper("java.lang.String");
  }
  Object paramObj7=ClpSerializer.translateInput(serviceContext);
  if (serviceContext == null) {
    paramObj7=new NullWrapper("com.liferay.portal.service.ServiceContext");
  }
  Object returnObj=null;
  try {
    returnObj=_classLoaderProxy.invoke("updateArticle",new Object[]{paramObj0,paramObj1,paramObj2,paramObj3,paramObj4,paramObj5,paramObj6,paramObj7});
  }
 catch (  Throwable t) {
    if (t instanceof com.liferay.portal.kernel.exception.PortalException) {
      throw (com.liferay.portal.kernel.exception.PortalException)t;
    }
    if (t instanceof com.liferay.portal.kernel.exception.SystemException) {
      throw (com.liferay.portal.kernel.exception.SystemException)t;
    }
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RuntimeException(t.getClass().getName() + " is not a valid exception");
    }
  }
  return (com.liferay.knowledgebase.model.Article)ClpSerializer.translateOutput(returnObj);
}
