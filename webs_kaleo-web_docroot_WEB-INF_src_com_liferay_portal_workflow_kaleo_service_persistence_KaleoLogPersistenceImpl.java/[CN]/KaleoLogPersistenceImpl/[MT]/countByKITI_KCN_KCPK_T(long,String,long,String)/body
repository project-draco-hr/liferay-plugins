{
  Object[] finderArgs=new Object[]{kaleoInstanceTokenId,kaleoClassName,kaleoClassPK,type};
  Long count=(Long)FinderCacheUtil.getResult(FINDER_PATH_COUNT_BY_KITI_KCN_KCPK_T,finderArgs,this);
  if (count == null) {
    StringBundler query=new StringBundler(5);
    query.append(_SQL_COUNT_KALEOLOG_WHERE);
    query.append(_FINDER_COLUMN_KITI_KCN_KCPK_T_KALEOINSTANCETOKENID_2);
    if (kaleoClassName == null) {
      query.append(_FINDER_COLUMN_KITI_KCN_KCPK_T_KALEOCLASSNAME_1);
    }
 else {
      if (kaleoClassName.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_KITI_KCN_KCPK_T_KALEOCLASSNAME_3);
      }
 else {
        query.append(_FINDER_COLUMN_KITI_KCN_KCPK_T_KALEOCLASSNAME_2);
      }
    }
    query.append(_FINDER_COLUMN_KITI_KCN_KCPK_T_KALEOCLASSPK_2);
    if (type == null) {
      query.append(_FINDER_COLUMN_KITI_KCN_KCPK_T_TYPE_1);
    }
 else {
      if (type.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_KITI_KCN_KCPK_T_TYPE_3);
      }
 else {
        query.append(_FINDER_COLUMN_KITI_KCN_KCPK_T_TYPE_2);
      }
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      qPos.add(kaleoInstanceTokenId);
      if (kaleoClassName != null) {
        qPos.add(kaleoClassName);
      }
      qPos.add(kaleoClassPK);
      if (type != null) {
        qPos.add(type);
      }
      count=(Long)q.uniqueResult();
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (count == null) {
        count=Long.valueOf(0);
      }
      FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_KITI_KCN_KCPK_T,finderArgs,count);
      closeSession(session);
    }
  }
  return count.intValue();
}
