{
  if (!InlineSQLHelperUtil.isEnabled(groupIds)) {
    return findByG_N_A(groupIds,name,active,start,end,orderByComparator);
  }
  StringBundler query=new StringBundler();
  query.append(_FILTER_SQL_SELECT_CALENDARRESOURCE_WHERE);
  boolean conjunctionable=false;
  if ((groupIds == null) || (groupIds.length > 0)) {
    if (conjunctionable) {
      query.append(WHERE_AND);
    }
    query.append(StringPool.OPEN_PARENTHESIS);
    for (int i=0; i < groupIds.length; i++) {
      query.append(_FINDER_COLUMN_G_N_A_GROUPID_5);
      if ((i + 1) < groupIds.length) {
        query.append(WHERE_OR);
      }
    }
    query.append(StringPool.CLOSE_PARENTHESIS);
    conjunctionable=true;
  }
  if (conjunctionable) {
    query.append(WHERE_AND);
  }
  if (name == null) {
    query.append(_FINDER_COLUMN_G_N_A_NAME_4);
  }
 else {
    if (name.equals(StringPool.BLANK)) {
      query.append(_FINDER_COLUMN_G_N_A_NAME_6);
    }
 else {
      query.append(_FINDER_COLUMN_G_N_A_NAME_5);
    }
  }
  conjunctionable=true;
  if (conjunctionable) {
    query.append(WHERE_AND);
  }
  query.append(_FINDER_COLUMN_G_N_A_ACTIVE_5);
  conjunctionable=true;
  appendGroupByComparator(query,_FILTER_COLUMN_PK);
  if (orderByComparator != null) {
    if (getDB().isSupportsInlineDistinct()) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_TABLE,orderByComparator);
    }
  }
 else {
    if (getDB().isSupportsInlineDistinct()) {
      query.append(CalendarResourceModelImpl.ORDER_BY_JPQL);
    }
 else {
      query.append(CalendarResourceModelImpl.ORDER_BY_SQL);
    }
  }
  String sql=InlineSQLHelperUtil.replacePermissionCheck(query.toString(),CalendarResource.class.getName(),_FILTER_COLUMN_PK,groupIds);
  Session session=null;
  try {
    session=openSession();
    SQLQuery q=session.createSQLQuery(sql);
    if (getDB().isSupportsInlineDistinct()) {
      q.addEntity(_FILTER_ENTITY_ALIAS,CalendarResourceImpl.class);
    }
 else {
      q.addEntity(_FILTER_ENTITY_TABLE,CalendarResourceImpl.class);
    }
    QueryPos qPos=QueryPos.getInstance(q);
    if (groupIds != null) {
      qPos.add(groupIds);
    }
    if (name != null) {
      qPos.add(name);
    }
    qPos.add(active);
    return (List<CalendarResource>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw processException(e);
  }
 finally {
    closeSession(session);
  }
}
