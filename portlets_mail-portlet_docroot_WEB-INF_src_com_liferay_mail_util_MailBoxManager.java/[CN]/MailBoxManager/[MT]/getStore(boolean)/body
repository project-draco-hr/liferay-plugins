{
  Store store=null;
  String storeKey="" + _mailAccount.getUser().getUserId() + "_STORE_"+ _mailAccount.getEmailAddress();
  if (useOldStores) {
    store=(Store)_allStores.get(storeKey);
    if (Validator.isNotNull(store) && !store.isConnected()) {
      store.close();
      store=null;
    }
  }
  if (Validator.isNull(store)) {
    Properties props=new Properties();
    URLName url=new URLName("imap",_mailAccount.getMailInHostName(),_mailAccount.getMailInPort(),StringPool.BLANK,_mailAccount.getUsername(),_mailAccount.getPassword());
    props.setProperty("mail.imap.port",String.valueOf(_mailAccount.getMailInPort()));
    if (_mailAccount.isMailSecure()) {
      props.setProperty("mail.imap.socketFactory.port",String.valueOf(_mailAccount.getMailInPort()));
      props.setProperty("mail.imap.socketFactory.class",_SSL_FACTORY);
      props.setProperty("mail.imap.socketFactory.fallback","false");
      Session session=Session.getInstance(props);
      store=new IMAPSSLStore(session,url);
    }
 else {
      Session session=Session.getInstance(props);
      store=new IMAPStore(session,url);
    }
    store.addConnectionListener(new ConnectionListener(storeKey));
    try {
      store.connect();
    }
 catch (    MessagingException me) {
      _log.error("Failed on connecting to " + storeKey);
      throw me;
    }
    if (useOldStores) {
      _allStores.put(storeKey,store);
    }
  }
  return store;
}
