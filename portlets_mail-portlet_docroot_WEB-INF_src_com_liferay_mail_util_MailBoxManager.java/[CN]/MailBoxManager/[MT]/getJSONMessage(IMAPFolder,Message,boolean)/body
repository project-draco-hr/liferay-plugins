{
  String read="read";
  if (!message.isSet(Flags.Flag.SEEN)) {
    read="unread";
  }
  SimpleDateFormat sdf=new SimpleDateFormat("MMM dd yyyy HH:mm");
  JSONObject jsonObj=new JSONObject();
  JSONUtil.put(jsonObj,"uid",folder.getUID(message));
  JSONUtil.put(jsonObj,"messageNumber",message.getMessageNumber());
  JSONUtil.put(jsonObj,"date",sdf.format(message.getSentDate()));
  JSONUtil.put(jsonObj,"from",getAddresses(message.getFrom()));
  JSONUtil.put(jsonObj,"subject",message.getSubject());
  JSONUtil.put(jsonObj,"html",false);
  JSONUtil.put(jsonObj,"read",read);
  if (preview) {
    JSONUtil.put(jsonObj,"bodyPreview",StringPool.BLANK);
  }
 else {
    StringBuilder sb=new StringBuilder();
    List attachments=new ArrayList();
    getBody(sb,StringPool.BLANK,message,attachments,false);
    JSONUtil.put(jsonObj,"to",getAddresses(message.getRecipients(RecipientType.TO)));
    JSONUtil.put(jsonObj,"cc",getAddresses(message.getRecipients(RecipientType.CC)));
    JSONUtil.put(jsonObj,"bcc",getAddresses(message.getRecipients(RecipientType.BCC)));
    JSONUtil.put(jsonObj,"body",sb.toString());
    try {
      jsonObj.put("attachments",getJSONAttachments(attachments));
    }
 catch (    JSONException jsone) {
      if (_log.isWarnEnabled()) {
        _log.warn(jsone,jsone);
      }
    }
  }
  return jsonObj;
}
