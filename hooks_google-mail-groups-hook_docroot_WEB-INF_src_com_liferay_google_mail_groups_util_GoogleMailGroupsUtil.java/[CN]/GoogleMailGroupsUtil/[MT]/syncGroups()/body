{
  ActionableDynamicQuery actionableDynamicQuery=new GroupActionableDynamicQuery(){
    @Override protected void performAction(    Object object) throws PortalException {
      Group group=(Group)object;
      if (!isSync(group)) {
        return;
      }
      List<String> groupMemberEmailAddresses=new ArrayList<String>();
      Members members=null;
      String groupEmailAddress=getGroupEmailAddress(group);
      if (GoogleDirectoryUtil.getGroup(groupEmailAddress) == null) {
        GoogleDirectoryUtil.addGroup(group.getDescriptiveName(),groupEmailAddress);
      }
 else {
        members=GoogleDirectoryUtil.getGroupMembers(groupEmailAddress);
      }
      if ((members != null) && (members.getMembers() != null)) {
        for (        Member member : members.getMembers()) {
          groupMemberEmailAddresses.add(member.getEmail());
        }
      }
      List<String> emailAddresses=new ArrayList<String>();
      LinkedHashMap<String,Object> userParams=new LinkedHashMap<String,Object>();
      userParams.put("inherit",Boolean.TRUE);
      userParams.put("usersGroups",new Long(group.getGroupId()));
      List<User> users=UserLocalServiceUtil.search(group.getCompanyId(),null,WorkflowConstants.STATUS_APPROVED,userParams,QueryUtil.ALL_POS,QueryUtil.ALL_POS,(OrderByComparator)null);
      for (      User user : users) {
        emailAddresses.add(getUserEmailAddress(user));
      }
      for (      String groupMemberEmailAddress : groupMemberEmailAddresses) {
        if (emailAddresses.contains(groupMemberEmailAddress)) {
          continue;
        }
        GoogleDirectoryUtil.deleteGroupMember(groupEmailAddress,groupMemberEmailAddress);
      }
      for (      String emailAddress : emailAddresses) {
        if (groupMemberEmailAddresses.contains(emailAddress)) {
          continue;
        }
        GoogleDirectoryUtil.addGroupMember(groupEmailAddress,emailAddress);
      }
      checkLargeGroup(group);
    }
  }
;
  actionableDynamicQuery.performActions();
}
