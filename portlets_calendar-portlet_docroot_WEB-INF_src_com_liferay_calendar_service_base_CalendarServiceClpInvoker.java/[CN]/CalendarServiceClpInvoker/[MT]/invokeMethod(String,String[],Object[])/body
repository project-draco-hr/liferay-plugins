{
  if (_methodName44.equals(name) && Arrays.deepEquals(_methodParameterTypes44,parameterTypes)) {
    return CalendarServiceUtil.getBeanIdentifier();
  }
  if (_methodName45.equals(name) && Arrays.deepEquals(_methodParameterTypes45,parameterTypes)) {
    CalendarServiceUtil.setBeanIdentifier((java.lang.String)arguments[0]);
    return null;
  }
  if (_methodName50.equals(name) && Arrays.deepEquals(_methodParameterTypes50,parameterTypes)) {
    return CalendarServiceUtil.addCalendar(((Long)arguments[0]).longValue(),((Long)arguments[1]).longValue(),(java.util.Map<java.util.Locale,java.lang.String>)arguments[2],(java.util.Map<java.util.Locale,java.lang.String>)arguments[3],((Integer)arguments[4]).intValue(),((Boolean)arguments[5]).booleanValue(),((Boolean)arguments[6]).booleanValue(),((Boolean)arguments[7]).booleanValue(),(com.liferay.portal.service.ServiceContext)arguments[8]);
  }
  if (_methodName51.equals(name) && Arrays.deepEquals(_methodParameterTypes51,parameterTypes)) {
    return CalendarServiceUtil.deleteCalendar(((Long)arguments[0]).longValue());
  }
  if (_methodName52.equals(name) && Arrays.deepEquals(_methodParameterTypes52,parameterTypes)) {
    return CalendarServiceUtil.exportCalendar(((Long)arguments[0]).longValue(),(java.lang.String)arguments[1]);
  }
  if (_methodName53.equals(name) && Arrays.deepEquals(_methodParameterTypes53,parameterTypes)) {
    return CalendarServiceUtil.fetchCalendar(((Long)arguments[0]).longValue());
  }
  if (_methodName54.equals(name) && Arrays.deepEquals(_methodParameterTypes54,parameterTypes)) {
    return CalendarServiceUtil.getCalendar(((Long)arguments[0]).longValue());
  }
  if (_methodName55.equals(name) && Arrays.deepEquals(_methodParameterTypes55,parameterTypes)) {
    CalendarServiceUtil.importCalendar(((Long)arguments[0]).longValue(),(java.lang.String)arguments[1],(java.lang.String)arguments[2]);
    return null;
  }
  if (_methodName56.equals(name) && Arrays.deepEquals(_methodParameterTypes56,parameterTypes)) {
    return CalendarServiceUtil.search(((Long)arguments[0]).longValue(),(long[])arguments[1],(long[])arguments[2],(java.lang.String)arguments[3],((Boolean)arguments[4]).booleanValue(),((Integer)arguments[5]).intValue(),((Integer)arguments[6]).intValue(),(com.liferay.portal.kernel.util.OrderByComparator)arguments[7]);
  }
  if (_methodName57.equals(name) && Arrays.deepEquals(_methodParameterTypes57,parameterTypes)) {
    return CalendarServiceUtil.search(((Long)arguments[0]).longValue(),(long[])arguments[1],(long[])arguments[2],(java.lang.String)arguments[3],((Boolean)arguments[4]).booleanValue(),((Integer)arguments[5]).intValue(),((Integer)arguments[6]).intValue(),(com.liferay.portal.kernel.util.OrderByComparator)arguments[7],(java.lang.String)arguments[8]);
  }
  if (_methodName58.equals(name) && Arrays.deepEquals(_methodParameterTypes58,parameterTypes)) {
    return CalendarServiceUtil.search(((Long)arguments[0]).longValue(),(long[])arguments[1],(long[])arguments[2],(java.lang.String)arguments[3],(java.lang.String)arguments[4],((Boolean)arguments[5]).booleanValue(),((Integer)arguments[6]).intValue(),((Integer)arguments[7]).intValue(),(com.liferay.portal.kernel.util.OrderByComparator)arguments[8]);
  }
  if (_methodName59.equals(name) && Arrays.deepEquals(_methodParameterTypes59,parameterTypes)) {
    return CalendarServiceUtil.search(((Long)arguments[0]).longValue(),(long[])arguments[1],(long[])arguments[2],(java.lang.String)arguments[3],(java.lang.String)arguments[4],((Boolean)arguments[5]).booleanValue(),((Integer)arguments[6]).intValue(),((Integer)arguments[7]).intValue(),(com.liferay.portal.kernel.util.OrderByComparator)arguments[8],(java.lang.String)arguments[9]);
  }
  if (_methodName60.equals(name) && Arrays.deepEquals(_methodParameterTypes60,parameterTypes)) {
    return CalendarServiceUtil.searchCount(((Long)arguments[0]).longValue(),(long[])arguments[1],(long[])arguments[2],(java.lang.String)arguments[3],((Boolean)arguments[4]).booleanValue());
  }
  if (_methodName61.equals(name) && Arrays.deepEquals(_methodParameterTypes61,parameterTypes)) {
    return CalendarServiceUtil.searchCount(((Long)arguments[0]).longValue(),(long[])arguments[1],(long[])arguments[2],(java.lang.String)arguments[3],((Boolean)arguments[4]).booleanValue(),(java.lang.String)arguments[5]);
  }
  if (_methodName62.equals(name) && Arrays.deepEquals(_methodParameterTypes62,parameterTypes)) {
    return CalendarServiceUtil.searchCount(((Long)arguments[0]).longValue(),(long[])arguments[1],(long[])arguments[2],(java.lang.String)arguments[3],(java.lang.String)arguments[4],((Boolean)arguments[5]).booleanValue());
  }
  if (_methodName63.equals(name) && Arrays.deepEquals(_methodParameterTypes63,parameterTypes)) {
    return CalendarServiceUtil.searchCount(((Long)arguments[0]).longValue(),(long[])arguments[1],(long[])arguments[2],(java.lang.String)arguments[3],(java.lang.String)arguments[4],((Boolean)arguments[5]).booleanValue(),(java.lang.String)arguments[6]);
  }
  if (_methodName64.equals(name) && Arrays.deepEquals(_methodParameterTypes64,parameterTypes)) {
    return CalendarServiceUtil.updateCalendar(((Long)arguments[0]).longValue(),(java.util.Map<java.util.Locale,java.lang.String>)arguments[1],(java.util.Map<java.util.Locale,java.lang.String>)arguments[2],((Integer)arguments[3]).intValue(),((Boolean)arguments[4]).booleanValue(),((Boolean)arguments[5]).booleanValue(),((Boolean)arguments[6]).booleanValue(),(com.liferay.portal.service.ServiceContext)arguments[7]);
  }
  if (_methodName65.equals(name) && Arrays.deepEquals(_methodParameterTypes65,parameterTypes)) {
    return CalendarServiceUtil.updateCalendar(((Long)arguments[0]).longValue(),(java.util.Map<java.util.Locale,java.lang.String>)arguments[1],(java.util.Map<java.util.Locale,java.lang.String>)arguments[2],((Integer)arguments[3]).intValue(),(com.liferay.portal.service.ServiceContext)arguments[4]);
  }
  if (_methodName66.equals(name) && Arrays.deepEquals(_methodParameterTypes66,parameterTypes)) {
    return CalendarServiceUtil.updateColor(((Long)arguments[0]).longValue(),((Integer)arguments[1]).intValue(),(com.liferay.portal.service.ServiceContext)arguments[2]);
  }
  throw new UnsupportedOperationException();
}
