{
  if ((assetTagIds.length == 0) && (notAssetTagIds.length == 0) && (priority <= 0)) {
    if ((assigneeUserId > 0) && (reporterUserId <= 0)) {
      return findByG_A_S(groupId,assigneeUserId,status,start,end);
    }
    if ((reporterUserId > 0) && (assigneeUserId <= 0)) {
      return findByG_R_S(groupId,reporterUserId,status,start,end);
    }
  }
  Session session=null;
  try {
    session=openSession();
    String sql=CustomSQLUtil.get(FIND_BY_G_P_A_R_S_T_N);
    sql=StringUtil.replace(sql,"[$JOIN$]",getJoin(assetTagIds,notAssetTagIds));
    String assetTagTagIds=getAssetTagTagIds(assetTagIds,notAssetTagIds);
    sql=StringUtil.replace(sql,"[$ASSET_TAG_TAG_IDS$]",assetTagTagIds);
    if (Validator.isNotNull(assetTagIds)) {
      sql=StringUtil.replaceLast(sql,"WHERE",StringPool.BLANK);
    }
    sql=StringUtil.replace(sql,"[$GROUP_ID$]",getGroupId(groupId));
    sql=StringUtil.replace(sql,"[$PRIORITY$]",getPriority(priority));
    sql=StringUtil.replace(sql,"[$ASSIGNEE_USER_ID$]",getAssigneeUserId(assigneeUserId));
    sql=StringUtil.replace(sql,"[$REPORTER_USER_ID$]",getReporterUserId(reporterUserId));
    int[] statusArray=getStatusArray(status);
    sql=StringUtil.replace(sql,"[$STATUS$]",getStatus(statusArray));
    sql=StringUtil.replaceLast(sql,"AND",StringPool.BLANK);
    SQLQuery q=session.createSynchronizedSQLQuery(sql);
    q.addEntity("TMS_TasksEntry",TasksEntryImpl.class);
    QueryPos qPos=QueryPos.getInstance(q);
    if ((assetTagIds.length > 0) || (notAssetTagIds.length > 0)) {
      qPos.add(PortalUtil.getClassNameId(TasksEntry.class.getName()));
      setTagsEntryIds(qPos,assetTagIds);
      setTagsEntryIds(qPos,notAssetTagIds);
    }
    if (groupId > 0) {
      qPos.add(groupId);
    }
    if (priority > 0) {
      qPos.add(priority);
    }
    if (assigneeUserId > 0) {
      qPos.add(assigneeUserId);
    }
    if (reporterUserId > 0) {
      qPos.add(reporterUserId);
    }
    if (statusArray != null) {
      for (      int curStatus : statusArray) {
        qPos.add(curStatus);
      }
    }
    return (List<TasksEntry>)QueryUtil.list(q,getDialect(),start,end);
  }
 catch (  Exception e) {
    throw new SystemException(e);
  }
 finally {
    closeSession(session);
  }
}
