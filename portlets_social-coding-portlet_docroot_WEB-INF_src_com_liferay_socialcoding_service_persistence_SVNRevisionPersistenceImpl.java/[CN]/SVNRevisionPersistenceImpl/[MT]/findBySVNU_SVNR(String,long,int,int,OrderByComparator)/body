{
  Object[] finderArgs=new Object[]{svnUserId,svnRepositoryId,String.valueOf(start),String.valueOf(end),String.valueOf(orderByComparator)};
  List<SVNRevision> list=(List<SVNRevision>)FinderCacheUtil.getResult(FINDER_PATH_FIND_BY_SVNU_SVNR,finderArgs,this);
  if (list == null) {
    StringBundler query=null;
    if (orderByComparator != null) {
      query=new StringBundler(4 + (orderByComparator.getOrderByFields().length * 3));
    }
 else {
      query=new StringBundler(4);
    }
    query.append(_SQL_SELECT_SVNREVISION_WHERE);
    if (svnUserId == null) {
      query.append(_FINDER_COLUMN_SVNU_SVNR_SVNUSERID_1);
    }
 else {
      if (svnUserId.equals(StringPool.BLANK)) {
        query.append(_FINDER_COLUMN_SVNU_SVNR_SVNUSERID_3);
      }
 else {
        query.append(_FINDER_COLUMN_SVNU_SVNR_SVNUSERID_2);
      }
    }
    query.append(_FINDER_COLUMN_SVNU_SVNR_SVNREPOSITORYID_2);
    if (orderByComparator != null) {
      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);
    }
 else {
      query.append(SVNRevisionModelImpl.ORDER_BY_JPQL);
    }
    String sql=query.toString();
    Session session=null;
    try {
      session=openSession();
      Query q=session.createQuery(sql);
      QueryPos qPos=QueryPos.getInstance(q);
      if (svnUserId != null) {
        qPos.add(svnUserId);
      }
      qPos.add(svnRepositoryId);
      list=(List<SVNRevision>)QueryUtil.list(q,getDialect(),start,end);
    }
 catch (    Exception e) {
      throw processException(e);
    }
 finally {
      if (list == null) {
        list=new ArrayList<SVNRevision>();
      }
      cacheResult(list);
      FinderCacheUtil.putResult(FINDER_PATH_FIND_BY_SVNU_SVNR,finderArgs,list);
      closeSession(session);
    }
  }
  return list;
}
