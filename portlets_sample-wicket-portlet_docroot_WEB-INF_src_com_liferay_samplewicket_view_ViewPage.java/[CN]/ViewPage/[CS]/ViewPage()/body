{
  final Form<Person> form=new Form<Person>("form",new CompoundPropertyModel<Person>(new Person())){
    protected void onSubmit(){
      persons.add(getModelObject());
      setModelObject(new Person());
      feedBackPanel.info("Your resquest was processed succesfully!");
      personsLabel.setVisible(!persons.isEmpty());
      personsView.setVisible(!persons.isEmpty());
    }
  }
;
  TextField<String> name=new TextField<String>("name");
  name.setRequired(true);
  List<Character> genders=new ArrayList<Character>();
  genders.add('F');
  genders.add('M');
  final ChoiceRenderer<Character> renderer=new ChoiceRenderer<Character>(){
    public Object getDisplayValue(    Character object){
      if (object.charValue() == 'F') {
        return "Female";
      }
 else {
        return "Male";
      }
    }
  }
;
  DropDownChoice<Character> gender=new DropDownChoice<Character>("gender",genders,renderer);
  gender.setNullValid(false);
  personsLabel=new Label("personsLabel","Persons");
  personsLabel.setVisible(!persons.isEmpty());
  personsView=new ListView<Person>("persons",persons){
    protected void populateItem(    ListItem<Person> listItem){
      Person person=listItem.getModelObject();
      String nameLabel=person.getName();
      String genderLabel=renderer.getDisplayValue(person.getGender()).toString();
      listItem.add(new Label("name",nameLabel));
      listItem.add(new Label("gender",genderLabel));
    }
  }
;
  personsView.setVisible(!persons.isEmpty());
  form.add(name);
  form.add(gender);
  add(feedBackPanel);
  add(form);
  add(personsLabel);
  add(personsView);
}
