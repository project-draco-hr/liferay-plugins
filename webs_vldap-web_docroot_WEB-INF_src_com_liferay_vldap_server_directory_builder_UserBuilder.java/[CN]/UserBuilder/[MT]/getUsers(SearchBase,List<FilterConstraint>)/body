{
  if (filterConstraints == null) {
    return UserLocalServiceUtil.getCompanyUsers(searchBase.getCompanyId(),0,(int)searchBase.getSizeLimit());
  }
  List<User> users=new ArrayList<User>();
  LinkedHashMap<String,Object> params=new LinkedHashMap<String,Object>();
  Group community=searchBase.getCommunity();
  if (community != null) {
    params.put("usersGroups",community.getGroupId());
  }
  Organization organization=searchBase.getOrganization();
  if (organization != null) {
    params.put("usersOrgs",organization.getOrganizationId());
  }
  Role role=searchBase.getRole();
  if (role != null) {
    params.put("usersRoles",role.getRoleId());
  }
  UserGroup userGroup=searchBase.getUserGroup();
  if (userGroup != null) {
    params.put("usersUserGroups",userGroup.getUserGroupId());
  }
  for (  FilterConstraint filterConstraint : filterConstraints) {
    if (!isValidFilterConstraint(filterConstraint)) {
      continue;
    }
    String member=filterConstraint.getValue("member");
    if (!putParams(params,member)) {
      continue;
    }
    long userId=GetterUtil.getLong(filterConstraint.getValue("uid"));
    if (userId > 0) {
      users.add(UserLocalServiceUtil.getUser(userId));
      continue;
    }
    String uuid=filterConstraint.getValue("uuid");
    if (uuid != null) {
      users.add(UserLocalServiceUtil.getUserByUuid(uuid));
      continue;
    }
    String firstName=filterConstraint.getValue("givenName");
    String lastName=filterConstraint.getValue("sn");
    String screenName=filterConstraint.getValue("cn");
    String emailAddress=filterConstraint.getValue("mail");
    users.addAll(UserLocalServiceUtil.search(searchBase.getCompanyId(),firstName,null,lastName,screenName,emailAddress,WorkflowConstants.STATUS_APPROVED,params,true,0,(int)searchBase.getSizeLimit(),new UserScreenNameComparator()));
  }
  return users;
}
