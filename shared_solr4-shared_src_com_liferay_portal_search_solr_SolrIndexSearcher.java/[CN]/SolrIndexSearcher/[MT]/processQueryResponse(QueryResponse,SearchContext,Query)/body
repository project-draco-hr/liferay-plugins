{
  long startTime=System.currentTimeMillis();
  boolean allResults=false;
  if ((searchContext.getStart() == QueryUtil.ALL_POS) && (searchContext.getEnd() == QueryUtil.ALL_POS)) {
    allResults=true;
  }
  SolrDocumentList solrDocumentList=queryResponse.getResults();
  long total=solrDocumentList.getNumFound();
  if (allResults && (total > 0)) {
    queryResponse=search(searchContext,query,0,(int)total,false);
    solrDocumentList=queryResponse.getResults();
    total=solrDocumentList.getNumFound();
  }
  updateFacetCollectors(queryResponse,searchContext);
  Hits hits=new HitsImpl();
  List<Document> documents=new ArrayList<Document>();
  Set<String> queryTerms=new HashSet<String>();
  List<Float> scores=new ArrayList<Float>();
  QueryConfig queryConfig=query.getQueryConfig();
  Map<String,Map<String,List<String>>> highlights=queryResponse.getHighlighting();
  for (  SolrDocument solrDocument : solrDocumentList) {
    Document document=processSolrDocument(solrDocument);
    documents.add(document);
    addSnippets(solrDocument,document,queryConfig,queryTerms,highlights);
    float score=GetterUtil.getFloat(String.valueOf(solrDocument.getFieldValue("score")));
    scores.add(score);
  }
  hits.setDocs(documents.toArray(new Document[documents.size()]));
  hits.setLength((int)total);
  hits.setQuery(query);
  hits.setQueryTerms(queryTerms.toArray(new String[queryTerms.size()]));
  hits.setScores(scores.toArray(new Float[scores.size()]));
  hits.setSearchTime(queryResponse.getQTime());
  hits.setStart(startTime);
  return hits;
}
