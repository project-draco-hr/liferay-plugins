{
  LayoutTypePortlet layoutTypePortlet=(LayoutTypePortlet)layout.getLayoutType();
  LayoutTemplate layoutTemplate=layoutTypePortlet.getLayoutTemplate();
  List<String> columns=layoutTemplate.getColumns();
  for (  String column : columns) {
    String[] portletIds=null;
    if (Validator.isNull(name)) {
      portletIds=PortletProps.getArray(keyPrefix + column);
    }
 else {
      Filter filter=new Filter(name);
      portletIds=PortletProps.getArray(keyPrefix + column,filter);
    }
    layoutTypePortlet.addPortletIds(0,portletIds,column,false);
  }
  LayoutLocalServiceUtil.updateLayout(layout.getGroupId(),layout.isPrivateLayout(),layout.getLayoutId(),layout.getTypeSettings());
  List<String> portletIds=layoutTypePortlet.getPortletIds();
  for (  String portletId : portletIds) {
    addResources(layout,portletId);
    if (portletId.startsWith("1_WAR_eventsdisplayportlet")) {
      updatePortletTitle(layout,portletId,"events");
    }
 else     if (portletId.startsWith("1_WAR_soannouncementsportlet")) {
      updatePortletTitle(layout,portletId,"announcements");
    }
 else     if (portletId.startsWith("1_WAR_wysiwygportlet")) {
      updatePortletTitle(layout,portletId,"welcome");
    }
 else     if (portletId.contains("_WAR_contactsportlet")) {
      configureProfile(layout,portletId);
      removePortletBorder(layout,portletId);
    }
 else     if (portletId.startsWith(AssetPublisherPortletKeys.ASSET_PUBLISHER)) {
      configureAssetPublisher(layout);
      updatePortletTitle(layout,portletId,"related-content");
    }
 else     if (portletId.startsWith(BreadcrumbPortletKeys.BREADCRUMB)) {
      removePortletBorder(layout,portletId);
    }
 else     if (portletId.startsWith(PortletKeys.BLOGS_AGGREGATOR)) {
      configureBlogsAggregator(layout);
      updatePortletTitle(layout,portletId,"recent-blogs");
    }
 else     if (portletId.startsWith(PortletKeys.MESSAGE_BOARDS)) {
      configureMessageBoards(layout);
      removePortletBorder(layout,portletId);
    }
 else     if (portletId.equals(PortletKeys.DOCUMENT_LIBRARY) || portletId.equals(PortletKeys.BLOGS) || portletId.equals(WikiPortletKeys.WIKI)|| portletId.equals("1_WAR_calendarportlet")|| portletId.contains("_WAR_microblogsportlet")|| portletId.equals("1_WAR_privatemessagingportlet")|| portletId.contains("1_WAR_tasksportlet")) {
      removePortletBorder(layout,portletId);
    }
  }
}
