{
  Object returnObj=null;
  MethodHandler methodHandler=new MethodHandler(_addCalendarResourceMethodKey0,groupId,ClpSerializer.translateInput(className),classPK,ClpSerializer.translateInput(classUuid),ClpSerializer.translateInput(code),ClpSerializer.translateInput(nameMap),ClpSerializer.translateInput(descriptionMap),ClpSerializer.translateInput(type),active,ClpSerializer.translateInput(serviceContext));
  try {
    returnObj=_classLoaderProxy.invoke(methodHandler);
  }
 catch (  Throwable t) {
    if (t instanceof com.liferay.portal.kernel.exception.PortalException) {
      throw (com.liferay.portal.kernel.exception.PortalException)t;
    }
    if (t instanceof com.liferay.portal.kernel.exception.SystemException) {
      throw (com.liferay.portal.kernel.exception.SystemException)t;
    }
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RuntimeException(t.getClass().getName() + " is not a valid exception");
    }
  }
  return (com.liferay.calendar.model.CalendarResource)ClpSerializer.translateOutput(returnObj);
}
