{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals(AccountClp.class.getName())) {
    AccountClp oldCplModel=(AccountClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.mail.model.impl.AccountImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setAccountId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getAccountId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setAddress",new Class[]{String.class});
        String value6=oldCplModel.getAddress();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setPersonalName",new Class[]{String.class});
        String value7=oldCplModel.getPersonalName();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setProtocol",new Class[]{String.class});
        String value8=oldCplModel.getProtocol();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setIncomingHostName",new Class[]{String.class});
        String value9=oldCplModel.getIncomingHostName();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setIncomingPort",new Class[]{Integer.TYPE});
        Integer value10=new Integer(oldCplModel.getIncomingPort());
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setIncomingSecure",new Class[]{Boolean.TYPE});
        Boolean value11=new Boolean(oldCplModel.getIncomingSecure());
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setOutgoingHostName",new Class[]{String.class});
        String value12=oldCplModel.getOutgoingHostName();
        method12.invoke(newModel,value12);
        Method method13=newModelClass.getMethod("setOutgoingPort",new Class[]{Integer.TYPE});
        Integer value13=new Integer(oldCplModel.getOutgoingPort());
        method13.invoke(newModel,value13);
        Method method14=newModelClass.getMethod("setOutgoingSecure",new Class[]{Boolean.TYPE});
        Boolean value14=new Boolean(oldCplModel.getOutgoingSecure());
        method14.invoke(newModel,value14);
        Method method15=newModelClass.getMethod("setLogin",new Class[]{String.class});
        String value15=oldCplModel.getLogin();
        method15.invoke(newModel,value15);
        Method method16=newModelClass.getMethod("setPassword",new Class[]{String.class});
        String value16=oldCplModel.getPassword();
        method16.invoke(newModel,value16);
        Method method17=newModelClass.getMethod("setSavePassword",new Class[]{Boolean.TYPE});
        Boolean value17=new Boolean(oldCplModel.getSavePassword());
        method17.invoke(newModel,value17);
        Method method18=newModelClass.getMethod("setSignature",new Class[]{String.class});
        String value18=oldCplModel.getSignature();
        method18.invoke(newModel,value18);
        Method method19=newModelClass.getMethod("setUseSignature",new Class[]{Boolean.TYPE});
        Boolean value19=new Boolean(oldCplModel.getUseSignature());
        method19.invoke(newModel,value19);
        Method method20=newModelClass.getMethod("setFolderPrefix",new Class[]{String.class});
        String value20=oldCplModel.getFolderPrefix();
        method20.invoke(newModel,value20);
        Method method21=newModelClass.getMethod("setInboxFolderId",new Class[]{Long.TYPE});
        Long value21=new Long(oldCplModel.getInboxFolderId());
        method21.invoke(newModel,value21);
        Method method22=newModelClass.getMethod("setDraftFolderId",new Class[]{Long.TYPE});
        Long value22=new Long(oldCplModel.getDraftFolderId());
        method22.invoke(newModel,value22);
        Method method23=newModelClass.getMethod("setSentFolderId",new Class[]{Long.TYPE});
        Long value23=new Long(oldCplModel.getSentFolderId());
        method23.invoke(newModel,value23);
        Method method24=newModelClass.getMethod("setTrashFolderId",new Class[]{Long.TYPE});
        Long value24=new Long(oldCplModel.getTrashFolderId());
        method24.invoke(newModel,value24);
        Method method25=newModelClass.getMethod("setDefaultSender",new Class[]{Boolean.TYPE});
        Boolean value25=new Boolean(oldCplModel.getDefaultSender());
        method25.invoke(newModel,value25);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(AttachmentClp.class.getName())) {
    AttachmentClp oldCplModel=(AttachmentClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.mail.model.impl.AttachmentImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setAttachmentId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getAttachmentId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setAccountId",new Class[]{Long.TYPE});
        Long value3=new Long(oldCplModel.getAccountId());
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setFolderId",new Class[]{Long.TYPE});
        Long value4=new Long(oldCplModel.getFolderId());
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setMessageId",new Class[]{Long.TYPE});
        Long value5=new Long(oldCplModel.getMessageId());
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setContentPath",new Class[]{String.class});
        String value6=oldCplModel.getContentPath();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setFileName",new Class[]{String.class});
        String value7=oldCplModel.getFileName();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setSize",new Class[]{Long.TYPE});
        Long value8=new Long(oldCplModel.getSize());
        method8.invoke(newModel,value8);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(FolderClp.class.getName())) {
    FolderClp oldCplModel=(FolderClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.mail.model.impl.FolderImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setFolderId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getFolderId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setAccountId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getAccountId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setFullName",new Class[]{String.class});
        String value7=oldCplModel.getFullName();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setDisplayName",new Class[]{String.class});
        String value8=oldCplModel.getDisplayName();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setRemoteMessageCount",new Class[]{Integer.TYPE});
        Integer value9=new Integer(oldCplModel.getRemoteMessageCount());
        method9.invoke(newModel,value9);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(MessageClp.class.getName())) {
    MessageClp oldCplModel=(MessageClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.mail.model.impl.MessageImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setMessageId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getMessageId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setAccountId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getAccountId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setFolderId",new Class[]{Long.TYPE});
        Long value7=new Long(oldCplModel.getFolderId());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setSender",new Class[]{String.class});
        String value8=oldCplModel.getSender();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setRecipientsTo",new Class[]{String.class});
        String value9=oldCplModel.getRecipientsTo();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setRecipientsCc",new Class[]{String.class});
        String value10=oldCplModel.getRecipientsCc();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setRecipientsBcc",new Class[]{String.class});
        String value11=oldCplModel.getRecipientsBcc();
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setSentDate",new Class[]{Date.class});
        Date value12=oldCplModel.getSentDate();
        method12.invoke(newModel,value12);
        Method method13=newModelClass.getMethod("setSubject",new Class[]{String.class});
        String value13=oldCplModel.getSubject();
        method13.invoke(newModel,value13);
        Method method14=newModelClass.getMethod("setPreview",new Class[]{String.class});
        String value14=oldCplModel.getPreview();
        method14.invoke(newModel,value14);
        Method method15=newModelClass.getMethod("setBody",new Class[]{String.class});
        String value15=oldCplModel.getBody();
        method15.invoke(newModel,value15);
        Method method16=newModelClass.getMethod("setFlags",new Class[]{String.class});
        String value16=oldCplModel.getFlags();
        method16.invoke(newModel,value16);
        Method method17=newModelClass.getMethod("setSize",new Class[]{Long.TYPE});
        Long value17=new Long(oldCplModel.getSize());
        method17.invoke(newModel,value17);
        Method method18=newModelClass.getMethod("setRemoteMessageId",new Class[]{Long.TYPE});
        Long value18=new Long(oldCplModel.getRemoteMessageId());
        method18.invoke(newModel,value18);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
