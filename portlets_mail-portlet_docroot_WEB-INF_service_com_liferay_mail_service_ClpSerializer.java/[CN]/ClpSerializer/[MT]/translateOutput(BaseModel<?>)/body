{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals("com.liferay.mail.model.impl.AccountImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        AccountClp newModel=new AccountClp();
        Method method0=oldModelClass.getMethod("getAccountId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setAccountId(value0.longValue());
        Method method1=oldModelClass.getMethod("getCompanyId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value1.longValue());
        Method method2=oldModelClass.getMethod("getUserId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setUserId(value2.longValue());
        Method method3=oldModelClass.getMethod("getUserName");
        String value3=(String)method3.invoke(oldModel,(Object[])null);
        newModel.setUserName(value3);
        Method method4=oldModelClass.getMethod("getCreateDate");
        Date value4=(Date)method4.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value4);
        Method method5=oldModelClass.getMethod("getModifiedDate");
        Date value5=(Date)method5.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value5);
        Method method6=oldModelClass.getMethod("getAddress");
        String value6=(String)method6.invoke(oldModel,(Object[])null);
        newModel.setAddress(value6);
        Method method7=oldModelClass.getMethod("getPersonalName");
        String value7=(String)method7.invoke(oldModel,(Object[])null);
        newModel.setPersonalName(value7);
        Method method8=oldModelClass.getMethod("getProtocol");
        String value8=(String)method8.invoke(oldModel,(Object[])null);
        newModel.setProtocol(value8);
        Method method9=oldModelClass.getMethod("getIncomingHostName");
        String value9=(String)method9.invoke(oldModel,(Object[])null);
        newModel.setIncomingHostName(value9);
        Method method10=oldModelClass.getMethod("getIncomingPort");
        Integer value10=(Integer)method10.invoke(oldModel,(Object[])null);
        newModel.setIncomingPort(value10.intValue());
        Method method11=oldModelClass.getMethod("getIncomingSecure");
        Boolean value11=(Boolean)method11.invoke(oldModel,(Object[])null);
        newModel.setIncomingSecure(value11.booleanValue());
        Method method12=oldModelClass.getMethod("getOutgoingHostName");
        String value12=(String)method12.invoke(oldModel,(Object[])null);
        newModel.setOutgoingHostName(value12);
        Method method13=oldModelClass.getMethod("getOutgoingPort");
        Integer value13=(Integer)method13.invoke(oldModel,(Object[])null);
        newModel.setOutgoingPort(value13.intValue());
        Method method14=oldModelClass.getMethod("getOutgoingSecure");
        Boolean value14=(Boolean)method14.invoke(oldModel,(Object[])null);
        newModel.setOutgoingSecure(value14.booleanValue());
        Method method15=oldModelClass.getMethod("getLogin");
        String value15=(String)method15.invoke(oldModel,(Object[])null);
        newModel.setLogin(value15);
        Method method16=oldModelClass.getMethod("getPassword");
        String value16=(String)method16.invoke(oldModel,(Object[])null);
        newModel.setPassword(value16);
        Method method17=oldModelClass.getMethod("getSavePassword");
        Boolean value17=(Boolean)method17.invoke(oldModel,(Object[])null);
        newModel.setSavePassword(value17.booleanValue());
        Method method18=oldModelClass.getMethod("getSignature");
        String value18=(String)method18.invoke(oldModel,(Object[])null);
        newModel.setSignature(value18);
        Method method19=oldModelClass.getMethod("getUseSignature");
        Boolean value19=(Boolean)method19.invoke(oldModel,(Object[])null);
        newModel.setUseSignature(value19.booleanValue());
        Method method20=oldModelClass.getMethod("getFolderPrefix");
        String value20=(String)method20.invoke(oldModel,(Object[])null);
        newModel.setFolderPrefix(value20);
        Method method21=oldModelClass.getMethod("getInboxFolderId");
        Long value21=(Long)method21.invoke(oldModel,(Object[])null);
        newModel.setInboxFolderId(value21.longValue());
        Method method22=oldModelClass.getMethod("getDraftFolderId");
        Long value22=(Long)method22.invoke(oldModel,(Object[])null);
        newModel.setDraftFolderId(value22.longValue());
        Method method23=oldModelClass.getMethod("getSentFolderId");
        Long value23=(Long)method23.invoke(oldModel,(Object[])null);
        newModel.setSentFolderId(value23.longValue());
        Method method24=oldModelClass.getMethod("getTrashFolderId");
        Long value24=(Long)method24.invoke(oldModel,(Object[])null);
        newModel.setTrashFolderId(value24.longValue());
        Method method25=oldModelClass.getMethod("getDefaultSender");
        Boolean value25=(Boolean)method25.invoke(oldModel,(Object[])null);
        newModel.setDefaultSender(value25.booleanValue());
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.mail.model.impl.AttachmentImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        AttachmentClp newModel=new AttachmentClp();
        Method method0=oldModelClass.getMethod("getAttachmentId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setAttachmentId(value0.longValue());
        Method method1=oldModelClass.getMethod("getCompanyId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value1.longValue());
        Method method2=oldModelClass.getMethod("getUserId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setUserId(value2.longValue());
        Method method3=oldModelClass.getMethod("getAccountId");
        Long value3=(Long)method3.invoke(oldModel,(Object[])null);
        newModel.setAccountId(value3.longValue());
        Method method4=oldModelClass.getMethod("getFolderId");
        Long value4=(Long)method4.invoke(oldModel,(Object[])null);
        newModel.setFolderId(value4.longValue());
        Method method5=oldModelClass.getMethod("getMessageId");
        Long value5=(Long)method5.invoke(oldModel,(Object[])null);
        newModel.setMessageId(value5.longValue());
        Method method6=oldModelClass.getMethod("getContentPath");
        String value6=(String)method6.invoke(oldModel,(Object[])null);
        newModel.setContentPath(value6);
        Method method7=oldModelClass.getMethod("getFileName");
        String value7=(String)method7.invoke(oldModel,(Object[])null);
        newModel.setFileName(value7);
        Method method8=oldModelClass.getMethod("getSize");
        Long value8=(Long)method8.invoke(oldModel,(Object[])null);
        newModel.setSize(value8.longValue());
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.mail.model.impl.FolderImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        FolderClp newModel=new FolderClp();
        Method method0=oldModelClass.getMethod("getFolderId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setFolderId(value0.longValue());
        Method method1=oldModelClass.getMethod("getCompanyId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value1.longValue());
        Method method2=oldModelClass.getMethod("getUserId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setUserId(value2.longValue());
        Method method3=oldModelClass.getMethod("getUserName");
        String value3=(String)method3.invoke(oldModel,(Object[])null);
        newModel.setUserName(value3);
        Method method4=oldModelClass.getMethod("getCreateDate");
        Date value4=(Date)method4.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value4);
        Method method5=oldModelClass.getMethod("getModifiedDate");
        Date value5=(Date)method5.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value5);
        Method method6=oldModelClass.getMethod("getAccountId");
        Long value6=(Long)method6.invoke(oldModel,(Object[])null);
        newModel.setAccountId(value6.longValue());
        Method method7=oldModelClass.getMethod("getFullName");
        String value7=(String)method7.invoke(oldModel,(Object[])null);
        newModel.setFullName(value7);
        Method method8=oldModelClass.getMethod("getDisplayName");
        String value8=(String)method8.invoke(oldModel,(Object[])null);
        newModel.setDisplayName(value8);
        Method method9=oldModelClass.getMethod("getRemoteMessageCount");
        Integer value9=(Integer)method9.invoke(oldModel,(Object[])null);
        newModel.setRemoteMessageCount(value9.intValue());
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.mail.model.impl.MessageImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        MessageClp newModel=new MessageClp();
        Method method0=oldModelClass.getMethod("getMessageId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setMessageId(value0.longValue());
        Method method1=oldModelClass.getMethod("getCompanyId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value1.longValue());
        Method method2=oldModelClass.getMethod("getUserId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setUserId(value2.longValue());
        Method method3=oldModelClass.getMethod("getUserName");
        String value3=(String)method3.invoke(oldModel,(Object[])null);
        newModel.setUserName(value3);
        Method method4=oldModelClass.getMethod("getCreateDate");
        Date value4=(Date)method4.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value4);
        Method method5=oldModelClass.getMethod("getModifiedDate");
        Date value5=(Date)method5.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value5);
        Method method6=oldModelClass.getMethod("getAccountId");
        Long value6=(Long)method6.invoke(oldModel,(Object[])null);
        newModel.setAccountId(value6.longValue());
        Method method7=oldModelClass.getMethod("getFolderId");
        Long value7=(Long)method7.invoke(oldModel,(Object[])null);
        newModel.setFolderId(value7.longValue());
        Method method8=oldModelClass.getMethod("getSender");
        String value8=(String)method8.invoke(oldModel,(Object[])null);
        newModel.setSender(value8);
        Method method9=oldModelClass.getMethod("getTo");
        String value9=(String)method9.invoke(oldModel,(Object[])null);
        newModel.setTo(value9);
        Method method10=oldModelClass.getMethod("getCc");
        String value10=(String)method10.invoke(oldModel,(Object[])null);
        newModel.setCc(value10);
        Method method11=oldModelClass.getMethod("getBcc");
        String value11=(String)method11.invoke(oldModel,(Object[])null);
        newModel.setBcc(value11);
        Method method12=oldModelClass.getMethod("getSentDate");
        Date value12=(Date)method12.invoke(oldModel,(Object[])null);
        newModel.setSentDate(value12);
        Method method13=oldModelClass.getMethod("getSubject");
        String value13=(String)method13.invoke(oldModel,(Object[])null);
        newModel.setSubject(value13);
        Method method14=oldModelClass.getMethod("getPreview");
        String value14=(String)method14.invoke(oldModel,(Object[])null);
        newModel.setPreview(value14);
        Method method15=oldModelClass.getMethod("getBody");
        String value15=(String)method15.invoke(oldModel,(Object[])null);
        newModel.setBody(value15);
        Method method16=oldModelClass.getMethod("getFlags");
        String value16=(String)method16.invoke(oldModel,(Object[])null);
        newModel.setFlags(value16);
        Method method17=oldModelClass.getMethod("getSize");
        Long value17=(Long)method17.invoke(oldModel,(Object[])null);
        newModel.setSize(value17.longValue());
        Method method18=oldModelClass.getMethod("getRemoteMessageId");
        Long value18=(Long)method18.invoke(oldModel,(Object[])null);
        newModel.setRemoteMessageId(value18.longValue());
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
