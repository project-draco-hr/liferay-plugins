{
  Date now=new Date();
  PollsChoice pollsChoice=pollsChoicePersistence.findByPrimaryKey(pollsChoiceId);
  if (pollsChoice.getPollsQuestionId() != pollsQuestionId) {
    throw new NoSuchQuestionException();
  }
  PollsQuestion pollsQuestion=pollsQuestionPersistence.findByPrimaryKey(pollsQuestionId);
  if (pollsQuestion.isExpired(serviceContext,now)) {
    throw new PollsQuestionExpiredException();
  }
  pollsQuestion.setLastVoteDate(serviceContext.getCreateDate(now));
  pollsQuestionPersistence.update(pollsQuestion);
  PollsVote pollsVote=pollsVotePersistence.fetchByU_PQI(userId,pollsQuestionId);
  if (pollsVote != null) {
    throw new DuplicatePollsVoteException();
  }
 else {
    String userName=null;
    try {
      User user=userPersistence.findByPrimaryKey(userId);
      userName=user.getFullName();
    }
 catch (    NoSuchUserException nsue) {
      userName=serviceContext.translate("anonymous");
    }
    long pollsVoteId=counterLocalService.increment();
    pollsVote=pollsVotePersistence.create(pollsVoteId);
    pollsVote.setCompanyId(serviceContext.getCompanyId());
    pollsVote.setUserId(userId);
    pollsVote.setUserName(userName);
    pollsVote.setCreateDate(serviceContext.getCreateDate(now));
    pollsVote.setModifiedDate(serviceContext.getModifiedDate(now));
    pollsVote.setPollsQuestionId(pollsQuestionId);
    pollsVote.setPollsChoiceId(pollsChoiceId);
    pollsVote.setVoteDate(serviceContext.getCreateDate(now));
    pollsVotePersistence.update(pollsVote);
  }
  return pollsVote;
}
