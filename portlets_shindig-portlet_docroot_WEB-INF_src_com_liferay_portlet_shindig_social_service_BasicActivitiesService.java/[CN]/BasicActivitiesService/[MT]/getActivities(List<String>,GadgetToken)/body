{
  List<Activity> activities=new ArrayList<Activity>();
  try {
    User user=UserLocalServiceUtil.getUserById(Long.parseLong(token.getViewerId()));
    Company company=CompanyLocalServiceUtil.getCompanyById(user.getCompanyId());
    ThemeDisplay themeDisplay=new ThemeDisplay();
    themeDisplay.setCompany(company);
    themeDisplay.setLocale(user.getLocale());
    for (    String userId : userIds) {
      try {
        List<Activity> personActivities=new ArrayList<Activity>();
        List<SocialActivity> socialActivities=SocialActivityLocalServiceUtil.getUserActivities(Long.parseLong(userId),0,20);
        for (        SocialActivity socialActivity : socialActivities) {
          Activity activity=new Activity(String.valueOf(socialActivity.getClassPK()),String.valueOf(socialActivity.getUserId()));
          if (socialActivity.getClassName().equals(Activity.class.getName())) {
            JSONObject extraData=new JSONObject(socialActivity.getExtraData());
            if (extraData.has("appId")) {
              activity.setAppId(extraData.getString("appId"));
            }
            if (extraData.has("body")) {
              activity.setBody(extraData.getString("body"));
            }
            if (extraData.has("bodyId")) {
              activity.setBodyId(extraData.getString("bodyId"));
            }
            if (extraData.has("externalId")) {
              activity.setExternalId(extraData.getString("externalId"));
            }
            if (extraData.has("mediaItems")) {
              activity.setMediaItems(OpenSocialUtil.getMediaItems(extraData.getJSONArray("mediaItems")));
            }
            if (extraData.has("postedTime")) {
              activity.setPostedTime(extraData.getLong("postedTime"));
            }
            if (extraData.has("priority")) {
              activity.setPriority(Float.parseFloat(extraData.getString("priority")));
            }
            if (extraData.has("streamFaviconUrl")) {
              activity.setStreamFaviconUrl(extraData.getString("streamFaviconUrl"));
            }
            if (extraData.has("streamSourceUrl")) {
              activity.setStreamSourceUrl(extraData.getString("streamSourceUrl"));
            }
            if (extraData.has("streamTitle")) {
              activity.setStreamTitle(extraData.getString("streamTitle"));
            }
            if (extraData.has("streamUrl")) {
              activity.setStreamUrl(extraData.getString("streamUrl"));
            }
            if (extraData.has("templateParams")) {
              activity.setTemplateParams(OpenSocialUtil.getTemplateParams(extraData.getJSONArray("templateParams")));
            }
            if (extraData.has("title")) {
              activity.setTitle(extraData.getString("title"));
            }
            if (extraData.has("titleId")) {
              activity.setTitleId(extraData.getString("titleId"));
            }
            if (extraData.has("url")) {
              activity.setUrl(extraData.getString("url"));
            }
          }
 else {
            SocialActivityFeedEntry socialActivityFeedEntry=SocialActivityInterpreterLocalServiceUtil.interpret(socialActivity,themeDisplay);
            activity.setBody(socialActivityFeedEntry.getBody());
            activity.setTitle(socialActivityFeedEntry.getTitle());
          }
          personActivities.add(activity);
        }
        activities.addAll(personActivities);
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  }
 catch (  Exception e) {
    _log.error(e,e);
  }
  return new ResponseItem<List<Activity>>(activities);
}
