{
  ObjectMapper objectMapper=new ObjectMapper();
  SyncDLObjectUpdate syncDLObjectUpdate=objectMapper.readValue(response,new TypeReference<SyncDLObjectUpdate>(){
  }
);
  for (  SyncFile syncFile : syncDLObjectUpdate.getSyncDLObjects()) {
    SyncFile parentSyncFile=SyncFileService.fetchSyncFile(syncFile.getRepositoryId(),getSyncAccountId(),syncFile.getParentFolderId());
    String filePathName=null;
    if (parentSyncFile != null) {
      filePathName=FilePathNameUtil.getFilePathName(parentSyncFile.getFilePathName(),syncFile.getName());
    }
    String event=syncFile.getEvent();
    if (event.equals(SyncFile.EVENT_ADD) || event.equals(SyncFile.EVENT_GET) || event.equals(SyncFile.EVENT_RESTORE)) {
      addFile(syncFile,filePathName);
    }
 else     if (event.equals(SyncFile.EVENT_DELETE)) {
      syncFile=SyncFileService.fetchSyncFile(syncFile.getRepositoryId(),getSyncAccountId(),syncFile.getTypePK());
      syncFile.setState(SyncFile.STATE_DELETED);
      syncFile.setUiEvent(SyncFile.UI_EVENT_DELETED_REMOTE);
      SyncFileService.update(syncFile);
    }
 else     if (event.equals(SyncFile.EVENT_MOVE)) {
      moveFile(syncFile,filePathName);
    }
 else     if (event.equals(SyncFile.EVENT_TRASH)) {
      deleteFile(syncFile);
    }
 else     if (event.equals(SyncFile.EVENT_UPDATE)) {
      updateFile(syncFile);
    }
  }
  SyncSite syncSite=SyncSiteService.fetchSyncSite((Long)getParameterValue("repositoryId"),getSyncAccountId());
  syncSite.setLastRemoteSyncTime(syncDLObjectUpdate.getLastAccessTime());
  SyncSiteService.update(syncSite);
}
