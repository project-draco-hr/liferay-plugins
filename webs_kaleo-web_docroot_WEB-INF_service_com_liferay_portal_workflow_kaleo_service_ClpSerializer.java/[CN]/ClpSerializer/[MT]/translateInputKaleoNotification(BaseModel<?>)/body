{
  KaleoNotificationClp oldCplModel=(KaleoNotificationClp)oldModel;
  Thread currentThread=Thread.currentThread();
  ClassLoader contextClassLoader=currentThread.getContextClassLoader();
  try {
    currentThread.setContextClassLoader(_classLoader);
    try {
      Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.kaleo.model.impl.KaleoNotificationImpl",true,_classLoader);
      Object newModel=newModelClass.newInstance();
      Method method0=newModelClass.getMethod("setKaleoNotificationId",new Class[]{Long.TYPE});
      Long value0=new Long(oldCplModel.getKaleoNotificationId());
      method0.invoke(newModel,value0);
      Method method1=newModelClass.getMethod("setGroupId",new Class[]{Long.TYPE});
      Long value1=new Long(oldCplModel.getGroupId());
      method1.invoke(newModel,value1);
      Method method2=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
      Long value2=new Long(oldCplModel.getCompanyId());
      method2.invoke(newModel,value2);
      Method method3=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
      Long value3=new Long(oldCplModel.getUserId());
      method3.invoke(newModel,value3);
      Method method4=newModelClass.getMethod("setUserName",new Class[]{String.class});
      String value4=oldCplModel.getUserName();
      method4.invoke(newModel,value4);
      Method method5=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
      Date value5=oldCplModel.getCreateDate();
      method5.invoke(newModel,value5);
      Method method6=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
      Date value6=oldCplModel.getModifiedDate();
      method6.invoke(newModel,value6);
      Method method7=newModelClass.getMethod("setKaleoDefinitionId",new Class[]{Long.TYPE});
      Long value7=new Long(oldCplModel.getKaleoDefinitionId());
      method7.invoke(newModel,value7);
      Method method8=newModelClass.getMethod("setKaleoClassName",new Class[]{String.class});
      String value8=oldCplModel.getKaleoClassName();
      method8.invoke(newModel,value8);
      Method method9=newModelClass.getMethod("setKaleoClassPK",new Class[]{Long.TYPE});
      Long value9=new Long(oldCplModel.getKaleoClassPK());
      method9.invoke(newModel,value9);
      Method method10=newModelClass.getMethod("setKaleoNodeName",new Class[]{String.class});
      String value10=oldCplModel.getKaleoNodeName();
      method10.invoke(newModel,value10);
      Method method11=newModelClass.getMethod("setName",new Class[]{String.class});
      String value11=oldCplModel.getName();
      method11.invoke(newModel,value11);
      Method method12=newModelClass.getMethod("setDescription",new Class[]{String.class});
      String value12=oldCplModel.getDescription();
      method12.invoke(newModel,value12);
      Method method13=newModelClass.getMethod("setExecutionType",new Class[]{String.class});
      String value13=oldCplModel.getExecutionType();
      method13.invoke(newModel,value13);
      Method method14=newModelClass.getMethod("setTemplate",new Class[]{String.class});
      String value14=oldCplModel.getTemplate();
      method14.invoke(newModel,value14);
      Method method15=newModelClass.getMethod("setTemplateLanguage",new Class[]{String.class});
      String value15=oldCplModel.getTemplateLanguage();
      method15.invoke(newModel,value15);
      Method method16=newModelClass.getMethod("setNotificationTypes",new Class[]{String.class});
      String value16=oldCplModel.getNotificationTypes();
      method16.invoke(newModel,value16);
      return newModel;
    }
 catch (    Exception e) {
      _log.error(e,e);
    }
  }
  finally {
    currentThread.setContextClassLoader(contextClassLoader);
  }
  return oldModel;
}
