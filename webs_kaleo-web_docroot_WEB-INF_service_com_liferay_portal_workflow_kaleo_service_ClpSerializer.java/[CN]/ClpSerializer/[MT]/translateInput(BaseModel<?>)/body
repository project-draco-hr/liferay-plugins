{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals(KaleoActionClp.class.getName())) {
    KaleoActionClp oldCplModel=(KaleoActionClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.kaleo.model.impl.KaleoActionImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setKaleoActionId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getKaleoActionId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setKaleoDefinitionId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getKaleoDefinitionId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setKaleoNodeId",new Class[]{Long.TYPE});
        Long value7=new Long(oldCplModel.getKaleoNodeId());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setKaleoNodeName",new Class[]{String.class});
        String value8=oldCplModel.getKaleoNodeName();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setName",new Class[]{String.class});
        String value9=oldCplModel.getName();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setDescription",new Class[]{String.class});
        String value10=oldCplModel.getDescription();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setLanguage",new Class[]{String.class});
        String value11=oldCplModel.getLanguage();
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setScript",new Class[]{String.class});
        String value12=oldCplModel.getScript();
        method12.invoke(newModel,value12);
        Method method13=newModelClass.getMethod("setExecutionType",new Class[]{String.class});
        String value13=oldCplModel.getExecutionType();
        method13.invoke(newModel,value13);
        Method method14=newModelClass.getMethod("setExecutionOrder",new Class[]{Integer.TYPE});
        Integer value14=new Integer(oldCplModel.getExecutionOrder());
        method14.invoke(newModel,value14);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(KaleoDefinitionClp.class.getName())) {
    KaleoDefinitionClp oldCplModel=(KaleoDefinitionClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.kaleo.model.impl.KaleoDefinitionImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setKaleoDefinitionId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getKaleoDefinitionId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setName",new Class[]{String.class});
        String value6=oldCplModel.getName();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setDescription",new Class[]{String.class});
        String value7=oldCplModel.getDescription();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setVersion",new Class[]{Integer.TYPE});
        Integer value8=new Integer(oldCplModel.getVersion());
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setActive",new Class[]{Boolean.TYPE});
        Boolean value9=new Boolean(oldCplModel.getActive());
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setStartKaleoNodeId",new Class[]{Long.TYPE});
        Long value10=new Long(oldCplModel.getStartKaleoNodeId());
        method10.invoke(newModel,value10);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(KaleoInstanceClp.class.getName())) {
    KaleoInstanceClp oldCplModel=(KaleoInstanceClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.kaleo.model.impl.KaleoInstanceImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setKaleoInstanceId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getKaleoInstanceId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setKaleoDefinitionId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getKaleoDefinitionId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setKaleoDefinitionName",new Class[]{String.class});
        String value7=oldCplModel.getKaleoDefinitionName();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setKaleoDefinitionVersion",new Class[]{Integer.TYPE});
        Integer value8=new Integer(oldCplModel.getKaleoDefinitionVersion());
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setRootKaleoInstanceTokenId",new Class[]{Long.TYPE});
        Long value9=new Long(oldCplModel.getRootKaleoInstanceTokenId());
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setClassName",new Class[]{String.class});
        String value10=oldCplModel.getClassName();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setClassPK",new Class[]{Long.TYPE});
        Long value11=new Long(oldCplModel.getClassPK());
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setCompletionDate",new Class[]{Date.class});
        Date value12=oldCplModel.getCompletionDate();
        method12.invoke(newModel,value12);
        Method method13=newModelClass.getMethod("setContext",new Class[]{String.class});
        String value13=oldCplModel.getContext();
        method13.invoke(newModel,value13);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(KaleoInstanceTokenClp.class.getName())) {
    KaleoInstanceTokenClp oldCplModel=(KaleoInstanceTokenClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.kaleo.model.impl.KaleoInstanceTokenImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setKaleoInstanceTokenId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getKaleoInstanceTokenId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setKaleoInstanceId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getKaleoInstanceId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setParentKaleoInstanceTokenId",new Class[]{Long.TYPE});
        Long value7=new Long(oldCplModel.getParentKaleoInstanceTokenId());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setCurrentKaleoNodeId",new Class[]{Long.TYPE});
        Long value8=new Long(oldCplModel.getCurrentKaleoNodeId());
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setCompletionDate",new Class[]{Date.class});
        Date value9=oldCplModel.getCompletionDate();
        method9.invoke(newModel,value9);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(KaleoLogClp.class.getName())) {
    KaleoLogClp oldCplModel=(KaleoLogClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.kaleo.model.impl.KaleoLogImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setKaleoLogId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getKaleoLogId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setKaleoInstanceId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getKaleoInstanceId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setKaleoInstanceTokenId",new Class[]{Long.TYPE});
        Long value7=new Long(oldCplModel.getKaleoInstanceTokenId());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setKaleoTaskInstanceTokenId",new Class[]{Long.TYPE});
        Long value8=new Long(oldCplModel.getKaleoTaskInstanceTokenId());
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setKaleoNodeId",new Class[]{Long.TYPE});
        Long value9=new Long(oldCplModel.getKaleoNodeId());
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setKaleoNodeName",new Class[]{String.class});
        String value10=oldCplModel.getKaleoNodeName();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setTerminalKaleoNode",new Class[]{Boolean.TYPE});
        Boolean value11=new Boolean(oldCplModel.getTerminalKaleoNode());
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setKaleoActionId",new Class[]{Long.TYPE});
        Long value12=new Long(oldCplModel.getKaleoActionId());
        method12.invoke(newModel,value12);
        Method method13=newModelClass.getMethod("setKaleoActionName",new Class[]{String.class});
        String value13=oldCplModel.getKaleoActionName();
        method13.invoke(newModel,value13);
        Method method14=newModelClass.getMethod("setKaleoActionDescription",new Class[]{String.class});
        String value14=oldCplModel.getKaleoActionDescription();
        method14.invoke(newModel,value14);
        Method method15=newModelClass.getMethod("setPreviousKaleoNodeId",new Class[]{Long.TYPE});
        Long value15=new Long(oldCplModel.getPreviousKaleoNodeId());
        method15.invoke(newModel,value15);
        Method method16=newModelClass.getMethod("setPreviousKaleoNodeName",new Class[]{String.class});
        String value16=oldCplModel.getPreviousKaleoNodeName();
        method16.invoke(newModel,value16);
        Method method17=newModelClass.getMethod("setPreviousAssigneeClassName",new Class[]{String.class});
        String value17=oldCplModel.getPreviousAssigneeClassName();
        method17.invoke(newModel,value17);
        Method method18=newModelClass.getMethod("setPreviousAssigneeClassPK",new Class[]{Long.TYPE});
        Long value18=new Long(oldCplModel.getPreviousAssigneeClassPK());
        method18.invoke(newModel,value18);
        Method method19=newModelClass.getMethod("setCurrentAssigneeClassName",new Class[]{String.class});
        String value19=oldCplModel.getCurrentAssigneeClassName();
        method19.invoke(newModel,value19);
        Method method20=newModelClass.getMethod("setCurrentAssigneeClassPK",new Class[]{Long.TYPE});
        Long value20=new Long(oldCplModel.getCurrentAssigneeClassPK());
        method20.invoke(newModel,value20);
        Method method21=newModelClass.getMethod("setType",new Class[]{String.class});
        String value21=oldCplModel.getType();
        method21.invoke(newModel,value21);
        Method method22=newModelClass.getMethod("setComment",new Class[]{String.class});
        String value22=oldCplModel.getComment();
        method22.invoke(newModel,value22);
        Method method23=newModelClass.getMethod("setStartDate",new Class[]{Date.class});
        Date value23=oldCplModel.getStartDate();
        method23.invoke(newModel,value23);
        Method method24=newModelClass.getMethod("setEndDate",new Class[]{Date.class});
        Date value24=oldCplModel.getEndDate();
        method24.invoke(newModel,value24);
        Method method25=newModelClass.getMethod("setDuration",new Class[]{Long.TYPE});
        Long value25=new Long(oldCplModel.getDuration());
        method25.invoke(newModel,value25);
        Method method26=newModelClass.getMethod("setContext",new Class[]{String.class});
        String value26=oldCplModel.getContext();
        method26.invoke(newModel,value26);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(KaleoNodeClp.class.getName())) {
    KaleoNodeClp oldCplModel=(KaleoNodeClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.kaleo.model.impl.KaleoNodeImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setKaleoNodeId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getKaleoNodeId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setKaleoDefinitionId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getKaleoDefinitionId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setName",new Class[]{String.class});
        String value7=oldCplModel.getName();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setDescription",new Class[]{String.class});
        String value8=oldCplModel.getDescription();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setType",new Class[]{String.class});
        String value9=oldCplModel.getType();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setInitial",new Class[]{Boolean.TYPE});
        Boolean value10=new Boolean(oldCplModel.getInitial());
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setTerminal",new Class[]{Boolean.TYPE});
        Boolean value11=new Boolean(oldCplModel.getTerminal());
        method11.invoke(newModel,value11);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(KaleoTaskClp.class.getName())) {
    KaleoTaskClp oldCplModel=(KaleoTaskClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.kaleo.model.impl.KaleoTaskImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setKaleoTaskId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getKaleoTaskId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setKaleoDefinitionId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getKaleoDefinitionId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setKaleoNodeId",new Class[]{Long.TYPE});
        Long value7=new Long(oldCplModel.getKaleoNodeId());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setName",new Class[]{String.class});
        String value8=oldCplModel.getName();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setDescription",new Class[]{String.class});
        String value9=oldCplModel.getDescription();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setDueDateDuration",new Class[]{Double.TYPE});
        Double value10=new Double(oldCplModel.getDueDateDuration());
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setDueDateScale",new Class[]{String.class});
        String value11=oldCplModel.getDueDateScale();
        method11.invoke(newModel,value11);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(KaleoTaskAssignmentClp.class.getName())) {
    KaleoTaskAssignmentClp oldCplModel=(KaleoTaskAssignmentClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.kaleo.model.impl.KaleoTaskAssignmentImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setKaleoTaskAssignmentId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getKaleoTaskAssignmentId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setKaleoDefinitionId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getKaleoDefinitionId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setKaleoNodeId",new Class[]{Long.TYPE});
        Long value7=new Long(oldCplModel.getKaleoNodeId());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setKaleoTaskId",new Class[]{Long.TYPE});
        Long value8=new Long(oldCplModel.getKaleoTaskId());
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setAssigneeClassName",new Class[]{String.class});
        String value9=oldCplModel.getAssigneeClassName();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setAssigneeClassPK",new Class[]{Long.TYPE});
        Long value10=new Long(oldCplModel.getAssigneeClassPK());
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setDefaultAssignment",new Class[]{Boolean.TYPE});
        Boolean value11=new Boolean(oldCplModel.getDefaultAssignment());
        method11.invoke(newModel,value11);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(KaleoTaskInstanceAssignmentClp.class.getName())) {
    KaleoTaskInstanceAssignmentClp oldCplModel=(KaleoTaskInstanceAssignmentClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.kaleo.model.impl.KaleoTaskInstanceAssignmentImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setKaleoTaskInstanceAssignmentId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getKaleoTaskInstanceAssignmentId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setKaleoTaskInstanceTokenId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getKaleoTaskInstanceTokenId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setKaleoTaskId",new Class[]{Long.TYPE});
        Long value7=new Long(oldCplModel.getKaleoTaskId());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setAssigneeClassName",new Class[]{String.class});
        String value8=oldCplModel.getAssigneeClassName();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setAssigneeClassPK",new Class[]{Long.TYPE});
        Long value9=new Long(oldCplModel.getAssigneeClassPK());
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setCompletionDate",new Class[]{Date.class});
        Date value10=oldCplModel.getCompletionDate();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setContext",new Class[]{String.class});
        String value11=oldCplModel.getContext();
        method11.invoke(newModel,value11);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(KaleoTaskInstanceTokenClp.class.getName())) {
    KaleoTaskInstanceTokenClp oldCplModel=(KaleoTaskInstanceTokenClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.kaleo.model.impl.KaleoTaskInstanceTokenImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setKaleoTaskInstanceTokenId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getKaleoTaskInstanceTokenId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setKaleoInstanceId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getKaleoInstanceId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setKaleoInstanceTokenId",new Class[]{Long.TYPE});
        Long value7=new Long(oldCplModel.getKaleoInstanceTokenId());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setKaleoTaskId",new Class[]{Long.TYPE});
        Long value8=new Long(oldCplModel.getKaleoTaskId());
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setCompletionUserId",new Class[]{Long.TYPE});
        Long value9=new Long(oldCplModel.getCompletionUserId());
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setCompletionDate",new Class[]{Date.class});
        Date value10=oldCplModel.getCompletionDate();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setDueDate",new Class[]{Date.class});
        Date value11=oldCplModel.getDueDate();
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setContext",new Class[]{String.class});
        String value12=oldCplModel.getContext();
        method12.invoke(newModel,value12);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(KaleoTransitionClp.class.getName())) {
    KaleoTransitionClp oldCplModel=(KaleoTransitionClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.kaleo.model.impl.KaleoTransitionImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setKaleoTransitionId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getKaleoTransitionId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setKaleoDefinitionId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getKaleoDefinitionId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setKaleoNodeId",new Class[]{Long.TYPE});
        Long value7=new Long(oldCplModel.getKaleoNodeId());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setName",new Class[]{String.class});
        String value8=oldCplModel.getName();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setDescription",new Class[]{String.class});
        String value9=oldCplModel.getDescription();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setSourceKaleoNodeId",new Class[]{Long.TYPE});
        Long value10=new Long(oldCplModel.getSourceKaleoNodeId());
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setSourceKaleoNodeName",new Class[]{String.class});
        String value11=oldCplModel.getSourceKaleoNodeName();
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setTargetKaleoNodeId",new Class[]{Long.TYPE});
        Long value12=new Long(oldCplModel.getTargetKaleoNodeId());
        method12.invoke(newModel,value12);
        Method method13=newModelClass.getMethod("setTargetKaleoNodeName",new Class[]{String.class});
        String value13=oldCplModel.getTargetKaleoNodeName();
        method13.invoke(newModel,value13);
        Method method14=newModelClass.getMethod("setDefaultTransition",new Class[]{Boolean.TYPE});
        Boolean value14=new Boolean(oldCplModel.getDefaultTransition());
        method14.invoke(newModel,value14);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
