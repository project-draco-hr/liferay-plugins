{
  long calendarBookingId=ParamUtil.getLong(actionRequest,"calendarBookingId");
  long calendarId=ParamUtil.getLong(actionRequest,"calendarId");
  long[] childCalendarIds=ParamUtil.getLongValues(actionRequest,"childCalendarIds");
  Map<Locale,String> titleMap=LocalizationUtil.getLocalizationMap(actionRequest,"title");
  Map<Locale,String> descriptionMap=LocalizationUtil.getLocalizationMap(actionRequest,"description");
  String location=ParamUtil.getString(actionRequest,"location");
  java.util.Calendar startDateJCalendar=getJCalendar(actionRequest,"startDate");
  java.util.Calendar endDateJCalendar=getJCalendar(actionRequest,"endDate");
  boolean allDay=ParamUtil.getBoolean(actionRequest,"allDay");
  String recurrence=ParamUtil.getString(actionRequest,"recurrence");
  int status=ParamUtil.getInteger(actionRequest,"status");
  ServiceContext serviceContext=ServiceContextFactory.getInstance(CalendarBooking.class.getName(),actionRequest);
  if (calendarBookingId <= 0) {
    CalendarBookingServiceUtil.addCalendarBooking(calendarId,childCalendarIds,CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT,titleMap,descriptionMap,location,startDateJCalendar.getTime(),endDateJCalendar.getTime(),allDay,recurrence,0,0,serviceContext);
  }
 else {
    CalendarBookingServiceUtil.updateCalendarBooking(calendarBookingId,calendarId,childCalendarIds,titleMap,descriptionMap,location,startDateJCalendar.getTime(),endDateJCalendar.getTime(),allDay,recurrence,0,0,status,serviceContext);
  }
}
