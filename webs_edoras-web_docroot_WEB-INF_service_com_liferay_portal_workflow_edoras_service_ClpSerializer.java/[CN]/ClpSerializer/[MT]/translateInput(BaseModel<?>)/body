{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals(WorkflowDefinitionClp.class.getName())) {
    WorkflowDefinitionClp oldCplModel=(WorkflowDefinitionClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.edoras.model.impl.WorkflowDefinitionImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setWorkflowDefinitionId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getWorkflowDefinitionId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setName",new Class[]{String.class});
        String value6=oldCplModel.getName();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setVersion",new Class[]{Integer.TYPE});
        Integer value7=new Integer(oldCplModel.getVersion());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setDesignerVersion",new Class[]{String.class});
        String value8=oldCplModel.getDesignerVersion();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setModelXml",new Class[]{String.class});
        String value9=oldCplModel.getModelXml();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setGraphicalXml",new Class[]{String.class});
        String value10=oldCplModel.getGraphicalXml();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setPersistent",new Class[]{Boolean.TYPE});
        Boolean value11=new Boolean(oldCplModel.getPersistent());
        method11.invoke(newModel,value11);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(WorkflowInstanceClp.class.getName())) {
    WorkflowInstanceClp oldCplModel=(WorkflowInstanceClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.edoras.model.impl.WorkflowInstanceImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setWorkflowInstanceId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getWorkflowInstanceId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setModifiedDate",new Class[]{Date.class});
        Date value5=oldCplModel.getModifiedDate();
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setSetupId",new Class[]{String.class});
        String value6=oldCplModel.getSetupId();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setFriendlyId",new Class[]{String.class});
        String value7=oldCplModel.getFriendlyId();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setWorkflowDefinitionId",new Class[]{Long.TYPE});
        Long value8=new Long(oldCplModel.getWorkflowDefinitionId());
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setParentWorkflowInstanceId",new Class[]{Long.TYPE});
        Long value9=new Long(oldCplModel.getParentWorkflowInstanceId());
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setRelationClassName",new Class[]{String.class});
        String value10=oldCplModel.getRelationClassName();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setRelationClassPK",new Class[]{Long.TYPE});
        Long value11=new Long(oldCplModel.getRelationClassPK());
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setAttributes",new Class[]{String.class});
        String value12=oldCplModel.getAttributes();
        method12.invoke(newModel,value12);
        Method method13=newModelClass.getMethod("setNestedWorkflowDefinitionIds",new Class[]{String.class});
        String value13=oldCplModel.getNestedWorkflowDefinitionIds();
        method13.invoke(newModel,value13);
        Method method14=newModelClass.getMethod("setNestedWorkflowDefinitionVersions",new Class[]{String.class});
        String value14=oldCplModel.getNestedWorkflowDefinitionVersions();
        method14.invoke(newModel,value14);
        Method method15=newModelClass.getMethod("setNestedRelatedElements",new Class[]{String.class});
        String value15=oldCplModel.getNestedRelatedElements();
        method15.invoke(newModel,value15);
        Method method16=newModelClass.getMethod("setCurrentElementName",new Class[]{String.class});
        String value16=oldCplModel.getCurrentElementName();
        method16.invoke(newModel,value16);
        Method method17=newModelClass.getMethod("setRelatedElementName",new Class[]{String.class});
        String value17=oldCplModel.getRelatedElementName();
        method17.invoke(newModel,value17);
        Method method18=newModelClass.getMethod("setFinished",new Class[]{Boolean.TYPE});
        Boolean value18=new Boolean(oldCplModel.getFinished());
        method18.invoke(newModel,value18);
        Method method19=newModelClass.getMethod("setFinishedDated",new Class[]{Date.class});
        Date value19=oldCplModel.getFinishedDated();
        method19.invoke(newModel,value19);
        Method method20=newModelClass.getMethod("setActive",new Class[]{Boolean.TYPE});
        Boolean value20=new Boolean(oldCplModel.getActive());
        method20.invoke(newModel,value20);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(WorkflowJobClp.class.getName())) {
    WorkflowJobClp oldCplModel=(WorkflowJobClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.edoras.model.impl.WorkflowJobImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setWorkflowJobId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getWorkflowJobId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value2=oldCplModel.getCreateDate();
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setSetupId",new Class[]{String.class});
        String value3=oldCplModel.getSetupId();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setWorkflowDefinitionId",new Class[]{Long.TYPE});
        Long value4=new Long(oldCplModel.getWorkflowDefinitionId());
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setWorkflowInstanceId",new Class[]{Long.TYPE});
        Long value5=new Long(oldCplModel.getWorkflowInstanceId());
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setElementName",new Class[]{String.class});
        String value6=oldCplModel.getElementName();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setCause",new Class[]{String.class});
        String value7=oldCplModel.getCause();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setDueDate",new Class[]{Date.class});
        Date value8=oldCplModel.getDueDate();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setNotBeforeDate",new Class[]{Date.class});
        Date value9=oldCplModel.getNotBeforeDate();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setExceptionCount",new Class[]{Integer.TYPE});
        Integer value10=new Integer(oldCplModel.getExceptionCount());
        method10.invoke(newModel,value10);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(WorkflowLogClp.class.getName())) {
    WorkflowLogClp oldCplModel=(WorkflowLogClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.edoras.model.impl.WorkflowLogImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setWorkflowLogId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getWorkflowLogId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setUserId",new Class[]{Long.TYPE});
        Long value2=new Long(oldCplModel.getUserId());
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setUserName",new Class[]{String.class});
        String value3=oldCplModel.getUserName();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value4=oldCplModel.getCreateDate();
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setWorkflowDefinitionId",new Class[]{Long.TYPE});
        Long value5=new Long(oldCplModel.getWorkflowDefinitionId());
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setWorkflowInstanceId",new Class[]{Long.TYPE});
        Long value6=new Long(oldCplModel.getWorkflowInstanceId());
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setWorkflowTaskId",new Class[]{Long.TYPE});
        Long value7=new Long(oldCplModel.getWorkflowTaskId());
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setLogEntityType",new Class[]{Integer.TYPE});
        Integer value8=new Integer(oldCplModel.getLogEntityType());
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setDescription",new Class[]{String.class});
        String value9=oldCplModel.getDescription();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setActivityName",new Class[]{String.class});
        String value10=oldCplModel.getActivityName();
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setOldState",new Class[]{String.class});
        String value11=oldCplModel.getOldState();
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setNewState",new Class[]{String.class});
        String value12=oldCplModel.getNewState();
        method12.invoke(newModel,value12);
        Method method13=newModelClass.getMethod("setType",new Class[]{Integer.TYPE});
        Integer value13=new Integer(oldCplModel.getType());
        method13.invoke(newModel,value13);
        Method method14=newModelClass.getMethod("setComment",new Class[]{String.class});
        String value14=oldCplModel.getComment();
        method14.invoke(newModel,value14);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals(WorkflowTaskClp.class.getName())) {
    WorkflowTaskClp oldCplModel=(WorkflowTaskClp)oldModel;
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        Class<?> newModelClass=Class.forName("com.liferay.portal.workflow.edoras.model.impl.WorkflowTaskImpl",true,_classLoader);
        Object newModel=newModelClass.newInstance();
        Method method0=newModelClass.getMethod("setWorkflowTaskId",new Class[]{Long.TYPE});
        Long value0=new Long(oldCplModel.getWorkflowTaskId());
        method0.invoke(newModel,value0);
        Method method1=newModelClass.getMethod("setCompanyId",new Class[]{Long.TYPE});
        Long value1=new Long(oldCplModel.getCompanyId());
        method1.invoke(newModel,value1);
        Method method2=newModelClass.getMethod("setCreateDate",new Class[]{Date.class});
        Date value2=oldCplModel.getCreateDate();
        method2.invoke(newModel,value2);
        Method method3=newModelClass.getMethod("setFriendlyId",new Class[]{String.class});
        String value3=oldCplModel.getFriendlyId();
        method3.invoke(newModel,value3);
        Method method4=newModelClass.getMethod("setWorkflowDefinitionId",new Class[]{Long.TYPE});
        Long value4=new Long(oldCplModel.getWorkflowDefinitionId());
        method4.invoke(newModel,value4);
        Method method5=newModelClass.getMethod("setWorkflowInstanceId",new Class[]{Long.TYPE});
        Long value5=new Long(oldCplModel.getWorkflowInstanceId());
        method5.invoke(newModel,value5);
        Method method6=newModelClass.getMethod("setMetaName",new Class[]{String.class});
        String value6=oldCplModel.getMetaName();
        method6.invoke(newModel,value6);
        Method method7=newModelClass.getMethod("setRelation",new Class[]{String.class});
        String value7=oldCplModel.getRelation();
        method7.invoke(newModel,value7);
        Method method8=newModelClass.getMethod("setDueDate",new Class[]{Date.class});
        Date value8=oldCplModel.getDueDate();
        method8.invoke(newModel,value8);
        Method method9=newModelClass.getMethod("setCompletionDate",new Class[]{Date.class});
        Date value9=oldCplModel.getCompletionDate();
        method9.invoke(newModel,value9);
        Method method10=newModelClass.getMethod("setCompleted",new Class[]{Boolean.TYPE});
        Boolean value10=new Boolean(oldCplModel.getCompleted());
        method10.invoke(newModel,value10);
        Method method11=newModelClass.getMethod("setState",new Class[]{Integer.TYPE});
        Integer value11=new Integer(oldCplModel.getState());
        method11.invoke(newModel,value11);
        Method method12=newModelClass.getMethod("setPriority",new Class[]{Integer.TYPE});
        Integer value12=new Integer(oldCplModel.getPriority());
        method12.invoke(newModel,value12);
        Method method13=newModelClass.getMethod("setAssigneeUserId",new Class[]{Long.TYPE});
        Long value13=new Long(oldCplModel.getAssigneeUserId());
        method13.invoke(newModel,value13);
        Method method14=newModelClass.getMethod("setAssigneeUserName",new Class[]{String.class});
        String value14=oldCplModel.getAssigneeUserName();
        method14.invoke(newModel,value14);
        Method method15=newModelClass.getMethod("setAssignedGroupName",new Class[]{String.class});
        String value15=oldCplModel.getAssignedGroupName();
        method15.invoke(newModel,value15);
        Method method16=newModelClass.getMethod("setRoleId",new Class[]{Long.TYPE});
        Long value16=new Long(oldCplModel.getRoleId());
        method16.invoke(newModel,value16);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
