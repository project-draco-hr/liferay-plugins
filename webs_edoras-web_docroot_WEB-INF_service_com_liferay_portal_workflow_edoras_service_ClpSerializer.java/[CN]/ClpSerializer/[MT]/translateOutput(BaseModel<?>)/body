{
  Class<?> oldModelClass=oldModel.getClass();
  String oldModelClassName=oldModelClass.getName();
  if (oldModelClassName.equals("com.liferay.portal.workflow.edoras.model.impl.WorkflowDefinitionImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        WorkflowDefinitionClp newModel=new WorkflowDefinitionClp();
        Method method0=oldModelClass.getMethod("getWorkflowDefinitionId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setWorkflowDefinitionId(value0.longValue());
        Method method1=oldModelClass.getMethod("getCompanyId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value1.longValue());
        Method method2=oldModelClass.getMethod("getUserId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setUserId(value2.longValue());
        Method method3=oldModelClass.getMethod("getUserName");
        String value3=(String)method3.invoke(oldModel,(Object[])null);
        newModel.setUserName(value3);
        Method method4=oldModelClass.getMethod("getCreateDate");
        Date value4=(Date)method4.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value4);
        Method method5=oldModelClass.getMethod("getModifiedDate");
        Date value5=(Date)method5.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value5);
        Method method6=oldModelClass.getMethod("getName");
        String value6=(String)method6.invoke(oldModel,(Object[])null);
        newModel.setName(value6);
        Method method7=oldModelClass.getMethod("getVersion");
        Integer value7=(Integer)method7.invoke(oldModel,(Object[])null);
        newModel.setVersion(value7.intValue());
        Method method8=oldModelClass.getMethod("getDesignerVersion");
        String value8=(String)method8.invoke(oldModel,(Object[])null);
        newModel.setDesignerVersion(value8);
        Method method9=oldModelClass.getMethod("getModelXml");
        String value9=(String)method9.invoke(oldModel,(Object[])null);
        newModel.setModelXml(value9);
        Method method10=oldModelClass.getMethod("getGraphicalXml");
        String value10=(String)method10.invoke(oldModel,(Object[])null);
        newModel.setGraphicalXml(value10);
        Method method11=oldModelClass.getMethod("getPersistent");
        Boolean value11=(Boolean)method11.invoke(oldModel,(Object[])null);
        newModel.setPersistent(value11.booleanValue());
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.portal.workflow.edoras.model.impl.WorkflowInstanceImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        WorkflowInstanceClp newModel=new WorkflowInstanceClp();
        Method method0=oldModelClass.getMethod("getWorkflowInstanceId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setWorkflowInstanceId(value0.longValue());
        Method method1=oldModelClass.getMethod("getCompanyId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value1.longValue());
        Method method2=oldModelClass.getMethod("getUserId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setUserId(value2.longValue());
        Method method3=oldModelClass.getMethod("getUserName");
        String value3=(String)method3.invoke(oldModel,(Object[])null);
        newModel.setUserName(value3);
        Method method4=oldModelClass.getMethod("getCreateDate");
        Date value4=(Date)method4.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value4);
        Method method5=oldModelClass.getMethod("getModifiedDate");
        Date value5=(Date)method5.invoke(oldModel,(Object[])null);
        newModel.setModifiedDate(value5);
        Method method6=oldModelClass.getMethod("getSetupId");
        String value6=(String)method6.invoke(oldModel,(Object[])null);
        newModel.setSetupId(value6);
        Method method7=oldModelClass.getMethod("getFriendlyId");
        String value7=(String)method7.invoke(oldModel,(Object[])null);
        newModel.setFriendlyId(value7);
        Method method8=oldModelClass.getMethod("getWorkflowDefinitionId");
        Long value8=(Long)method8.invoke(oldModel,(Object[])null);
        newModel.setWorkflowDefinitionId(value8.longValue());
        Method method9=oldModelClass.getMethod("getWorkflowDefinitionName");
        String value9=(String)method9.invoke(oldModel,(Object[])null);
        newModel.setWorkflowDefinitionName(value9);
        Method method10=oldModelClass.getMethod("getWorkflowDefinitionVersion");
        Integer value10=(Integer)method10.invoke(oldModel,(Object[])null);
        newModel.setWorkflowDefinitionVersion(value10.intValue());
        Method method11=oldModelClass.getMethod("getParentWorkflowInstanceId");
        Long value11=(Long)method11.invoke(oldModel,(Object[])null);
        newModel.setParentWorkflowInstanceId(value11.longValue());
        Method method12=oldModelClass.getMethod("getRelationClassName");
        String value12=(String)method12.invoke(oldModel,(Object[])null);
        newModel.setRelationClassName(value12);
        Method method13=oldModelClass.getMethod("getRelationClassPK");
        Long value13=(Long)method13.invoke(oldModel,(Object[])null);
        newModel.setRelationClassPK(value13.longValue());
        Method method14=oldModelClass.getMethod("getAttributes");
        String value14=(String)method14.invoke(oldModel,(Object[])null);
        newModel.setAttributes(value14);
        Method method15=oldModelClass.getMethod("getNestedWorkflowDefinitionIds");
        String value15=(String)method15.invoke(oldModel,(Object[])null);
        newModel.setNestedWorkflowDefinitionIds(value15);
        Method method16=oldModelClass.getMethod("getNestedWorkflowDefinitionVersions");
        String value16=(String)method16.invoke(oldModel,(Object[])null);
        newModel.setNestedWorkflowDefinitionVersions(value16);
        Method method17=oldModelClass.getMethod("getNestedRelatedElements");
        String value17=(String)method17.invoke(oldModel,(Object[])null);
        newModel.setNestedRelatedElements(value17);
        Method method18=oldModelClass.getMethod("getCurrentElementName");
        String value18=(String)method18.invoke(oldModel,(Object[])null);
        newModel.setCurrentElementName(value18);
        Method method19=oldModelClass.getMethod("getRelatedElementName");
        String value19=(String)method19.invoke(oldModel,(Object[])null);
        newModel.setRelatedElementName(value19);
        Method method20=oldModelClass.getMethod("getFinished");
        Boolean value20=(Boolean)method20.invoke(oldModel,(Object[])null);
        newModel.setFinished(value20.booleanValue());
        Method method21=oldModelClass.getMethod("getFinishedDated");
        Date value21=(Date)method21.invoke(oldModel,(Object[])null);
        newModel.setFinishedDated(value21);
        Method method22=oldModelClass.getMethod("getActive");
        Boolean value22=(Boolean)method22.invoke(oldModel,(Object[])null);
        newModel.setActive(value22.booleanValue());
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.portal.workflow.edoras.model.impl.WorkflowJobImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        WorkflowJobClp newModel=new WorkflowJobClp();
        Method method0=oldModelClass.getMethod("getWorkflowJobId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setWorkflowJobId(value0.longValue());
        Method method1=oldModelClass.getMethod("getCompanyId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value1.longValue());
        Method method2=oldModelClass.getMethod("getCreateDate");
        Date value2=(Date)method2.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value2);
        Method method3=oldModelClass.getMethod("getSetupId");
        String value3=(String)method3.invoke(oldModel,(Object[])null);
        newModel.setSetupId(value3);
        Method method4=oldModelClass.getMethod("getWorkflowDefinitionId");
        Long value4=(Long)method4.invoke(oldModel,(Object[])null);
        newModel.setWorkflowDefinitionId(value4.longValue());
        Method method5=oldModelClass.getMethod("getWorkflowInstanceId");
        Long value5=(Long)method5.invoke(oldModel,(Object[])null);
        newModel.setWorkflowInstanceId(value5.longValue());
        Method method6=oldModelClass.getMethod("getElementName");
        String value6=(String)method6.invoke(oldModel,(Object[])null);
        newModel.setElementName(value6);
        Method method7=oldModelClass.getMethod("getCause");
        String value7=(String)method7.invoke(oldModel,(Object[])null);
        newModel.setCause(value7);
        Method method8=oldModelClass.getMethod("getDueDate");
        Date value8=(Date)method8.invoke(oldModel,(Object[])null);
        newModel.setDueDate(value8);
        Method method9=oldModelClass.getMethod("getNotBeforeDate");
        Date value9=(Date)method9.invoke(oldModel,(Object[])null);
        newModel.setNotBeforeDate(value9);
        Method method10=oldModelClass.getMethod("getExceptionCount");
        Integer value10=(Integer)method10.invoke(oldModel,(Object[])null);
        newModel.setExceptionCount(value10.intValue());
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.portal.workflow.edoras.model.impl.WorkflowLogImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        WorkflowLogClp newModel=new WorkflowLogClp();
        Method method0=oldModelClass.getMethod("getWorkflowLogId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setWorkflowLogId(value0.longValue());
        Method method1=oldModelClass.getMethod("getCompanyId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value1.longValue());
        Method method2=oldModelClass.getMethod("getUserId");
        Long value2=(Long)method2.invoke(oldModel,(Object[])null);
        newModel.setUserId(value2.longValue());
        Method method3=oldModelClass.getMethod("getUserName");
        String value3=(String)method3.invoke(oldModel,(Object[])null);
        newModel.setUserName(value3);
        Method method4=oldModelClass.getMethod("getCreateDate");
        Date value4=(Date)method4.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value4);
        Method method5=oldModelClass.getMethod("getWorkflowDefinitionId");
        Long value5=(Long)method5.invoke(oldModel,(Object[])null);
        newModel.setWorkflowDefinitionId(value5.longValue());
        Method method6=oldModelClass.getMethod("getWorkflowInstanceId");
        Long value6=(Long)method6.invoke(oldModel,(Object[])null);
        newModel.setWorkflowInstanceId(value6.longValue());
        Method method7=oldModelClass.getMethod("getWorkflowTaskId");
        Long value7=(Long)method7.invoke(oldModel,(Object[])null);
        newModel.setWorkflowTaskId(value7.longValue());
        Method method8=oldModelClass.getMethod("getLogEntityType");
        Integer value8=(Integer)method8.invoke(oldModel,(Object[])null);
        newModel.setLogEntityType(value8.intValue());
        Method method9=oldModelClass.getMethod("getDescription");
        String value9=(String)method9.invoke(oldModel,(Object[])null);
        newModel.setDescription(value9);
        Method method10=oldModelClass.getMethod("getActivityName");
        String value10=(String)method10.invoke(oldModel,(Object[])null);
        newModel.setActivityName(value10);
        Method method11=oldModelClass.getMethod("getOldState");
        String value11=(String)method11.invoke(oldModel,(Object[])null);
        newModel.setOldState(value11);
        Method method12=oldModelClass.getMethod("getNewState");
        String value12=(String)method12.invoke(oldModel,(Object[])null);
        newModel.setNewState(value12);
        Method method13=oldModelClass.getMethod("getType");
        Integer value13=(Integer)method13.invoke(oldModel,(Object[])null);
        newModel.setType(value13.intValue());
        Method method14=oldModelClass.getMethod("getComment");
        String value14=(String)method14.invoke(oldModel,(Object[])null);
        newModel.setComment(value14);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  if (oldModelClassName.equals("com.liferay.portal.workflow.edoras.model.impl.WorkflowTaskImpl")) {
    ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(_classLoader);
      try {
        WorkflowTaskClp newModel=new WorkflowTaskClp();
        Method method0=oldModelClass.getMethod("getWorkflowTaskId");
        Long value0=(Long)method0.invoke(oldModel,(Object[])null);
        newModel.setWorkflowTaskId(value0.longValue());
        Method method1=oldModelClass.getMethod("getCompanyId");
        Long value1=(Long)method1.invoke(oldModel,(Object[])null);
        newModel.setCompanyId(value1.longValue());
        Method method2=oldModelClass.getMethod("getCreateDate");
        Date value2=(Date)method2.invoke(oldModel,(Object[])null);
        newModel.setCreateDate(value2);
        Method method3=oldModelClass.getMethod("getFriendlyId");
        String value3=(String)method3.invoke(oldModel,(Object[])null);
        newModel.setFriendlyId(value3);
        Method method4=oldModelClass.getMethod("getWorkflowDefinitionId");
        Long value4=(Long)method4.invoke(oldModel,(Object[])null);
        newModel.setWorkflowDefinitionId(value4.longValue());
        Method method5=oldModelClass.getMethod("getWorkflowDefinitionName");
        String value5=(String)method5.invoke(oldModel,(Object[])null);
        newModel.setWorkflowDefinitionName(value5);
        Method method6=oldModelClass.getMethod("getWorkflowDefinitionVersion");
        Integer value6=(Integer)method6.invoke(oldModel,(Object[])null);
        newModel.setWorkflowDefinitionVersion(value6.intValue());
        Method method7=oldModelClass.getMethod("getWorkflowInstanceId");
        Long value7=(Long)method7.invoke(oldModel,(Object[])null);
        newModel.setWorkflowInstanceId(value7.longValue());
        Method method8=oldModelClass.getMethod("getMetaName");
        String value8=(String)method8.invoke(oldModel,(Object[])null);
        newModel.setMetaName(value8);
        Method method9=oldModelClass.getMethod("getRelation");
        String value9=(String)method9.invoke(oldModel,(Object[])null);
        newModel.setRelation(value9);
        Method method10=oldModelClass.getMethod("getDueDate");
        Date value10=(Date)method10.invoke(oldModel,(Object[])null);
        newModel.setDueDate(value10);
        Method method11=oldModelClass.getMethod("getCompletionDate");
        Date value11=(Date)method11.invoke(oldModel,(Object[])null);
        newModel.setCompletionDate(value11);
        Method method12=oldModelClass.getMethod("getCompleted");
        Boolean value12=(Boolean)method12.invoke(oldModel,(Object[])null);
        newModel.setCompleted(value12.booleanValue());
        Method method13=oldModelClass.getMethod("getState");
        Integer value13=(Integer)method13.invoke(oldModel,(Object[])null);
        newModel.setState(value13.intValue());
        Method method14=oldModelClass.getMethod("getPriority");
        Integer value14=(Integer)method14.invoke(oldModel,(Object[])null);
        newModel.setPriority(value14.intValue());
        Method method15=oldModelClass.getMethod("getAsynchronous");
        Boolean value15=(Boolean)method15.invoke(oldModel,(Object[])null);
        newModel.setAsynchronous(value15.booleanValue());
        Method method16=oldModelClass.getMethod("getTaskName");
        String value16=(String)method16.invoke(oldModel,(Object[])null);
        newModel.setTaskName(value16);
        Method method17=oldModelClass.getMethod("getDescription");
        String value17=(String)method17.invoke(oldModel,(Object[])null);
        newModel.setDescription(value17);
        Method method18=oldModelClass.getMethod("getAssigneeUserId");
        Long value18=(Long)method18.invoke(oldModel,(Object[])null);
        newModel.setAssigneeUserId(value18.longValue());
        Method method19=oldModelClass.getMethod("getAssigneeUserName");
        String value19=(String)method19.invoke(oldModel,(Object[])null);
        newModel.setAssigneeUserName(value19);
        Method method20=oldModelClass.getMethod("getAssigneeGroupId");
        Long value20=(Long)method20.invoke(oldModel,(Object[])null);
        newModel.setAssigneeGroupId(value20.longValue());
        Method method21=oldModelClass.getMethod("getAssigneeGroupName");
        String value21=(String)method21.invoke(oldModel,(Object[])null);
        newModel.setAssigneeGroupName(value21);
        Method method22=oldModelClass.getMethod("getAssigneeRoleId");
        Long value22=(Long)method22.invoke(oldModel,(Object[])null);
        newModel.setAssigneeRoleId(value22.longValue());
        Method method23=oldModelClass.getMethod("getAssigneeRoleName");
        String value23=(String)method23.invoke(oldModel,(Object[])null);
        newModel.setAssigneeRoleName(value23);
        return newModel;
      }
 catch (      Exception e) {
        _log.error(e,e);
      }
    }
  finally {
      Thread.currentThread().setContextClassLoader(contextClassLoader);
    }
  }
  return oldModel;
}
