{
  Object[] ids=getRepositoryEntryIds(extRepositoryObject.getId());
  long extRepositoryObjectId=(Long)ids[0];
  String uuid=(String)ids[1];
  ExtRepositoryObjectAdapter<?> extRepositoryObjectAdapter=null;
  if (extRepositoryObjectAdapter == null) {
    if (extRepositoryObject instanceof ExtRepositoryFolder) {
      ExtRepositoryFolder extRepositoryFolder=(ExtRepositoryFolder)extRepositoryObject;
      extRepositoryObjectAdapter=new ExtRepositoryFolderAdapter(this,extRepositoryObjectId,uuid,extRepositoryFolder);
    }
 else {
      ExtRepositoryFileEntry extRepositoryFileEntry=(ExtRepositoryFileEntry)extRepositoryObject;
      extRepositoryObjectAdapter=new ExtRepositoryFileEntryAdapter(this,extRepositoryObjectId,uuid,extRepositoryFileEntry);
      _forceGetVersions((ExtRepositoryFileEntryAdapter)extRepositoryObjectAdapter);
    }
  }
  if (extRepositoryObjectAdapterType == ExtRepositoryObjectAdapterType.FILE) {
    if (!(extRepositoryObjectAdapter instanceof ExtRepositoryFileEntryAdapter)) {
      throw new NoSuchFileEntryException("External repository entry is not a file " + extRepositoryObject);
    }
  }
 else   if (extRepositoryObjectAdapterType == ExtRepositoryObjectAdapterType.FOLDER) {
    if (!(extRepositoryObjectAdapter instanceof ExtRepositoryFolderAdapter)) {
      throw new NoSuchFolderException("External repository entry is not a folder " + extRepositoryObject);
    }
  }
 else   if (extRepositoryObjectAdapterType != ExtRepositoryObjectAdapterType.OBJECT) {
    throw new IllegalArgumentException("Unsupported repository entry type " + extRepositoryObjectAdapterType);
  }
  return (T)extRepositoryObjectAdapter;
}
