{
  Object[] ids=getRepositoryEntryIds(extRepositoryEntry.getId());
  long extRepositoryEntryId=(Long)ids[0];
  String uuid=(String)ids[1];
  ExtRepositoryEntryAdapter<?> extRepositoryEntryAdapter=null;
  if (extRepositoryEntryAdapter == null) {
    if (extRepositoryEntry instanceof ExtRepositoryFolder) {
      ExtRepositoryFolder extRepositoryFolder=(ExtRepositoryFolder)extRepositoryEntry;
      extRepositoryEntryAdapter=new ExtRepositoryFolderAdapter(this,extRepositoryEntryId,uuid,extRepositoryFolder);
    }
 else {
      ExtRepositoryFileEntry extRepositoryFileEntry=(ExtRepositoryFileEntry)extRepositoryEntry;
      extRepositoryEntryAdapter=new ExtRepositoryFileEntryAdapter(this,extRepositoryEntryId,uuid,extRepositoryFileEntry);
      _forceGetVersions((ExtRepositoryFileEntryAdapter)extRepositoryEntryAdapter);
    }
  }
  if (entryType == ExtRepositoryModelAdapterType.FILE) {
    if (!(extRepositoryEntryAdapter instanceof ExtRepositoryFileEntryAdapter)) {
      throw new NoSuchFileEntryException("External repository entry is not a file " + extRepositoryEntry);
    }
  }
 else   if (entryType == ExtRepositoryModelAdapterType.FOLDER) {
    if (!(extRepositoryEntryAdapter instanceof ExtRepositoryFolderAdapter)) {
      throw new NoSuchFolderException("External repository entry is not a folder " + extRepositoryEntry);
    }
  }
 else   if (entryType != ExtRepositoryModelAdapterType.ENTRY) {
    throw new IllegalArgumentException("Unsupported repository entry type " + entryType);
  }
  return (T)extRepositoryEntryAdapter;
}
