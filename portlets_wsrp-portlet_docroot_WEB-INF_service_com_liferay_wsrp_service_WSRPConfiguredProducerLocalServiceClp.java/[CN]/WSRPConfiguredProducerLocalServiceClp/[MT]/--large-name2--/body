{
  Object paramObj0=ClpSerializer.translateInput(name);
  if (name == null) {
    paramObj0=new NullWrapper("java.lang.String");
  }
  Object paramObj1=ClpSerializer.translateInput(portalId);
  if (portalId == null) {
    paramObj1=new NullWrapper("java.lang.String");
  }
  Object paramObj2=ClpSerializer.translateInput(namespace);
  if (namespace == null) {
    paramObj2=new NullWrapper("java.lang.String");
  }
  Object paramObj3=ClpSerializer.translateInput(producerURL);
  if (producerURL == null) {
    paramObj3=new NullWrapper("java.lang.String");
  }
  Object paramObj4=ClpSerializer.translateInput(producerVersion);
  if (producerVersion == null) {
    paramObj4=new NullWrapper("java.lang.String");
  }
  Object paramObj5=ClpSerializer.translateInput(producerMarkupURL);
  if (producerMarkupURL == null) {
    paramObj5=new NullWrapper("java.lang.String");
  }
  Object paramObj6=new IntegerWrapper(status);
  Object paramObj7=ClpSerializer.translateInput(registrationData);
  if (registrationData == null) {
    paramObj7=new NullWrapper("java.lang.String");
  }
  Object paramObj8=ClpSerializer.translateInput(registrationContext);
  if (registrationContext == null) {
    paramObj8=new NullWrapper("java.lang.String");
  }
  Object paramObj9=ClpSerializer.translateInput(serviceDescription);
  if (serviceDescription == null) {
    paramObj9=new NullWrapper("java.lang.String");
  }
  Object paramObj10=ClpSerializer.translateInput(userCategoryMapping);
  if (userCategoryMapping == null) {
    paramObj10=new NullWrapper("java.lang.String");
  }
  Object paramObj11=ClpSerializer.translateInput(customUserProfile);
  if (customUserProfile == null) {
    paramObj11=new NullWrapper("java.lang.String");
  }
  Object paramObj12=ClpSerializer.translateInput(identityPropagationType);
  if (identityPropagationType == null) {
    paramObj12=new NullWrapper("java.lang.String");
  }
  Object paramObj13=ClpSerializer.translateInput(lifetimeTerminationTime);
  if (lifetimeTerminationTime == null) {
    paramObj13=new NullWrapper("java.lang.String");
  }
  Object paramObj14=new LongWrapper(sdLastModified);
  Object paramObj15=new IntegerWrapper(entityVersion);
  try {
    _classLoaderProxy.invoke("addConfiguredProducer",new Object[]{paramObj0,paramObj1,paramObj2,paramObj3,paramObj4,paramObj5,paramObj6,paramObj7,paramObj8,paramObj9,paramObj10,paramObj11,paramObj12,paramObj13,paramObj14,paramObj15});
  }
 catch (  Throwable t) {
    if (t instanceof com.liferay.portal.SystemException) {
      throw (com.liferay.portal.SystemException)t;
    }
    if (t instanceof RuntimeException) {
      throw (RuntimeException)t;
    }
 else {
      throw new RuntimeException(t.getClass().getName() + " is not a valid exception");
    }
  }
}
